{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Read Latest Documentation - Browse GitHub Code Repository hug aims to make developing Python driven APIs as simple as possible, but no simpler. As a result, it drastically simplifies Python API development. hug's Design Objectives: Make developing a Python driven API as succinct as a written definition. The framework should encourage code that self-documents. It should be fast. A developer should never feel the need to look somewhere else for performance reasons. Writing tests for APIs written on-top of hug should be easy and intuitive. Magic done once, in an API framework, is better than pushing the problem set to the user of the API framework. Be the basis for next generation Python APIs, embracing the latest technology. As a result of these goals, hug is Python 3+ only and built upon Falcon's high performance HTTP library Supporting hug development Get professionally supported hug with the Tidelift Subscription Professional support for hug is available as part of the Tidelift Subscription . Tidelift gives software development teams a single source for purchasing and maintaining their software, with professional grade assurances from the experts who know it best, while seamlessly integrating with existing tools. Installing hug Installing hug is as simple as: pip3 install hug --upgrade Ideally, within a virtual environment . Getting Started Build an example API with a simple endpoint in just a few lines. # filename: happy_birthday.py \"\"\"A basic (single function) API written using hug\"\"\" import hug @hug.get ( '/happy_birthday' ) def happy_birthday ( name , age : hug . types . number = 1 ): \"\"\"Says happy birthday to a user\"\"\" return \"Happy {age} Birthday {name}!\" . format ( ** locals ()) To run, from the command line type: hug -f happy_birthday.py You can access the example in your browser at: localhost:8000/happy_birthday?name=hug&age=1 . Then check out the documentation for your API at localhost:8000/documentation Parameters can also be encoded in the URL (check out happy_birthday.py for the whole example). @hug.get ( '/greet/{event}' ) def greet ( event : str ): \"\"\"Greets appropriately (from http://blog.ketchum.com/how-to-write-10-common-holiday-greetings/) \"\"\" greetings = \"Happy\" if event == \"Christmas\" : greetings = \"Merry\" if event == \"Kwanzaa\" : greetings = \"Joyous\" if event == \"wishes\" : greetings = \"Warm\" return \"{greetings} {event}!\" . format ( ** locals ()) Which, once you are running the server as above, you can use this way: curl http : // localhost : 8000 / greet / wishes \"Warm wishes!\" Versioning with hug # filename: versioning_example.py \"\"\"A simple example of a hug API call with versioning\"\"\" import hug @hug.get ( '/echo' , versions = 1 ) def echo ( text ): return text @hug.get ( '/echo' , versions = range ( 2 , 5 )) def echo ( text ): return \"Echo: {text}\" . format ( ** locals ()) To run the example: hug -f versioning_example.py Then you can access the example from localhost:8000/v1/echo?text=Hi / localhost:8000/v2/echo?text=Hi Or access the documentation for your API from localhost:8000 Note: versioning in hug automatically supports both the version header as well as direct URL based specification. Testing hug APIs hug's http method decorators don't modify your original functions. This makes testing hug APIs as simple as testing any other Python functions. Additionally, this means interacting with your API functions in other Python code is as straight forward as calling Python only API functions. hug makes it easy to test the full Python stack of your API by using the hug.test module: import hug import happy_birthday hug . test . get ( happy_birthday , 'happy_birthday' , { 'name' : 'Timothy' , 'age' : 25 }) # Returns a Response object You can use this Response object for test assertions (check out test_happy_birthday.py ): def tests_happy_birthday (): response = hug . test . get ( happy_birthday , 'happy_birthday' , { 'name' : 'Timothy' , 'age' : 25 }) assert response . status == HTTP_200 assert response . data is not None Running hug with other WSGI based servers hug exposes a __hug_wsgi__ magic method on every API module automatically. Running your hug based API on any standard wsgi server should be as simple as pointing it to module_name : __hug_wsgi__ . For Example: uwsgi --http 0 .0.0.0:8000 --wsgi-file examples/hello_world.py --callable __hug_wsgi__ To run the hello world hug example API. Building Blocks of a hug API When building an API using the hug framework you'll use the following concepts: METHOD Decorators get , post , update , etc HTTP method decorators that expose your Python function as an API while keeping your Python method unchanged @hug.get () # <- Is the hug METHOD decorator def hello_world (): return \"Hello\" hug uses the structure of the function you decorate to automatically generate documentation for users of your API. hug always passes a request, response, and api_version variable to your function if they are defined params in your function definition. Type Annotations functions that optionally are attached to your methods arguments to specify how the argument is validated and converted into a Python type @hug.get () def math ( number_1 : int , number_2 : int ): #The :int after both arguments is the Type Annotation return number_1 + number_2 Type annotations also feed into hug 's automatic documentation generation to let users of your API know what data to supply. Directives functions that get executed with the request / response data based on being requested as an argument in your api_function. These apply as input parameters only, and can not be applied currently as output formats or transformations. @hug.get () def test_time ( hug_timer ): return { 'time_taken' : float ( hug_timer )} Directives may be accessed via an argument with a hug_ prefix, or by using Python 3 type annotations. The latter is the more modern approach, and is recommended. Directives declared in a module can be accessed by using their fully qualified name as the type annotation (ex: module.directive_name ). Aside from the obvious input transformation use case, directives can be used to pipe data into your API functions, even if they are not present in the request query string, POST body, etc. For an example of how to use directives in this way, see the authentication example in the examples folder. Adding your own directives is straight forward: @hug.directive () def square ( value = 1 , ** kwargs ): '''Returns passed in parameter multiplied by itself''' return value * value @hug.get () @hug.local () def tester ( value : square = 10 ): return value tester () == 100 For completeness, here is an example of accessing the directive via the magic name approach: @hug.directive () def multiply ( value = 1 , ** kwargs ): '''Returns passed in parameter multiplied by itself''' return value * value @hug.get () @hug.local () def tester ( hug_multiply = 10 ): return hug_multiply tester () == 100 Output Formatters a function that takes the output of your API function and formats it for transport to the user of the API. @hug.default_output_format () def my_output_formatter ( data ): return \"STRING:{0}\" . format ( data ) @hug.get ( output = hug . output_format . json ) def hello (): return { 'hello' : 'world' } as shown, you can easily change the output format for both an entire API as well as an individual API call Input Formatters a function that takes the body of data given from a user of your API and formats it for handling. @hug.default_input_format ( \"application/json\" ) def my_input_formatter ( data ): return ( 'Results' , hug . input_format . json ( data )) Input formatters are mapped based on the content_type of the request data, and only perform basic parsing. More detailed parsing should be done by the Type Annotations present on your api_function Middleware functions that get called for every request a hug API processes @hug.request_middleware () def process_data ( request , response ): request . env [ 'SERVER_NAME' ] = 'changed' @hug.response_middleware () def process_data ( request , response , resource ): response . set_header ( 'MyHeader' , 'Value' ) You can also easily add any Falcon style middleware using: __hug__ . http . add_middleware ( MiddlewareObject ()) Parameter mapping can be used to override inferred parameter names, eg. for reserved keywords: import marshmallow.fields as fields ... @hug.get ( '/foo' , map_params = { 'from' : 'from_date' }) # API call uses 'from' def get_foo_by_date ( from_date : fields . DateTime ()): return find_foo ( from_date ) Input formatters are mapped based on the content_type of the request data, and only perform basic parsing. More detailed parsing should be done by the Type Annotations present on your api_function Splitting APIs over multiple files hug enables you to organize large projects in any manner you see fit. You can import any module that contains hug decorated functions (request handling, directives, type handlers, etc) and extend your base API with that module. For example: something.py import hug @hug.get ( '/' ) def say_hi (): return 'hello from something' Can be imported into the main API file: __init__.py import hug from . import something @hug.get ( '/' ) def say_hi (): return \"Hi from root\" @hug.extend_api ( '/something' ) def something_api (): return [ something ] Or alternatively - for cases like this - where only one module is being included per a URL route: #alternatively hug . API ( __name__ ) . extend ( something , '/something' ) Configuring hug 404 By default, hug returns an auto generated API spec when a user tries to access an endpoint that isn't defined. If you would not like to return this spec you can turn off 404 documentation: From the command line application: hug -nd -f { file } #nd flag tells hug not to generate documentation on 404 Additionally, you can easily create a custom 404 handler using the hug.not_found decorator: @hug.not_found () def not_found_handler (): return \"Not Found\" This decorator works in the same manner as the hug HTTP method decorators, and is even version aware: @hug.not_found ( versions = 1 ) def not_found_handler (): return \"\" @hug.not_found ( versions = 2 ) def not_found_handler (): return \"Not Found\" Asyncio support When using the get and cli method decorator on coroutines, hug will schedule the execution of the coroutine. Using asyncio coroutine decorator @hug.get () @asyncio.coroutine def hello_world (): return \"Hello\" Using Python 3.5 async keyword. @hug.get () async def hello_world (): return \"Hello\" NOTE: Hug is running on top Falcon which is not an asynchronous server. Even if using asyncio, requests will still be processed synchronously. Using Docker If you like to develop in Docker and keep your system clean, you can do that but you'll need to first install Docker Compose . Once you've done that, you'll need to cd into the docker directory and run the web server (Gunicorn) specified in ./docker/gunicorn/Dockerfile , after which you can preview the output of your API in the browser on your host machine. $ cd ./docker # This will run Gunicorn on port 8000 of the Docker container. $ docker-compose up gunicorn # From the host machine, find your Dockers IP address. # For Windows & Mac: $ docker-machine ip default # For Linux: $ ifconfig docker0 | grep 'inet' | cut -d: -f2 | awk '{ print $1}' | head -n1 By default, the IP is 172.17.0.1. Assuming that's the IP you see, as well, you would then go to http://172.17.0.1:8000/ in your browser to view your API. You can also log into a Docker container that you can consider your work space. This workspace has Python and Pip installed so you can use those tools within Docker. If you need to test the CLI interface, for example, you would use this. $ docker-compose run workspace bash On your Docker workspace container, the ./docker/templates directory on your host computer is mounted to /src in the Docker container. This is specified under services > app of ./docker/docker-compose.yml . bash-4.3# cd /src bash-4.3# tree . \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 handlers \u251c\u2500\u2500 birthday.py \u2514\u2500\u2500 hello.py 1 directory, 3 files Security contact information hug takes security and quality seriously. This focus is why we depend only on thoroughly tested components and utilize static analysis tools (such as bandit and safety) to verify the security of our code base. If you find or encounter any potential security issues, please let us know right away so we can resolve them. To report a security vulnerability, please use the Tidelift security contact . Tidelift will coordinate the fix and disclosure. Why hug? HUG simply stands for Hopefully Useful Guide. This represents the project's goal to help guide developers into creating well written and intuitive APIs. Thanks and I hope you find this hug helpful as you develop your next Python API! ~Timothy Crosley","title":"Home"},{"location":"#supporting-hug-development","text":"Get professionally supported hug with the Tidelift Subscription Professional support for hug is available as part of the Tidelift Subscription . Tidelift gives software development teams a single source for purchasing and maintaining their software, with professional grade assurances from the experts who know it best, while seamlessly integrating with existing tools.","title":"Supporting hug development"},{"location":"#installing-hug","text":"Installing hug is as simple as: pip3 install hug --upgrade Ideally, within a virtual environment .","title":"Installing hug"},{"location":"#getting-started","text":"Build an example API with a simple endpoint in just a few lines. # filename: happy_birthday.py \"\"\"A basic (single function) API written using hug\"\"\" import hug @hug.get ( '/happy_birthday' ) def happy_birthday ( name , age : hug . types . number = 1 ): \"\"\"Says happy birthday to a user\"\"\" return \"Happy {age} Birthday {name}!\" . format ( ** locals ()) To run, from the command line type: hug -f happy_birthday.py You can access the example in your browser at: localhost:8000/happy_birthday?name=hug&age=1 . Then check out the documentation for your API at localhost:8000/documentation Parameters can also be encoded in the URL (check out happy_birthday.py for the whole example). @hug.get ( '/greet/{event}' ) def greet ( event : str ): \"\"\"Greets appropriately (from http://blog.ketchum.com/how-to-write-10-common-holiday-greetings/) \"\"\" greetings = \"Happy\" if event == \"Christmas\" : greetings = \"Merry\" if event == \"Kwanzaa\" : greetings = \"Joyous\" if event == \"wishes\" : greetings = \"Warm\" return \"{greetings} {event}!\" . format ( ** locals ()) Which, once you are running the server as above, you can use this way: curl http : // localhost : 8000 / greet / wishes \"Warm wishes!\"","title":"Getting Started"},{"location":"#versioning-with-hug","text":"# filename: versioning_example.py \"\"\"A simple example of a hug API call with versioning\"\"\" import hug @hug.get ( '/echo' , versions = 1 ) def echo ( text ): return text @hug.get ( '/echo' , versions = range ( 2 , 5 )) def echo ( text ): return \"Echo: {text}\" . format ( ** locals ()) To run the example: hug -f versioning_example.py Then you can access the example from localhost:8000/v1/echo?text=Hi / localhost:8000/v2/echo?text=Hi Or access the documentation for your API from localhost:8000 Note: versioning in hug automatically supports both the version header as well as direct URL based specification.","title":"Versioning with hug"},{"location":"#testing-hug-apis","text":"hug's http method decorators don't modify your original functions. This makes testing hug APIs as simple as testing any other Python functions. Additionally, this means interacting with your API functions in other Python code is as straight forward as calling Python only API functions. hug makes it easy to test the full Python stack of your API by using the hug.test module: import hug import happy_birthday hug . test . get ( happy_birthday , 'happy_birthday' , { 'name' : 'Timothy' , 'age' : 25 }) # Returns a Response object You can use this Response object for test assertions (check out test_happy_birthday.py ): def tests_happy_birthday (): response = hug . test . get ( happy_birthday , 'happy_birthday' , { 'name' : 'Timothy' , 'age' : 25 }) assert response . status == HTTP_200 assert response . data is not None","title":"Testing hug APIs"},{"location":"#running-hug-with-other-wsgi-based-servers","text":"hug exposes a __hug_wsgi__ magic method on every API module automatically. Running your hug based API on any standard wsgi server should be as simple as pointing it to module_name : __hug_wsgi__ . For Example: uwsgi --http 0 .0.0.0:8000 --wsgi-file examples/hello_world.py --callable __hug_wsgi__ To run the hello world hug example API.","title":"Running hug with other WSGI based servers"},{"location":"#building-blocks-of-a-hug-api","text":"When building an API using the hug framework you'll use the following concepts: METHOD Decorators get , post , update , etc HTTP method decorators that expose your Python function as an API while keeping your Python method unchanged @hug.get () # <- Is the hug METHOD decorator def hello_world (): return \"Hello\" hug uses the structure of the function you decorate to automatically generate documentation for users of your API. hug always passes a request, response, and api_version variable to your function if they are defined params in your function definition. Type Annotations functions that optionally are attached to your methods arguments to specify how the argument is validated and converted into a Python type @hug.get () def math ( number_1 : int , number_2 : int ): #The :int after both arguments is the Type Annotation return number_1 + number_2 Type annotations also feed into hug 's automatic documentation generation to let users of your API know what data to supply. Directives functions that get executed with the request / response data based on being requested as an argument in your api_function. These apply as input parameters only, and can not be applied currently as output formats or transformations. @hug.get () def test_time ( hug_timer ): return { 'time_taken' : float ( hug_timer )} Directives may be accessed via an argument with a hug_ prefix, or by using Python 3 type annotations. The latter is the more modern approach, and is recommended. Directives declared in a module can be accessed by using their fully qualified name as the type annotation (ex: module.directive_name ). Aside from the obvious input transformation use case, directives can be used to pipe data into your API functions, even if they are not present in the request query string, POST body, etc. For an example of how to use directives in this way, see the authentication example in the examples folder. Adding your own directives is straight forward: @hug.directive () def square ( value = 1 , ** kwargs ): '''Returns passed in parameter multiplied by itself''' return value * value @hug.get () @hug.local () def tester ( value : square = 10 ): return value tester () == 100 For completeness, here is an example of accessing the directive via the magic name approach: @hug.directive () def multiply ( value = 1 , ** kwargs ): '''Returns passed in parameter multiplied by itself''' return value * value @hug.get () @hug.local () def tester ( hug_multiply = 10 ): return hug_multiply tester () == 100 Output Formatters a function that takes the output of your API function and formats it for transport to the user of the API. @hug.default_output_format () def my_output_formatter ( data ): return \"STRING:{0}\" . format ( data ) @hug.get ( output = hug . output_format . json ) def hello (): return { 'hello' : 'world' } as shown, you can easily change the output format for both an entire API as well as an individual API call Input Formatters a function that takes the body of data given from a user of your API and formats it for handling. @hug.default_input_format ( \"application/json\" ) def my_input_formatter ( data ): return ( 'Results' , hug . input_format . json ( data )) Input formatters are mapped based on the content_type of the request data, and only perform basic parsing. More detailed parsing should be done by the Type Annotations present on your api_function Middleware functions that get called for every request a hug API processes @hug.request_middleware () def process_data ( request , response ): request . env [ 'SERVER_NAME' ] = 'changed' @hug.response_middleware () def process_data ( request , response , resource ): response . set_header ( 'MyHeader' , 'Value' ) You can also easily add any Falcon style middleware using: __hug__ . http . add_middleware ( MiddlewareObject ()) Parameter mapping can be used to override inferred parameter names, eg. for reserved keywords: import marshmallow.fields as fields ... @hug.get ( '/foo' , map_params = { 'from' : 'from_date' }) # API call uses 'from' def get_foo_by_date ( from_date : fields . DateTime ()): return find_foo ( from_date ) Input formatters are mapped based on the content_type of the request data, and only perform basic parsing. More detailed parsing should be done by the Type Annotations present on your api_function","title":"Building Blocks of a hug API"},{"location":"#splitting-apis-over-multiple-files","text":"hug enables you to organize large projects in any manner you see fit. You can import any module that contains hug decorated functions (request handling, directives, type handlers, etc) and extend your base API with that module. For example: something.py import hug @hug.get ( '/' ) def say_hi (): return 'hello from something' Can be imported into the main API file: __init__.py import hug from . import something @hug.get ( '/' ) def say_hi (): return \"Hi from root\" @hug.extend_api ( '/something' ) def something_api (): return [ something ] Or alternatively - for cases like this - where only one module is being included per a URL route: #alternatively hug . API ( __name__ ) . extend ( something , '/something' )","title":"Splitting APIs over multiple files"},{"location":"#configuring-hug-404","text":"By default, hug returns an auto generated API spec when a user tries to access an endpoint that isn't defined. If you would not like to return this spec you can turn off 404 documentation: From the command line application: hug -nd -f { file } #nd flag tells hug not to generate documentation on 404 Additionally, you can easily create a custom 404 handler using the hug.not_found decorator: @hug.not_found () def not_found_handler (): return \"Not Found\" This decorator works in the same manner as the hug HTTP method decorators, and is even version aware: @hug.not_found ( versions = 1 ) def not_found_handler (): return \"\" @hug.not_found ( versions = 2 ) def not_found_handler (): return \"Not Found\"","title":"Configuring hug 404"},{"location":"#asyncio-support","text":"When using the get and cli method decorator on coroutines, hug will schedule the execution of the coroutine. Using asyncio coroutine decorator @hug.get () @asyncio.coroutine def hello_world (): return \"Hello\" Using Python 3.5 async keyword. @hug.get () async def hello_world (): return \"Hello\" NOTE: Hug is running on top Falcon which is not an asynchronous server. Even if using asyncio, requests will still be processed synchronously.","title":"Asyncio support"},{"location":"#using-docker","text":"If you like to develop in Docker and keep your system clean, you can do that but you'll need to first install Docker Compose . Once you've done that, you'll need to cd into the docker directory and run the web server (Gunicorn) specified in ./docker/gunicorn/Dockerfile , after which you can preview the output of your API in the browser on your host machine. $ cd ./docker # This will run Gunicorn on port 8000 of the Docker container. $ docker-compose up gunicorn # From the host machine, find your Dockers IP address. # For Windows & Mac: $ docker-machine ip default # For Linux: $ ifconfig docker0 | grep 'inet' | cut -d: -f2 | awk '{ print $1}' | head -n1 By default, the IP is 172.17.0.1. Assuming that's the IP you see, as well, you would then go to http://172.17.0.1:8000/ in your browser to view your API. You can also log into a Docker container that you can consider your work space. This workspace has Python and Pip installed so you can use those tools within Docker. If you need to test the CLI interface, for example, you would use this. $ docker-compose run workspace bash On your Docker workspace container, the ./docker/templates directory on your host computer is mounted to /src in the Docker container. This is specified under services > app of ./docker/docker-compose.yml . bash-4.3# cd /src bash-4.3# tree . \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 handlers \u251c\u2500\u2500 birthday.py \u2514\u2500\u2500 hello.py 1 directory, 3 files","title":"Using Docker"},{"location":"#security-contact-information","text":"hug takes security and quality seriously. This focus is why we depend only on thoroughly tested components and utilize static analysis tools (such as bandit and safety) to verify the security of our code base. If you find or encounter any potential security issues, please let us know right away so we can resolve them. To report a security vulnerability, please use the Tidelift security contact . Tidelift will coordinate the fix and disclosure.","title":"Security contact information"},{"location":"#why-hug","text":"HUG simply stands for Hopefully Useful Guide. This represents the project's goal to help guide developers into creating well written and intuitive APIs. Thanks and I hope you find this hug helpful as you develop your next Python API! ~Timothy Crosley","title":"Why hug?"},{"location":"ACKNOWLEDGEMENTS/","text":"Core Developers Timothy Edmund Crosley (@timothycrosley) Brandon Hoffman (@BrandonHoffman) Jason Tyler (@jay-tyler) Fabian Kochem (@vortec) Notable Bug Reporters Michael Buckner (@michaelbuckner) Carl Neuhaus (@carlneuhaus) Eirik Rye (@eirikrye) Matteo Bertini (@naufraghi) Erwin Haasnoot (@ErwinHaasnoot) Aris Pikeas (@pikeas) Code Contributors Kostas Dizas (@kostasdizas) Ali-Akber Saifee (@alisaifee) @arpesenti Eirik Rye (@eirikrye) Matteo Bertini (@naufraghi) Trevor Scheitrum (@trevorscheitrum) Ian Wagner (@ianthetechie) Erwin Haasnoot (@ErwinHaasnoot) Kirk Leon Guerrero (@kirklg) Ergo_ (@johnlam) Rodrigue Cloutier (@rodcloutier) KhanhIceTea (@khanhicetea) Prashant Sinha (@PrashntS) Alan Lu (@cag) Soloman Weng (@soloman1124) Evan Owen (@thatGuy0923) Gemedet (@gemedet) Garrett Squire (@gsquire) Ha\u00efkel Gu\u00e9mar (@hguemar) Eshin Kunishima (@mikoim) Mike Adams (@mikeadamz) Michal Bultrowicz (@butla) Bogdan (@spock) @banteg Philip Bjorge (@philipbjorge) Daniel Metz (@danielmmetz) Alessandro Amici (@alexamici) Trevor Bekolay (@tbekolay) Elijah Wilson (@tizz98) Chelsea Dole (@chelseadole) Antti Kaihola (@akaihola) Christopher Goes (@GhostOfGoes) Stanislav (@atmo) Lordran (@xzycn) Stephan Fitzpatrick (@knowsuchagency) Edvard Majakari (@EdvardM) Documenters Timothy Cyrus (@tcyrus) M.Yasoob Ullah Khalid (@yasoob) Lionel Montrieux (@lmontrieux) Ian Wagner (@ianthetechie) Andrew Murray (@radarhere) Tim (@timlyo) Sven-Hendrik Haase (@svenstaro) Matt Caldwell (@mattcaldwell) berdario (@berdario) Cory Taylor (@coryandrewtaylor) James C. (@JamesMCo) Ally Weir (@allyjweir) Steven Loria (@sloria) Patrick Abeya (@wombat2k) Ergo_ (@johnlam) Adeel Khan (@adeel) Benjamin Williams (@benjaminjosephw) @gdw2 Thierry Colsenet (@ThierryCols) Shawn Q Jackson (@gt50) Bernhard E. Reiter (@bernhardreiter) Adam McCarthy (@mccajm) Sobolev Nikita (@sobolevn) Chris (@ckhrysze) Amanda Crosley (@waddlelikeaduck) Chelsea Dole (@chelseadole) Joshua Crowgey (@jcrowgey) Antti Kaihola (@akaihola) Simon Ince (@Simon-Ince) Edvard Majakari (@EdvardM) A sincere thanks to everyone who has helped make hug the great Python3 project it is today! ~Timothy Crosley","title":"Acknowledgements"},{"location":"ACKNOWLEDGEMENTS/#core-developers","text":"Timothy Edmund Crosley (@timothycrosley) Brandon Hoffman (@BrandonHoffman) Jason Tyler (@jay-tyler) Fabian Kochem (@vortec)","title":"Core Developers"},{"location":"ACKNOWLEDGEMENTS/#notable-bug-reporters","text":"Michael Buckner (@michaelbuckner) Carl Neuhaus (@carlneuhaus) Eirik Rye (@eirikrye) Matteo Bertini (@naufraghi) Erwin Haasnoot (@ErwinHaasnoot) Aris Pikeas (@pikeas)","title":"Notable Bug Reporters"},{"location":"ACKNOWLEDGEMENTS/#code-contributors","text":"Kostas Dizas (@kostasdizas) Ali-Akber Saifee (@alisaifee) @arpesenti Eirik Rye (@eirikrye) Matteo Bertini (@naufraghi) Trevor Scheitrum (@trevorscheitrum) Ian Wagner (@ianthetechie) Erwin Haasnoot (@ErwinHaasnoot) Kirk Leon Guerrero (@kirklg) Ergo_ (@johnlam) Rodrigue Cloutier (@rodcloutier) KhanhIceTea (@khanhicetea) Prashant Sinha (@PrashntS) Alan Lu (@cag) Soloman Weng (@soloman1124) Evan Owen (@thatGuy0923) Gemedet (@gemedet) Garrett Squire (@gsquire) Ha\u00efkel Gu\u00e9mar (@hguemar) Eshin Kunishima (@mikoim) Mike Adams (@mikeadamz) Michal Bultrowicz (@butla) Bogdan (@spock) @banteg Philip Bjorge (@philipbjorge) Daniel Metz (@danielmmetz) Alessandro Amici (@alexamici) Trevor Bekolay (@tbekolay) Elijah Wilson (@tizz98) Chelsea Dole (@chelseadole) Antti Kaihola (@akaihola) Christopher Goes (@GhostOfGoes) Stanislav (@atmo) Lordran (@xzycn) Stephan Fitzpatrick (@knowsuchagency) Edvard Majakari (@EdvardM)","title":"Code Contributors"},{"location":"ACKNOWLEDGEMENTS/#documenters","text":"Timothy Cyrus (@tcyrus) M.Yasoob Ullah Khalid (@yasoob) Lionel Montrieux (@lmontrieux) Ian Wagner (@ianthetechie) Andrew Murray (@radarhere) Tim (@timlyo) Sven-Hendrik Haase (@svenstaro) Matt Caldwell (@mattcaldwell) berdario (@berdario) Cory Taylor (@coryandrewtaylor) James C. (@JamesMCo) Ally Weir (@allyjweir) Steven Loria (@sloria) Patrick Abeya (@wombat2k) Ergo_ (@johnlam) Adeel Khan (@adeel) Benjamin Williams (@benjaminjosephw) @gdw2 Thierry Colsenet (@ThierryCols) Shawn Q Jackson (@gt50) Bernhard E. Reiter (@bernhardreiter) Adam McCarthy (@mccajm) Sobolev Nikita (@sobolevn) Chris (@ckhrysze) Amanda Crosley (@waddlelikeaduck) Chelsea Dole (@chelseadole) Joshua Crowgey (@jcrowgey) Antti Kaihola (@akaihola) Simon Ince (@Simon-Ince) Edvard Majakari (@EdvardM) A sincere thanks to everyone who has helped make hug the great Python3 project it is today! ~Timothy Crosley","title":"Documenters"},{"location":"ARCHITECTURE/","text":"The guiding thought behind the architecture hug is the cleanest way to create HTTP REST APIs on Python 3. It consistently benchmarks among the top 3 performing web frameworks for Python, handily beating out Flask and Django. For almost every common Web API task the code written to accomplish it in hug is a small fraction of what is required in other Frameworks. However, it's important to note, hug is not a Web API Framework. OK--that certainly is a function it performs. And exceptionally well at that. But at its core, hug is a framework for exposing idiomatically correct and standard internal Python APIs externally. A framework to allow developers and architects to define logic and structure once, and then cleanly expose it over other means. Currently, this means that you can expose existing Python functions / APIs over HTTP and CLI in addition to standard Python. However, as time goes on more interfaces will be supported. The architecture and implementation decisions that have gone into hug have and will continue to support this goal. This central concept also frees hug to rely on the fastest and best of breed components for every interface it supports: Falcon is leveraged when exposing to HTTP for its impressive performance at this task Argparse is leveraged when exposing to CLI for the clean consistent interaction it enables from the command line What this looks like in practice - an illustrative example Let's say I have a very simple Python API I've built to add 2 numbers together. I call my invention addition . Trust me, this is legit. It's trademarked and everything: \"\"\"A simple API to enable adding two numbers together\"\"\" def add ( number_1 , number_2 ): \"\"\"Returns the result of adding number_1 to number_2\"\"\" return number_1 + number_2 It works, it's well documented, and it's clean. Several people are already importing and using my Python module for their math needs. However, there's a great injustice! I'm lazy, and I don't want to open a Python interpreter etc to access my function. Here's how I modify it to expose it via the command line: \"\"\"A simple API to enable adding two numbers together\"\"\" import hug @hug.cli () def add ( number_1 : hug . types . number , number_2 : hug . types . number ): \"\"\"Returns the result of adding number_1 to number_2\"\"\" return number_1 + number_2 if __name__ == '__main__' : add . interface . cli () Yay! Now I can just do my math from the command line using: add.py $NUMBER_1 $NUMBER_2 . And even better, if I miss an argument it lets me know what it is and how to fix my error. The thing I immediately notice, is that my new command line interface works, it's well documented, and it's clean. Just like the original. However, users are not satisfied. I keep updating my API and they don't want to have to install a new copy every time. They demand a Web API so they can always be pointing to my latest and greatest without restarting their apps and APIs. No problem. I'll just expose it over HTTP as well: \"\"\"A simple API to enable adding two numbers together\"\"\" import hug @hug.get () # <-- This is the only additional line @hug.cli () def add ( number_1 : hug . types . number , number_2 : hug . types . number ): \"\"\"Returns the result of adding number_1 to number_2\"\"\" return number_1 + number_2 if __name__ == '__main__' : add . interface . cli () That's it. I then run my new service via hug -f add.py and can see it running on http://localhost:8000/ . The default page shows me documentation that points me toward http://localhost:8000/add?number_1=1&number_2=2 to perform my first addition. The thing I immediately notice, is that my new web interface works, it's well documented, and it's clean. Just like the original. Even better, after all of this, people hitting the API via Python didn't have to change anything. All my original unit tests continue to pass and my code coverage remains at 100%. It turns out, the problems and thoughts that go into defining a clean well documented API for internal use greatly mirror those that are required to expose an API for external use. hug recognizes this and enables cleanly reusing the documentation, requirements, and structure of internal APIs for external use. This also encourages easier to use and well documented internal APIs: a major win/win. What happened internally as I exposed my API to new interfaces? A few things happen when you wrapped that first function for external use, with hug.cli(): hug created a singleton hug.API object on your module to keep track of all interfaces that exist within the module This is referable by __hug__ or hug.API(__name__) a new hug.interface.CLI() object was created and attached to add.interface.cli This interface fully encapsulates the logic needed to expose add as a command line tool NOTE: all supported ways to expose a function via hug can be found in hug/interface.py the original Python add function is returned unmodified (with exception to the .interface.cli property addition) Then when I extended my API to run as HTTP service the same basic pattern was followed: hug saw that the singleton already existed a new hug.interface.HTTP() object was created and attached to add.interface.http This interface encapsulates the logic needed to expose the add command as an HTTP service The new HTTP interface handler is registered to the API singleton the original Python add function is returned unmodified (with exception to the .interface.http property addition) At the end of this, I have 2 interface objects attached to my original function: add.cli and add.http . Which is consistent with what I want to accomplish, one Python API with 2 additional external interfaces. When I start the service via the command line, I call the add.cli interface directly which executes the code producing a command line tool to interact with the add function. When I run hug -f add.py the hug runner looks for the __hug__ singleton object and then looks for all registered HTTP interfaces, creating a Falcon WSGI API from them. It then uses this new Falcon API to directly handle incoming HTTP requests. Where does the code live for these core pieces? While hug has a lot of modules that enable it to provide a great depth of functionality, everything accomplished above, and that is core to hug, lives in only a few: hug/api.py : Defines the hug per-module singleton object that keeps track of all registered interfaces, alongside the associated per interface APIs (HTTPInterfaceAPI, CLIInterfaceAPI) hug/routing.py : holds all the data and settings that should be passed to newly created interfaces, and creates the interfaces from that data. This directly is what powers hug.get , hug.cli , and all other function to interface routers Can be seen as a Factory for creating new interfaces hug/interface.py : Defines the actual interfaces that manage external interaction with your function (CLI and HTTP). These 3 modules define the core functionality of hug, and any API that uses hug will inevitably utilize these modules. Develop a good handling on just these and you'll be in great shape to contribute to hug, and think of new ways to improve the Framework. Beyond these there is one additional internal utility library that enables hug to do its magic: hug/introspect.py . This module provides utility functions that enable hugs routers to determine what arguments a function takes and in what form. Enabling interfaces to improve upon internal functions hug provides several mechanisms to enable your exposed interfaces to have additional capabilities not defined by the base Python function. Enforced type annotations hug interfaces automatically enforce the type annotations that you set on functions def add ( number_1 : hug . types . number , number_2 : hug . types . number ): These types are simply called with the data which is passed into that field, if an exception is raised then it's seen as invalid. All of hug's custom types used for enforcing annotations are defined in hug/types.py . Directives hug interfaces allow replacing Python function parameters with dynamically-pulled data via directives. def add ( number_1 : hug . types . number , number_2 : hug . types . number , hug_timer = 2 ): In this example hug_timer is a directive, when calling via a hug interface hug_timer is replaced with a timer that contains the starting time. All of hug's built-in directives are defined in hug/directives.py . Requires hug requirements allow you to specify requirements that must be met only for specified interfaces. @hug.get ( requires = hug . authentication . basic ( hug . authentication . verify ( 'User1' , 'mypassword' ))) Causes the HTTP method to only successfully call the Python function if User1 is logged in. require functions currently highly focused on authentication and all existing require functions are defined in hug/authentication.py . Transformations hug transformations enable changing the result of a function but only for the specified interface. @hug.get ( transform = str ) The above would cause the method to return a stringed result, while the original Python function would still return an int. All of hug's built in transformations are defined in hug/transform.py . Input/Output formats hug provides an extensive number of built-in input and output formats. python @hug.get(output_format=hug.output_format.json) These formats define how data should be sent to your API function and how it will be returned. All of hugs built-in output formats are found in hug/output_format.py . All of hugs built-in input formats are found in hug/input_format.py . The default output_formatting is JSON. Switching from using a hug API over one interface to another hug does its best to also solve the other side of the coin: that is how APIs are used. While native Python will always be the fastest, HTTP can provide attractive auto updating and clear responsibility separation benefits. You can interact with hug APIs via hug.use.[interface] if the ability to switch between these is a high priority for you. The code that enables this is found in hug/use.py and should be kept in mind if working on adding an additional interface for hug, or changing how hug calls functions. Feel free to update or request more info :) I tried my best to highlight where important functionality in the hug project lives via this Architecture document, as well as explain the reasoning behind it. However, this document is certainly not complete! If you encounter anything you would like to be expanded upon or explained in detail here, please either let me know or modify the document so everyone can get a good walkthrough of hug's architecture. Thanks! I hope you have found this guide useful :) ~Timothy","title":"Architecture"},{"location":"ARCHITECTURE/#the-guiding-thought-behind-the-architecture","text":"hug is the cleanest way to create HTTP REST APIs on Python 3. It consistently benchmarks among the top 3 performing web frameworks for Python, handily beating out Flask and Django. For almost every common Web API task the code written to accomplish it in hug is a small fraction of what is required in other Frameworks. However, it's important to note, hug is not a Web API Framework. OK--that certainly is a function it performs. And exceptionally well at that. But at its core, hug is a framework for exposing idiomatically correct and standard internal Python APIs externally. A framework to allow developers and architects to define logic and structure once, and then cleanly expose it over other means. Currently, this means that you can expose existing Python functions / APIs over HTTP and CLI in addition to standard Python. However, as time goes on more interfaces will be supported. The architecture and implementation decisions that have gone into hug have and will continue to support this goal. This central concept also frees hug to rely on the fastest and best of breed components for every interface it supports: Falcon is leveraged when exposing to HTTP for its impressive performance at this task Argparse is leveraged when exposing to CLI for the clean consistent interaction it enables from the command line","title":"The guiding thought behind the architecture"},{"location":"ARCHITECTURE/#what-this-looks-like-in-practice-an-illustrative-example","text":"Let's say I have a very simple Python API I've built to add 2 numbers together. I call my invention addition . Trust me, this is legit. It's trademarked and everything: \"\"\"A simple API to enable adding two numbers together\"\"\" def add ( number_1 , number_2 ): \"\"\"Returns the result of adding number_1 to number_2\"\"\" return number_1 + number_2 It works, it's well documented, and it's clean. Several people are already importing and using my Python module for their math needs. However, there's a great injustice! I'm lazy, and I don't want to open a Python interpreter etc to access my function. Here's how I modify it to expose it via the command line: \"\"\"A simple API to enable adding two numbers together\"\"\" import hug @hug.cli () def add ( number_1 : hug . types . number , number_2 : hug . types . number ): \"\"\"Returns the result of adding number_1 to number_2\"\"\" return number_1 + number_2 if __name__ == '__main__' : add . interface . cli () Yay! Now I can just do my math from the command line using: add.py $NUMBER_1 $NUMBER_2 . And even better, if I miss an argument it lets me know what it is and how to fix my error. The thing I immediately notice, is that my new command line interface works, it's well documented, and it's clean. Just like the original. However, users are not satisfied. I keep updating my API and they don't want to have to install a new copy every time. They demand a Web API so they can always be pointing to my latest and greatest without restarting their apps and APIs. No problem. I'll just expose it over HTTP as well: \"\"\"A simple API to enable adding two numbers together\"\"\" import hug @hug.get () # <-- This is the only additional line @hug.cli () def add ( number_1 : hug . types . number , number_2 : hug . types . number ): \"\"\"Returns the result of adding number_1 to number_2\"\"\" return number_1 + number_2 if __name__ == '__main__' : add . interface . cli () That's it. I then run my new service via hug -f add.py and can see it running on http://localhost:8000/ . The default page shows me documentation that points me toward http://localhost:8000/add?number_1=1&number_2=2 to perform my first addition. The thing I immediately notice, is that my new web interface works, it's well documented, and it's clean. Just like the original. Even better, after all of this, people hitting the API via Python didn't have to change anything. All my original unit tests continue to pass and my code coverage remains at 100%. It turns out, the problems and thoughts that go into defining a clean well documented API for internal use greatly mirror those that are required to expose an API for external use. hug recognizes this and enables cleanly reusing the documentation, requirements, and structure of internal APIs for external use. This also encourages easier to use and well documented internal APIs: a major win/win.","title":"What this looks like in practice - an illustrative example"},{"location":"ARCHITECTURE/#what-happened-internally-as-i-exposed-my-api-to-new-interfaces","text":"A few things happen when you wrapped that first function for external use, with hug.cli(): hug created a singleton hug.API object on your module to keep track of all interfaces that exist within the module This is referable by __hug__ or hug.API(__name__) a new hug.interface.CLI() object was created and attached to add.interface.cli This interface fully encapsulates the logic needed to expose add as a command line tool NOTE: all supported ways to expose a function via hug can be found in hug/interface.py the original Python add function is returned unmodified (with exception to the .interface.cli property addition) Then when I extended my API to run as HTTP service the same basic pattern was followed: hug saw that the singleton already existed a new hug.interface.HTTP() object was created and attached to add.interface.http This interface encapsulates the logic needed to expose the add command as an HTTP service The new HTTP interface handler is registered to the API singleton the original Python add function is returned unmodified (with exception to the .interface.http property addition) At the end of this, I have 2 interface objects attached to my original function: add.cli and add.http . Which is consistent with what I want to accomplish, one Python API with 2 additional external interfaces. When I start the service via the command line, I call the add.cli interface directly which executes the code producing a command line tool to interact with the add function. When I run hug -f add.py the hug runner looks for the __hug__ singleton object and then looks for all registered HTTP interfaces, creating a Falcon WSGI API from them. It then uses this new Falcon API to directly handle incoming HTTP requests.","title":"What happened internally as I exposed my API to new interfaces?"},{"location":"ARCHITECTURE/#where-does-the-code-live-for-these-core-pieces","text":"While hug has a lot of modules that enable it to provide a great depth of functionality, everything accomplished above, and that is core to hug, lives in only a few: hug/api.py : Defines the hug per-module singleton object that keeps track of all registered interfaces, alongside the associated per interface APIs (HTTPInterfaceAPI, CLIInterfaceAPI) hug/routing.py : holds all the data and settings that should be passed to newly created interfaces, and creates the interfaces from that data. This directly is what powers hug.get , hug.cli , and all other function to interface routers Can be seen as a Factory for creating new interfaces hug/interface.py : Defines the actual interfaces that manage external interaction with your function (CLI and HTTP). These 3 modules define the core functionality of hug, and any API that uses hug will inevitably utilize these modules. Develop a good handling on just these and you'll be in great shape to contribute to hug, and think of new ways to improve the Framework. Beyond these there is one additional internal utility library that enables hug to do its magic: hug/introspect.py . This module provides utility functions that enable hugs routers to determine what arguments a function takes and in what form.","title":"Where does the code live for these core pieces?"},{"location":"ARCHITECTURE/#enabling-interfaces-to-improve-upon-internal-functions","text":"hug provides several mechanisms to enable your exposed interfaces to have additional capabilities not defined by the base Python function.","title":"Enabling interfaces to improve upon internal functions"},{"location":"ARCHITECTURE/#enforced-type-annotations","text":"hug interfaces automatically enforce the type annotations that you set on functions def add ( number_1 : hug . types . number , number_2 : hug . types . number ): These types are simply called with the data which is passed into that field, if an exception is raised then it's seen as invalid. All of hug's custom types used for enforcing annotations are defined in hug/types.py .","title":"Enforced type annotations"},{"location":"ARCHITECTURE/#directives","text":"hug interfaces allow replacing Python function parameters with dynamically-pulled data via directives. def add ( number_1 : hug . types . number , number_2 : hug . types . number , hug_timer = 2 ): In this example hug_timer is a directive, when calling via a hug interface hug_timer is replaced with a timer that contains the starting time. All of hug's built-in directives are defined in hug/directives.py .","title":"Directives"},{"location":"ARCHITECTURE/#requires","text":"hug requirements allow you to specify requirements that must be met only for specified interfaces. @hug.get ( requires = hug . authentication . basic ( hug . authentication . verify ( 'User1' , 'mypassword' ))) Causes the HTTP method to only successfully call the Python function if User1 is logged in. require functions currently highly focused on authentication and all existing require functions are defined in hug/authentication.py .","title":"Requires"},{"location":"ARCHITECTURE/#transformations","text":"hug transformations enable changing the result of a function but only for the specified interface. @hug.get ( transform = str ) The above would cause the method to return a stringed result, while the original Python function would still return an int. All of hug's built in transformations are defined in hug/transform.py .","title":"Transformations"},{"location":"ARCHITECTURE/#inputoutput-formats","text":"hug provides an extensive number of built-in input and output formats. python @hug.get(output_format=hug.output_format.json) These formats define how data should be sent to your API function and how it will be returned. All of hugs built-in output formats are found in hug/output_format.py . All of hugs built-in input formats are found in hug/input_format.py . The default output_formatting is JSON.","title":"Input/Output formats"},{"location":"ARCHITECTURE/#switching-from-using-a-hug-api-over-one-interface-to-another","text":"hug does its best to also solve the other side of the coin: that is how APIs are used. While native Python will always be the fastest, HTTP can provide attractive auto updating and clear responsibility separation benefits. You can interact with hug APIs via hug.use.[interface] if the ability to switch between these is a high priority for you. The code that enables this is found in hug/use.py and should be kept in mind if working on adding an additional interface for hug, or changing how hug calls functions.","title":"Switching from using a hug API over one interface to another"},{"location":"ARCHITECTURE/#feel-free-to-update-or-request-more-info","text":"I tried my best to highlight where important functionality in the hug project lives via this Architecture document, as well as explain the reasoning behind it. However, this document is certainly not complete! If you encounter anything you would like to be expanded upon or explained in detail here, please either let me know or modify the document so everyone can get a good walkthrough of hug's architecture. Thanks! I hope you have found this guide useful :) ~Timothy","title":"Feel free to update or request more info :)"},{"location":"CHANGELOG/","text":"Install the latest To install the latest version of hug simply run: pip3 install hug --upgrade Ideally, within a virtual environment. Changelog 2.6.0 - August 29, 2019 Improved CLI multiple behaviour with empty defaults Improved CLI type output for built-in types Improved MultiCLI base documentation 2.5.6 - June 20, 2019 Fixed issue #815: map_params() causes api documentation to lose param type information Improved project testing: restoring 100% coverage 2.5.5 - June 13, 2019 Fixed issue #808: Problems with command line invocation via hug CLI Fixed issue #647: Support for arbitrary URL complexity when using CORS middleware Fixed issue #805: Added documentation for map_params feature Added initial automated code cleaning and linting partially satisfying HOPE-8 -- Style Guideline for Hug Implemented HOPE-20 -- The Zen of Hug 2.5.4 hotfix - May 19, 2019 Fix issue #798 - Development runner TypeError when executing cli 2.5.3 hotfix - May 15, 2019 Fixed issue #794 - Restore support for versions of Marshmallow pre-2.17.0 2.5.2 hotfix - May 10, 2019 Fixed issue #790 - Set Falcon defaults to pre 2.0.0 version to avoid breaking changes for Hug users until a Hug 3.0.0 release. The new default Falcon behaviour can be defaulted before hand by setting __hug__.future = True . 2.5.1 hotfix - May 9, 2019 Fixed issue #784 - POST requests broken on 2.5.0 Optimizations and simplification of async support, taking advantadge of Python3.4 deprecation. Fix issue #785: Empty query params are not ignored on 2.5.0 Added support for modifying falcon API directly on startup Initial black formatting of code base, in preperation for CI enforced code formatting 2.5.0 - May 4, 2019 Updated to latest Falcon: 2.0.0 Added support for Marshmallow 3 Added support for args decorator parameter to optionally specify type transformations separate from annotations Added support for tests to provide a custom host parameter Breaking Changes: Deprecated support for Python 3.4 2.4.9 - TBD Add the ability to invoke the hug development server as a Python module e.g. python -m hug Corrected the documentation for the --without-cython install option 2.4.8 - April 7, 2019 Fixed issue #762 - HTTP errors crash with selectable output types Fixed MacOS testing via travis - added testing accross all the same Python versions tested on Linux 2.4.7 - March 28, 2019 Fixed API documentation with selectable output types 2.4.6 - March 25, 2019 Fixed issue #753 - 404 not found does not respect default output format. Documented the --without-cython option in CONTRIBUTING.md Extended documentation for output formats 2.4.4 - March 21, 2019 Added the ability to change the default output format for CLI endpoints both at the API and global level. Added the ablity to extend CLI APIs in addition to HTTP APIs issue #744. Added optional built-in API aware testing for CLI commands. Add unit test for extend_api() with CLI commands Fix running tests using python setup.py test Fix issue #749 extending API with mixed GET/POST methods Documented the multiple_files example Added the --without-cython option to setup.py 2.4.3 [hotfix] - March 17, 2019 Fix issue #737 - latest hug release breaks meinheld worker setup 2.4.2 - March 16, 2019 Python 3.7 support improvements No longer test against Python 3.4 - aimed for full deprecation in Hug 3.0.0 Improved interoperability with the latest Falcon release Documentation improvements Fixed bug in auto reload 2.4.1 - Sep 17, 2018 Fixed issue #631: Added support for Python 3.7 Fixed issue #665: Fixed problem with hug.types.json Fixed issue #679: Return docs for marshmallow schema instead of for dump method 2.4.0 - Jan 31, 2018 Updated Falcon requirement to 1.4.1 Fixed issue #590: Textual output formats should have explicitly defined charsets by default Fixed issue #596: Host argument for development runner Fixed issue #563: Added middleware to handle CORS requests Implemented issue #612: Add support for numpy types in JSON output by default Implemented improved class based directives with cleanup support (see: https://github.com/timothycrosley/hug/pull/603) Support ujson if installed Implement issue #579: Allow silencing intro message when running hug from command line Implemented issue #531: Allow exit value to alter status code for CLI tools Updated documentation generation to use hug's JSON outputter for consistency 2.3.2 - Sep 28, 2017 Implemented Issue #540: Add support for remapping parameters Updated Falcon requirement to 1.3.0 Fixed issue #552: Version ignored in class based routes Fixed issue #555: Gracefully handle digit only version strings Fixed issue #519: Exceptions are now correctly inserted into the current API using extend_api Breaking Changes: Fixed issue #539: Allow JSON output to include non-ascii (UTF8) characters by default. 2.3.1 - Aug 26, 2017 Fixed issue #500 & 504: Added support for automatic reload on Windows & enabled intuitive use of pdb within autoreloader Implemented improved way to retrieve list of urls and handlers for issue #462 Implemented support for Python typing module style sub types Updated to allow -m parameter load modules on current directory Improved hug.test decode behaviour Added built in handlers for CORS support: directive hug.directives.cors Improved routing support Added allow origins middleware 2.3.0 - May 4, 2017 Falcon requirement upgraded to 1.2.0 Enables filtering documentation according to a base_url Fixed a vulnerability in the static file router that allows files in parent directory to be accessed Fixed issue #392: Enable posting self in JSON data structure Fixed issue #418: Ensure version passed is a number Fixed issue #399: Multiple ints not working correctly for CLI interface Fixed issue #461: Enable async startup methods running in parallel Fixed issue #412: None type return for file output format Fixed issue #464: Class based routing now inherit templated parameters Fixed issue #346: Enable using async routes within threaded server Implemented issue #437: Added support for anonymous APIs Added support for exporting timedeltas to JSON as seconds Added support for endpoint-specific input formatters: def my_input_formatter ( data ): return ( 'Results' , hug . input_format . json ( data )) @hug.get ( inputs = { 'application/json' : my_input_formatter }) def foo (): pass Adds support for passing in a custom scheme in hug.test Adds str() and repr() support to hug_timer directive Added support for moduleless APIs Improved argparser usage message Implemented feature #427: Allow custom argument deserialization together with standard type annotation Improvements to exception handling. Added support for request / response in a single generator based middleware function Automatic reload support for development runner Added support for passing params dictionary and query_string arguments into hug.test.http command for more direct modification of test inputs Added support for manual specifying the scheme used in hug.test calls Improved output formats, enabling nested request / response dependent formatters Breaking Changes Sub output formatters functions now need to accept response & request or **kwargs Fixed issue #432: Improved ease of sub classing simple types - causes type extensions of types that dont take to init arguments, to automatically return an instanciated type, beaking existing usage that had to instanciate after the fact Fixed issue #405: cli and http @hug.startup() differs, not executed for cli, this also means that startup handlers are given an instance of the API and not of the interface. 2.2.0 - Oct 16, 2016 Defaults asyncio event loop to uvloop automatically if it is installed Added support for making endpoints private to enforce lack of automatic documentation creation for them. Added HTTP method named (get, post, etc) routers to the API router to be consistent with documentation Added smart handling of empty JSON content (issue #300) Added ability to have explicitly unversioned API endpoints using versions=False Added support for providing a different base URL when extending an API Added support for sinks when extending API Added support for object based CLI handlers Added support for excluding exceptions from being handled Added support for **kwarg handling within CLI interfaces Allows custom decorators to access parameters like request and response, without putting them in the original functions' parameter list Fixed not found handlers not being imported when extending an API Fixed API extending support of extra features like input_format Fixed issue with API directive not working with extension feature Fixed nested async calls so that they reuse the same loop Fixed TypeError being raised incorrectly when no content-type is specified (issue #330) Fixed issues with multi-part requests (issue #329) Fixed documentation output to exclude api_version and body Fixed an issue passing None where a text value was required (issue #341) 2.1.2 - May 18, 2016 Fixed an issue with sharing exception handlers across multiple modules (Thanks @soloman1124) Fixed how single direction (response / request) middlewares are bounded to work when code is Cython compiled 2.1.1 - May 17, 2016 Hot-fix release to ensure input formats don't die with unexpected parameters 2.1.0 - May 17, 2016 Updated base Falcon requirement to the latest: 1.0.0 Added native support for using asyncio methods (Thanks @rodcloutier!) Added improved support for application/x-www-form-urlencoded forms (thanks @cag!) Added initial support for multipart/form-data Added support for getting URL from hug function Added support for using hug.local() on methods in addition to functions Added a default mime-type for static file endpoints ( application/octet-stream ) Added initial hug.API(__name__).context dictionary as a safe place to store global per-thread state (such as database connections) Added support for manually specifying API object for all decorators (including middleware / startup) to enable easier plugin interaction Added support for selectively removing requirements per endpoint Added conditional output format based on Accept request header, as detailed in issue #277 Added support for dynamically creating named modules from API names Improved how hug.test deals with non JSON content types Fixed issues with certain non-standard content-type values causing an exception Fixed a bug producing documentation when versioning is used, and there are no routes that apply accros versions Fixed a bug in the hug_documentation directive Breaking Changes Input formats no longer get passed encoding but instead get passed charset along side all other set content type parameters 2.0.7 - Mar 25, 2016 Added convenience put_post router to enable easier usage of the common @hug.get('url/', ('PUT', 'POST\")) pattern When passing lists or tuples to the hug http testing methods, they will now correctly be handled as multiple values 2.0.5 - 2.0.6 - Mar 25, 2016 Adds built-in support for token based authentication 2.0.4 - Mar 22, 2016 Fixes documentation on PyPI website 2.0.3 - Mar 22, 2016 Fixes hug.use module on Windows 2.0.2 - Mar 18, 2016 Work-around bug that was keeping hug from working on Windows machines Introduced a delete method to the abstract hug store module 2.0.1 - Mar 18, 2016 Add in-memory data / session store for testing Default hug.use.HTTP to communicate over JSON body 2.0.0 - Mar 17, 2016 Adds the concept of chain-able routing decorators Adds built-in static file handling support via a @hug.static decorator (thanks @BrandonHoffman!) Adds a directive to enable directly accessing the user object from any API call (thanks @ianthetechie) Adds the concept of seamless micro-services via the hug.use module, enable switching between HTTP and local without code change Adds built-in support for 'X-Api-Key' header based authentication via authentication.api_key Adds support for running arbitrary python functions at runtime via a @hug.startup decorator Adds support for smarter handling of html output types Adds a UUID type Adds support for explicit API creation / referencing using hug.api(__name__) Adds a logging middleware to simplify the process of logging all requests with hug Adds a middleware_class class decorator, to enable quickly registering middleware classes Adds smart_redirection allowing API functions to return other endpoints Adds support for class based handlers Adds support for automatically handling exceptions Adds support for automatically outputting images with save method that don't take a format. Added extended support for delimited fields, enabling use of custom delimiters Added support for running different transformers based on content_type Added support for outputting a different response output type based on the response content_type Added support for running different transformations and outputting different content_types based on path suffix Added support for automatically supporting a set of suffixes at the end of a URL Added support for automatically adding headers based on route match Added support for quickly adding cache header based on route match Added support for quickly adding allow origin header based on route match Added support for quickly re-routing to defined 404 handler Added support for length based types ( length , shorter_than , and longer_than ) Added support for easily extending hugs JSON outputter with support for custom types Added support for a custom final pass validation function Added support for defining routes separate from handlers Added support for raising on validation errors - to enable overall exception handlers to catch them Added support for multiple transformers on an endpoint via transform.all Added support for applying type annotations and directives locally with @hug.local() Added support for a base_url by doing hug.API(__name__).http.base_url = '/base_url' Added support for automatically running CLI commands from hug command line runner Added requirements to documentation Updated all default output formats to gracefully handle error dictionaries Documentation generation was moved to API instances to enable easier customization Now correctly identifies and handles custom encodings Improved integration with Falcon so that primary elements (like status codes) can be imported directly from hug Added the ability to specify a transformer for validation errors per request handler, via on_invalid decorator argument Added the ability to specify an output format specific to validation errors per request handler, via output_invalid decorator argument Changed transform functions to get ran on output of validation errors by default Automatically works around a bug in uwsgi when returning byte streams Refactored how interfaces are built to be more reasuable, and more easily introspected Refactored how the built in annotation types are built to be more easily built upon Updated type.string to fail if a list is passed in Removed 'cli_behaviour' from types, instead moving the responsibility of per-type behavior to the CLI interface Fixed a bug that leaked annotation provided directives to the produced documentation Fully re-factored hug's type system for easier extensibility Breaking Changes directives are no longer automatically applied to local function calls, '@hug.local' must be used to apply them cli_behaviour has been removed as a type feature - however common sense inheritance of base types should easily replace it's usage documentation module has been removed, in favor of documentation being generated by the api object and individual interfaces API singleton now has sub-apis for each interface in use (IE hug.API( name ).http and hug.API( name ).cli) run module has been removed, with the functionality moved to hug.API( name ).http.server() and the terminal functionality being moved to hug.development_runner.hug 1.9.9 - Dec 15, 2015 Hug's json serializer will now automatically convert decimal.Decimal objects during serializationkw Added in_range , greater_than , and less_than types to allow easily limiting values entered into an API 1.9.8 - Dec 1, 2015 Hug's json serializer will now automatically convert returned (non-list) iterables into json lists 1.9.7 - Dec 1, 2015 Fixed a bug (issue #115) that caused the command line argument for not auto generating documentation -nd to fail 1.9.6 - Nov 25, 2015 Fixed a bug (issue #112) that caused non-versioned endpoints not to show up in auto-generated documentation, when versioned endpoints are present 1.9.5 - Nov 20, 2015 Improved cli output, to output nothing if None is returned 1.9.3 - Nov 18, 2015 Enabled hug.types.multiple to be exposed as nargs * Fixed a bug that caused a CLI argument when adding an argument starting with help Fixed a bug that caused CLI arguments that used hug.types.multiple to be parsed as nested lists 1.9.2 - Nov 18, 2015 Improved boolean type behavior on CLIs 1.9.1 - Nov 14, 2015 Fixes a bug that caused hug cli clients to occasionally incorrectly require additional arguments Added support for automatically converting non utf8 bytes to base64 during json output 1.9.0 - Nov 10, 2015 Added initial built-in support for video output formats (Thanks @arpesenti!) Added built-in automatic support for range-requests when streaming files (such as videos) Output formatting functions are now called, even if a stream is returned. Input formatting functions now need to be responsible for dealing with text encoding and streaming Added additional default input format for text/plain and a few other common text based formats If no input format is available, but the body parameter is requested - the body stream is now returned Added support for a generic file output formatter that automatically determines the content type for the file 1.8.2 - Nov 9, 2015 Drastically improved hug performance when dealing with a large number of requests in wsgi mode 1.8.1 - Nov 5, 2015 Added json as a built in hug type to handle urlencoded json data in a request Added multi as a built in hug type that will allow a single field to be one of multiple types 1.8.0 - Nov 4, 2015 Added a middleware module make it easier to bundle generally useful middlewares going forward Added a generic / reusable SessionMiddleware (Thanks @vortec!) 1.7.1 - Nov 4, 2015 Fix a bug that caused error messages sourced from exceptions to be double quoted 1.7.0 - Nov 3, 2015 Auto supply response and request to output transformations and formats when they are taken as arguments Improved the smart_boolean type even further, to allow 0, 1, t, f strings as input Enabled normal boolean type to easily work with cli apps, by having it interact via 'store_true' 1.6.5 - Nov 2, 2015 Fixed a small spelling error on the smart_boolean type 1.6.2 - Nov 2, 2015 Added a mapping type that allows users to quikly map string values to Python types Added a smart_boolean type that respects explicit true/false in string values 1.6.1 - Oct 30, 2015 Added support for overriding parameters via decorator to ease use of **kwargs Added built-in boolean type support Improved testing environment 1.6.0 - Oct 13, 2015 Adds support for attaching hug routes to method calls Hug is now compiled using Cython (when it is available) for an additional performance boost 1.5.1 - Oct 1, 2015 Added built-in support for serializing sets 1.5.0 - Sep 30, 2015 Added built-in support for outputting svg images Added support for rendering images from pygal graphs, or other image framworks that support render , automatically Added support for marshmallow powered output transformations Added support for marshmallow schema powered input types Added support for using individual marshmallow fields directly as input types Added support for attaching directives to specific named parameters, allowing directives to be used multiple times in a single API call Added support for attaching named directives using only the text name of the directive 1.4.0 - Sep 14, 2015 Added *args support to hug.cli Added built-in html output support Added multi-api composition example to examples folder Fixed issue #70: error when composing two API modules into a single one without directives Fixed issue #73: README file is incorrectly formatted on PYPI 1.3.1 - Sep 8, 2015 Fixed string only annotations causing exceptions when used in conjunction with hug.cli Fixed return of image file not correctly able to set stream len information / not correctly returning with PIL images Added examples of image loading with hug 1.3.0 - Sep 8, 2015 Started keeping a log of all changes between releases Added support for quickly exposing functions as cli clients with hug.cli decorator Added support for quickly serving up development APIs from withing the module using: if __name__ == '__main__': __hug__.serve() Added support for documentation only type annotations, simply by passing just a string in as the type annotation Added support for requires argument to limit execution of functions based on a given criteria Added automatic documentation of output type transformations Added initial built-in authentication support Added built-in support for outputting common image file types Added support for returning streams within hugged functions hug.types.decimal renamed to hug.types.float_number and hug.types.decimal type added that returns python Decimal hug.types.accept wrapper added, that makes it easy to customize doc strings and error handling for any preexisting type converter","title":"Changelog"},{"location":"CHANGELOG/#install-the-latest","text":"To install the latest version of hug simply run: pip3 install hug --upgrade Ideally, within a virtual environment.","title":"Install the latest"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#260-august-29-2019","text":"Improved CLI multiple behaviour with empty defaults Improved CLI type output for built-in types Improved MultiCLI base documentation","title":"2.6.0 - August 29, 2019"},{"location":"CHANGELOG/#256-june-20-2019","text":"Fixed issue #815: map_params() causes api documentation to lose param type information Improved project testing: restoring 100% coverage","title":"2.5.6 - June 20, 2019"},{"location":"CHANGELOG/#255-june-13-2019","text":"Fixed issue #808: Problems with command line invocation via hug CLI Fixed issue #647: Support for arbitrary URL complexity when using CORS middleware Fixed issue #805: Added documentation for map_params feature Added initial automated code cleaning and linting partially satisfying HOPE-8 -- Style Guideline for Hug Implemented HOPE-20 -- The Zen of Hug","title":"2.5.5 - June 13, 2019"},{"location":"CHANGELOG/#254-hotfix-may-19-2019","text":"Fix issue #798 - Development runner TypeError when executing cli","title":"2.5.4 hotfix - May 19, 2019"},{"location":"CHANGELOG/#253-hotfix-may-15-2019","text":"Fixed issue #794 - Restore support for versions of Marshmallow pre-2.17.0","title":"2.5.3 hotfix - May 15, 2019"},{"location":"CHANGELOG/#252-hotfix-may-10-2019","text":"Fixed issue #790 - Set Falcon defaults to pre 2.0.0 version to avoid breaking changes for Hug users until a Hug 3.0.0 release. The new default Falcon behaviour can be defaulted before hand by setting __hug__.future = True .","title":"2.5.2 hotfix - May 10, 2019"},{"location":"CHANGELOG/#251-hotfix-may-9-2019","text":"Fixed issue #784 - POST requests broken on 2.5.0 Optimizations and simplification of async support, taking advantadge of Python3.4 deprecation. Fix issue #785: Empty query params are not ignored on 2.5.0 Added support for modifying falcon API directly on startup Initial black formatting of code base, in preperation for CI enforced code formatting","title":"2.5.1 hotfix - May 9, 2019"},{"location":"CHANGELOG/#250-may-4-2019","text":"Updated to latest Falcon: 2.0.0 Added support for Marshmallow 3 Added support for args decorator parameter to optionally specify type transformations separate from annotations Added support for tests to provide a custom host parameter Breaking Changes: Deprecated support for Python 3.4","title":"2.5.0 - May 4, 2019"},{"location":"CHANGELOG/#249-tbd","text":"Add the ability to invoke the hug development server as a Python module e.g. python -m hug Corrected the documentation for the --without-cython install option","title":"2.4.9 - TBD"},{"location":"CHANGELOG/#248-april-7-2019","text":"Fixed issue #762 - HTTP errors crash with selectable output types Fixed MacOS testing via travis - added testing accross all the same Python versions tested on Linux","title":"2.4.8 - April 7, 2019"},{"location":"CHANGELOG/#247-march-28-2019","text":"Fixed API documentation with selectable output types","title":"2.4.7 - March 28, 2019"},{"location":"CHANGELOG/#246-march-25-2019","text":"Fixed issue #753 - 404 not found does not respect default output format. Documented the --without-cython option in CONTRIBUTING.md Extended documentation for output formats","title":"2.4.6 - March 25, 2019"},{"location":"CHANGELOG/#244-march-21-2019","text":"Added the ability to change the default output format for CLI endpoints both at the API and global level. Added the ablity to extend CLI APIs in addition to HTTP APIs issue #744. Added optional built-in API aware testing for CLI commands. Add unit test for extend_api() with CLI commands Fix running tests using python setup.py test Fix issue #749 extending API with mixed GET/POST methods Documented the multiple_files example Added the --without-cython option to setup.py","title":"2.4.4 - March 21, 2019"},{"location":"CHANGELOG/#243-hotfix-march-17-2019","text":"Fix issue #737 - latest hug release breaks meinheld worker setup","title":"2.4.3 [hotfix] - March 17, 2019"},{"location":"CHANGELOG/#242-march-16-2019","text":"Python 3.7 support improvements No longer test against Python 3.4 - aimed for full deprecation in Hug 3.0.0 Improved interoperability with the latest Falcon release Documentation improvements Fixed bug in auto reload","title":"2.4.2 - March 16, 2019"},{"location":"CHANGELOG/#241-sep-17-2018","text":"Fixed issue #631: Added support for Python 3.7 Fixed issue #665: Fixed problem with hug.types.json Fixed issue #679: Return docs for marshmallow schema instead of for dump method","title":"2.4.1 - Sep 17, 2018"},{"location":"CHANGELOG/#240-jan-31-2018","text":"Updated Falcon requirement to 1.4.1 Fixed issue #590: Textual output formats should have explicitly defined charsets by default Fixed issue #596: Host argument for development runner Fixed issue #563: Added middleware to handle CORS requests Implemented issue #612: Add support for numpy types in JSON output by default Implemented improved class based directives with cleanup support (see: https://github.com/timothycrosley/hug/pull/603) Support ujson if installed Implement issue #579: Allow silencing intro message when running hug from command line Implemented issue #531: Allow exit value to alter status code for CLI tools Updated documentation generation to use hug's JSON outputter for consistency","title":"2.4.0 - Jan 31, 2018"},{"location":"CHANGELOG/#232-sep-28-2017","text":"Implemented Issue #540: Add support for remapping parameters Updated Falcon requirement to 1.3.0 Fixed issue #552: Version ignored in class based routes Fixed issue #555: Gracefully handle digit only version strings Fixed issue #519: Exceptions are now correctly inserted into the current API using extend_api Breaking Changes: Fixed issue #539: Allow JSON output to include non-ascii (UTF8) characters by default.","title":"2.3.2 - Sep 28, 2017"},{"location":"CHANGELOG/#231-aug-26-2017","text":"Fixed issue #500 & 504: Added support for automatic reload on Windows & enabled intuitive use of pdb within autoreloader Implemented improved way to retrieve list of urls and handlers for issue #462 Implemented support for Python typing module style sub types Updated to allow -m parameter load modules on current directory Improved hug.test decode behaviour Added built in handlers for CORS support: directive hug.directives.cors Improved routing support Added allow origins middleware","title":"2.3.1 - Aug 26, 2017"},{"location":"CHANGELOG/#230-may-4-2017","text":"Falcon requirement upgraded to 1.2.0 Enables filtering documentation according to a base_url Fixed a vulnerability in the static file router that allows files in parent directory to be accessed Fixed issue #392: Enable posting self in JSON data structure Fixed issue #418: Ensure version passed is a number Fixed issue #399: Multiple ints not working correctly for CLI interface Fixed issue #461: Enable async startup methods running in parallel Fixed issue #412: None type return for file output format Fixed issue #464: Class based routing now inherit templated parameters Fixed issue #346: Enable using async routes within threaded server Implemented issue #437: Added support for anonymous APIs Added support for exporting timedeltas to JSON as seconds Added support for endpoint-specific input formatters: def my_input_formatter ( data ): return ( 'Results' , hug . input_format . json ( data )) @hug.get ( inputs = { 'application/json' : my_input_formatter }) def foo (): pass Adds support for passing in a custom scheme in hug.test Adds str() and repr() support to hug_timer directive Added support for moduleless APIs Improved argparser usage message Implemented feature #427: Allow custom argument deserialization together with standard type annotation Improvements to exception handling. Added support for request / response in a single generator based middleware function Automatic reload support for development runner Added support for passing params dictionary and query_string arguments into hug.test.http command for more direct modification of test inputs Added support for manual specifying the scheme used in hug.test calls Improved output formats, enabling nested request / response dependent formatters Breaking Changes Sub output formatters functions now need to accept response & request or **kwargs Fixed issue #432: Improved ease of sub classing simple types - causes type extensions of types that dont take to init arguments, to automatically return an instanciated type, beaking existing usage that had to instanciate after the fact Fixed issue #405: cli and http @hug.startup() differs, not executed for cli, this also means that startup handlers are given an instance of the API and not of the interface.","title":"2.3.0 - May 4, 2017"},{"location":"CHANGELOG/#220-oct-16-2016","text":"Defaults asyncio event loop to uvloop automatically if it is installed Added support for making endpoints private to enforce lack of automatic documentation creation for them. Added HTTP method named (get, post, etc) routers to the API router to be consistent with documentation Added smart handling of empty JSON content (issue #300) Added ability to have explicitly unversioned API endpoints using versions=False Added support for providing a different base URL when extending an API Added support for sinks when extending API Added support for object based CLI handlers Added support for excluding exceptions from being handled Added support for **kwarg handling within CLI interfaces Allows custom decorators to access parameters like request and response, without putting them in the original functions' parameter list Fixed not found handlers not being imported when extending an API Fixed API extending support of extra features like input_format Fixed issue with API directive not working with extension feature Fixed nested async calls so that they reuse the same loop Fixed TypeError being raised incorrectly when no content-type is specified (issue #330) Fixed issues with multi-part requests (issue #329) Fixed documentation output to exclude api_version and body Fixed an issue passing None where a text value was required (issue #341)","title":"2.2.0 - Oct 16, 2016"},{"location":"CHANGELOG/#212-may-18-2016","text":"Fixed an issue with sharing exception handlers across multiple modules (Thanks @soloman1124) Fixed how single direction (response / request) middlewares are bounded to work when code is Cython compiled","title":"2.1.2 - May 18, 2016"},{"location":"CHANGELOG/#211-may-17-2016","text":"Hot-fix release to ensure input formats don't die with unexpected parameters","title":"2.1.1 - May 17, 2016"},{"location":"CHANGELOG/#210-may-17-2016","text":"Updated base Falcon requirement to the latest: 1.0.0 Added native support for using asyncio methods (Thanks @rodcloutier!) Added improved support for application/x-www-form-urlencoded forms (thanks @cag!) Added initial support for multipart/form-data Added support for getting URL from hug function Added support for using hug.local() on methods in addition to functions Added a default mime-type for static file endpoints ( application/octet-stream ) Added initial hug.API(__name__).context dictionary as a safe place to store global per-thread state (such as database connections) Added support for manually specifying API object for all decorators (including middleware / startup) to enable easier plugin interaction Added support for selectively removing requirements per endpoint Added conditional output format based on Accept request header, as detailed in issue #277 Added support for dynamically creating named modules from API names Improved how hug.test deals with non JSON content types Fixed issues with certain non-standard content-type values causing an exception Fixed a bug producing documentation when versioning is used, and there are no routes that apply accros versions Fixed a bug in the hug_documentation directive Breaking Changes Input formats no longer get passed encoding but instead get passed charset along side all other set content type parameters","title":"2.1.0 - May 17, 2016"},{"location":"CHANGELOG/#207-mar-25-2016","text":"Added convenience put_post router to enable easier usage of the common @hug.get('url/', ('PUT', 'POST\")) pattern When passing lists or tuples to the hug http testing methods, they will now correctly be handled as multiple values","title":"2.0.7 - Mar 25, 2016"},{"location":"CHANGELOG/#205-206-mar-25-2016","text":"Adds built-in support for token based authentication","title":"2.0.5 - 2.0.6 - Mar 25, 2016"},{"location":"CHANGELOG/#204-mar-22-2016","text":"Fixes documentation on PyPI website","title":"2.0.4 - Mar 22, 2016"},{"location":"CHANGELOG/#203-mar-22-2016","text":"Fixes hug.use module on Windows","title":"2.0.3 - Mar 22, 2016"},{"location":"CHANGELOG/#202-mar-18-2016","text":"Work-around bug that was keeping hug from working on Windows machines Introduced a delete method to the abstract hug store module","title":"2.0.2 - Mar 18, 2016"},{"location":"CHANGELOG/#201-mar-18-2016","text":"Add in-memory data / session store for testing Default hug.use.HTTP to communicate over JSON body","title":"2.0.1 - Mar 18, 2016"},{"location":"CHANGELOG/#200-mar-17-2016","text":"Adds the concept of chain-able routing decorators Adds built-in static file handling support via a @hug.static decorator (thanks @BrandonHoffman!) Adds a directive to enable directly accessing the user object from any API call (thanks @ianthetechie) Adds the concept of seamless micro-services via the hug.use module, enable switching between HTTP and local without code change Adds built-in support for 'X-Api-Key' header based authentication via authentication.api_key Adds support for running arbitrary python functions at runtime via a @hug.startup decorator Adds support for smarter handling of html output types Adds a UUID type Adds support for explicit API creation / referencing using hug.api(__name__) Adds a logging middleware to simplify the process of logging all requests with hug Adds a middleware_class class decorator, to enable quickly registering middleware classes Adds smart_redirection allowing API functions to return other endpoints Adds support for class based handlers Adds support for automatically handling exceptions Adds support for automatically outputting images with save method that don't take a format. Added extended support for delimited fields, enabling use of custom delimiters Added support for running different transformers based on content_type Added support for outputting a different response output type based on the response content_type Added support for running different transformations and outputting different content_types based on path suffix Added support for automatically supporting a set of suffixes at the end of a URL Added support for automatically adding headers based on route match Added support for quickly adding cache header based on route match Added support for quickly adding allow origin header based on route match Added support for quickly re-routing to defined 404 handler Added support for length based types ( length , shorter_than , and longer_than ) Added support for easily extending hugs JSON outputter with support for custom types Added support for a custom final pass validation function Added support for defining routes separate from handlers Added support for raising on validation errors - to enable overall exception handlers to catch them Added support for multiple transformers on an endpoint via transform.all Added support for applying type annotations and directives locally with @hug.local() Added support for a base_url by doing hug.API(__name__).http.base_url = '/base_url' Added support for automatically running CLI commands from hug command line runner Added requirements to documentation Updated all default output formats to gracefully handle error dictionaries Documentation generation was moved to API instances to enable easier customization Now correctly identifies and handles custom encodings Improved integration with Falcon so that primary elements (like status codes) can be imported directly from hug Added the ability to specify a transformer for validation errors per request handler, via on_invalid decorator argument Added the ability to specify an output format specific to validation errors per request handler, via output_invalid decorator argument Changed transform functions to get ran on output of validation errors by default Automatically works around a bug in uwsgi when returning byte streams Refactored how interfaces are built to be more reasuable, and more easily introspected Refactored how the built in annotation types are built to be more easily built upon Updated type.string to fail if a list is passed in Removed 'cli_behaviour' from types, instead moving the responsibility of per-type behavior to the CLI interface Fixed a bug that leaked annotation provided directives to the produced documentation Fully re-factored hug's type system for easier extensibility Breaking Changes directives are no longer automatically applied to local function calls, '@hug.local' must be used to apply them cli_behaviour has been removed as a type feature - however common sense inheritance of base types should easily replace it's usage documentation module has been removed, in favor of documentation being generated by the api object and individual interfaces API singleton now has sub-apis for each interface in use (IE hug.API( name ).http and hug.API( name ).cli) run module has been removed, with the functionality moved to hug.API( name ).http.server() and the terminal functionality being moved to hug.development_runner.hug","title":"2.0.0 - Mar 17, 2016"},{"location":"CHANGELOG/#199-dec-15-2015","text":"Hug's json serializer will now automatically convert decimal.Decimal objects during serializationkw Added in_range , greater_than , and less_than types to allow easily limiting values entered into an API","title":"1.9.9 - Dec 15, 2015"},{"location":"CHANGELOG/#198-dec-1-2015","text":"Hug's json serializer will now automatically convert returned (non-list) iterables into json lists","title":"1.9.8 - Dec 1, 2015"},{"location":"CHANGELOG/#197-dec-1-2015","text":"Fixed a bug (issue #115) that caused the command line argument for not auto generating documentation -nd to fail","title":"1.9.7 - Dec 1, 2015"},{"location":"CHANGELOG/#196-nov-25-2015","text":"Fixed a bug (issue #112) that caused non-versioned endpoints not to show up in auto-generated documentation, when versioned endpoints are present","title":"1.9.6 - Nov 25, 2015"},{"location":"CHANGELOG/#195-nov-20-2015","text":"Improved cli output, to output nothing if None is returned","title":"1.9.5 - Nov 20, 2015"},{"location":"CHANGELOG/#193-nov-18-2015","text":"Enabled hug.types.multiple to be exposed as nargs * Fixed a bug that caused a CLI argument when adding an argument starting with help Fixed a bug that caused CLI arguments that used hug.types.multiple to be parsed as nested lists","title":"1.9.3 - Nov 18, 2015"},{"location":"CHANGELOG/#192-nov-18-2015","text":"Improved boolean type behavior on CLIs","title":"1.9.2 - Nov 18, 2015"},{"location":"CHANGELOG/#191-nov-14-2015","text":"Fixes a bug that caused hug cli clients to occasionally incorrectly require additional arguments Added support for automatically converting non utf8 bytes to base64 during json output","title":"1.9.1 - Nov 14, 2015"},{"location":"CHANGELOG/#190-nov-10-2015","text":"Added initial built-in support for video output formats (Thanks @arpesenti!) Added built-in automatic support for range-requests when streaming files (such as videos) Output formatting functions are now called, even if a stream is returned. Input formatting functions now need to be responsible for dealing with text encoding and streaming Added additional default input format for text/plain and a few other common text based formats If no input format is available, but the body parameter is requested - the body stream is now returned Added support for a generic file output formatter that automatically determines the content type for the file","title":"1.9.0 - Nov 10, 2015"},{"location":"CHANGELOG/#182-nov-9-2015","text":"Drastically improved hug performance when dealing with a large number of requests in wsgi mode","title":"1.8.2 - Nov 9, 2015"},{"location":"CHANGELOG/#181-nov-5-2015","text":"Added json as a built in hug type to handle urlencoded json data in a request Added multi as a built in hug type that will allow a single field to be one of multiple types","title":"1.8.1 - Nov 5, 2015"},{"location":"CHANGELOG/#180-nov-4-2015","text":"Added a middleware module make it easier to bundle generally useful middlewares going forward Added a generic / reusable SessionMiddleware (Thanks @vortec!)","title":"1.8.0 - Nov 4, 2015"},{"location":"CHANGELOG/#171-nov-4-2015","text":"Fix a bug that caused error messages sourced from exceptions to be double quoted","title":"1.7.1 - Nov 4, 2015"},{"location":"CHANGELOG/#170-nov-3-2015","text":"Auto supply response and request to output transformations and formats when they are taken as arguments Improved the smart_boolean type even further, to allow 0, 1, t, f strings as input Enabled normal boolean type to easily work with cli apps, by having it interact via 'store_true'","title":"1.7.0 - Nov 3, 2015"},{"location":"CHANGELOG/#165-nov-2-2015","text":"Fixed a small spelling error on the smart_boolean type","title":"1.6.5 - Nov 2, 2015"},{"location":"CHANGELOG/#162-nov-2-2015","text":"Added a mapping type that allows users to quikly map string values to Python types Added a smart_boolean type that respects explicit true/false in string values","title":"1.6.2 - Nov 2, 2015"},{"location":"CHANGELOG/#161-oct-30-2015","text":"Added support for overriding parameters via decorator to ease use of **kwargs Added built-in boolean type support Improved testing environment","title":"1.6.1 - Oct 30, 2015"},{"location":"CHANGELOG/#160-oct-13-2015","text":"Adds support for attaching hug routes to method calls Hug is now compiled using Cython (when it is available) for an additional performance boost","title":"1.6.0 - Oct 13, 2015"},{"location":"CHANGELOG/#151-oct-1-2015","text":"Added built-in support for serializing sets","title":"1.5.1 - Oct 1, 2015"},{"location":"CHANGELOG/#150-sep-30-2015","text":"Added built-in support for outputting svg images Added support for rendering images from pygal graphs, or other image framworks that support render , automatically Added support for marshmallow powered output transformations Added support for marshmallow schema powered input types Added support for using individual marshmallow fields directly as input types Added support for attaching directives to specific named parameters, allowing directives to be used multiple times in a single API call Added support for attaching named directives using only the text name of the directive","title":"1.5.0 - Sep 30, 2015"},{"location":"CHANGELOG/#140-sep-14-2015","text":"Added *args support to hug.cli Added built-in html output support Added multi-api composition example to examples folder Fixed issue #70: error when composing two API modules into a single one without directives Fixed issue #73: README file is incorrectly formatted on PYPI","title":"1.4.0 - Sep 14, 2015"},{"location":"CHANGELOG/#131-sep-8-2015","text":"Fixed string only annotations causing exceptions when used in conjunction with hug.cli Fixed return of image file not correctly able to set stream len information / not correctly returning with PIL images Added examples of image loading with hug","title":"1.3.1 - Sep 8, 2015"},{"location":"CHANGELOG/#130-sep-8-2015","text":"Started keeping a log of all changes between releases Added support for quickly exposing functions as cli clients with hug.cli decorator Added support for quickly serving up development APIs from withing the module using: if __name__ == '__main__': __hug__.serve() Added support for documentation only type annotations, simply by passing just a string in as the type annotation Added support for requires argument to limit execution of functions based on a given criteria Added automatic documentation of output type transformations Added initial built-in authentication support Added built-in support for outputting common image file types Added support for returning streams within hugged functions hug.types.decimal renamed to hug.types.float_number and hug.types.decimal type added that returns python Decimal hug.types.accept wrapper added, that makes it easy to customize doc strings and error handling for any preexisting type converter","title":"1.3.0 - Sep 8, 2015"},{"location":"CODING_STANDARD/","text":"Coding Standard Any submission to this project should closely follow the PEP 8 coding guidelines with the exceptions: Lines can be up to 100 characters long. Single letter or otherwise nondescript variable names are prohibited. Standards for new hug modules New modules added to the hug project should all live directly within the hug/ directory without nesting. If the modules are meant only for internal use within hug they should be prefixed with a leading underscore. For example, def _internal_function . Modules should contain a doc string at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a tests/test_$MODULE_NAME.py file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible.","title":"Coding Standard"},{"location":"CODING_STANDARD/#coding-standard","text":"Any submission to this project should closely follow the PEP 8 coding guidelines with the exceptions: Lines can be up to 100 characters long. Single letter or otherwise nondescript variable names are prohibited.","title":"Coding Standard"},{"location":"CODING_STANDARD/#standards-for-new-hug-modules","text":"New modules added to the hug project should all live directly within the hug/ directory without nesting. If the modules are meant only for internal use within hug they should be prefixed with a leading underscore. For example, def _internal_function . Modules should contain a doc string at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a tests/test_$MODULE_NAME.py file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible.","title":"Standards for new hug modules"},{"location":"CONTRIBUTING/","text":"Contributing to hug Looking for a growing and useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Want a free project t-shirt to show you're a contributor? Welcome! You have found the right place. hug is growing quickly and needs awesome contributors like you to help the project reach its full potential. From reporting issues, writing documentation, implementing new features, fixing bugs and creating logos to providing additional usage examples - any contribution you can provide will be greatly appreciated and acknowledged. Getting hug set up for local development The first step when contributing to any project is getting it set up on your local machine. hug aims to make this as simple as possible. Account Requirements: A valid GitHub account Base System Requirements: Python3.5+ Python3-venv (included with most Python3 installations but some Ubuntu systems require that it be installed separately) bash or a bash compatible shell (should be auto-installed on Linux / Mac) autoenv (optional) Once you have verified that you system matches the base requirements you can start to get the project working by following these steps: Fork the project on GitHub . Clone your fork to your local file system: git clone https://github.com/$GITHUB_ACCOUNT/hug.git cd hug If you have autoenv set-up correctly, simply press Y and then wait for the environment to be set up for you. If you don't have autoenv set-up, run source .env to set up the local environment. You will need to run this script every time you want to work on the project - though it will not cause the entire set up process to re-occur. Run test to verify your everything is set up correctly. If the tests all pass, you have successfully set up hug for local development! If not, you can ask for help diagnosing the error here . At step 3, you can skip using autoenv and the .env script, and create your development virtul environment manually instead using e.g. python3 -m venv or mkvirtualenv (from virtualenvwrapper ). Install dependencies by running pip install -r requirements/release.txt , and optional build or development dependencies by running pip install -r requirements/build.txt or pip install -r requirements/build.txt . Install Hug itself with pip install . or pip install -e . (for editable mode). This will compile all modules with Cython if it's installed in the environment. You can skip Cython compilation using pip install --install-option=--without-cython . (this works with -e as well). Making a contribution Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request: Check the issues page on GitHub to see if the task you want to complete is listed there. If it's listed there, write a comment letting others know you are working on it. If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control. If you're not sure if it's something that is good for the main hug project and want immediate feedback, you can discuss it here . Create an issue branch for your local work git checkout -b issue/$ISSUE-NUMBER . Do your magic here. Run clean to automatically sort your imports according to pep-8 guidelines. Ensure your code matches hug's latest coding standards defined here . It's important to focus to focus on making your code efficient as hug is used as a base framework for several performance critical APIs. Submit a pull request to the main project repository via GitHub. Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the ACKNOWLEDGEMENTS.md list :). Getting a free t-shirt Once you have finished contributing to the project, send your mailing address and shirt size to timothy.crosley@gmail.com, with the title hug Shirt for @$GITHUB_USER_NAME. When the project has reached 100 contributors, I will be sending every one of the original hundred contributors a t-shirt to commemorate their awesome work. Thank you! I can not tell you how thankful I am for the hard work done by hug contributors like you. hug could not be the exciting and useful framework it is today without your help. Thank you! ~Timothy Crosley","title":"Contributing"},{"location":"CONTRIBUTING/#contributing-to-hug","text":"Looking for a growing and useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Want a free project t-shirt to show you're a contributor? Welcome! You have found the right place. hug is growing quickly and needs awesome contributors like you to help the project reach its full potential. From reporting issues, writing documentation, implementing new features, fixing bugs and creating logos to providing additional usage examples - any contribution you can provide will be greatly appreciated and acknowledged.","title":"Contributing to hug"},{"location":"CONTRIBUTING/#getting-hug-set-up-for-local-development","text":"The first step when contributing to any project is getting it set up on your local machine. hug aims to make this as simple as possible. Account Requirements: A valid GitHub account Base System Requirements: Python3.5+ Python3-venv (included with most Python3 installations but some Ubuntu systems require that it be installed separately) bash or a bash compatible shell (should be auto-installed on Linux / Mac) autoenv (optional) Once you have verified that you system matches the base requirements you can start to get the project working by following these steps: Fork the project on GitHub . Clone your fork to your local file system: git clone https://github.com/$GITHUB_ACCOUNT/hug.git cd hug If you have autoenv set-up correctly, simply press Y and then wait for the environment to be set up for you. If you don't have autoenv set-up, run source .env to set up the local environment. You will need to run this script every time you want to work on the project - though it will not cause the entire set up process to re-occur. Run test to verify your everything is set up correctly. If the tests all pass, you have successfully set up hug for local development! If not, you can ask for help diagnosing the error here . At step 3, you can skip using autoenv and the .env script, and create your development virtul environment manually instead using e.g. python3 -m venv or mkvirtualenv (from virtualenvwrapper ). Install dependencies by running pip install -r requirements/release.txt , and optional build or development dependencies by running pip install -r requirements/build.txt or pip install -r requirements/build.txt . Install Hug itself with pip install . or pip install -e . (for editable mode). This will compile all modules with Cython if it's installed in the environment. You can skip Cython compilation using pip install --install-option=--without-cython . (this works with -e as well).","title":"Getting hug set up for local development"},{"location":"CONTRIBUTING/#making-a-contribution","text":"Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request: Check the issues page on GitHub to see if the task you want to complete is listed there. If it's listed there, write a comment letting others know you are working on it. If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control. If you're not sure if it's something that is good for the main hug project and want immediate feedback, you can discuss it here . Create an issue branch for your local work git checkout -b issue/$ISSUE-NUMBER . Do your magic here. Run clean to automatically sort your imports according to pep-8 guidelines. Ensure your code matches hug's latest coding standards defined here . It's important to focus to focus on making your code efficient as hug is used as a base framework for several performance critical APIs. Submit a pull request to the main project repository via GitHub. Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the ACKNOWLEDGEMENTS.md list :).","title":"Making a contribution"},{"location":"CONTRIBUTING/#getting-a-free-t-shirt","text":"Once you have finished contributing to the project, send your mailing address and shirt size to timothy.crosley@gmail.com, with the title hug Shirt for @$GITHUB_USER_NAME. When the project has reached 100 contributors, I will be sending every one of the original hundred contributors a t-shirt to commemorate their awesome work.","title":"Getting a free t-shirt"},{"location":"CONTRIBUTING/#thank-you","text":"I can not tell you how thankful I am for the hard work done by hug contributors like you. hug could not be the exciting and useful framework it is today without your help. Thank you! ~Timothy Crosley","title":"Thank you!"},{"location":"EXTENDING/","text":"Building hug extensions Want to extend hug to tackle new problems? Integrate a new form of authentication? Add new useful types? Awesome! Here are some guidlines to help you get going and make a world class hug extension that you will be proud to have showcased to all hug users. How are extensions built? hug extensions should be built like any other python project and uploaded to PYPI. What makes a hug extension a hug extension is simply it's name and the fact it contains within its Python code utilities and classes that extend hugs capabilties. Naming your extension All hug extensions should be prefixed with hug_ for easy disscovery on PYPI. Additionally, there are a few more exact prefixes that can be optionally be added to help steer users to what your extensions accomplishes: hug_types_ should be used if your extensions is used primarily to add new types to hug (for example: hug_types_numpy). hug_authentication_ if your extension is used primarily to add a new authentication type to hug (for example: hug_authentication_oath2) hug_output_format_ if your extension is used primarily to add a new output format to hug (for example: hug_output_format_svg) hug_input_format_ if your extension is used primarily to add a new input format to hug (for example: hug_input_format_html) hug_validate_ if your extension is used primarily to add a new overall validator to hug (for example: hug_validate_no_null). hug_transform_ if your extension is used primarily to add a new hug transformer (for example: hug_transform_add_time) hug_middleware_ if your extension is used primarily to add a middleware to hug (for example: hug_middleware_redis_session) For any more complex or general use case that doesn't fit into these predefined categories or combines many of them, it is perfectly suitable to simply prefix your extension with hug_ . For example: hug_geo could combine hug types, hug input formats, and hug output formats making it a good use case for a simply prefixed extension. Building Recommendations Ideally, hug extensions should be built in the same manner as hug itself. This means 100% test coverage using pytest, decent performance, pep8 compliance, and built in optional compiling with Cython. None of this is strictly required, but will help give users of your extension faith that it wont slow things down or break their setup unexpectedly. Registering your extension Once you have finished developing and testing your extension, you can help increase others ability to discover it by registering it. The first place an extension should be registered is on PYPI, just like any other Python Package. In addition to that you can add your extension to the list of extensions on hug's github wiki . Thank you A sincere thanks to anyone that takes the time to develop and register an extension for hug. You are helping to make hug a more complete eco-system for everyuser out there, and paving the way for a solid foundation into the future. Thanks! ~Timothy Crosley","title":"Extending"},{"location":"EXTENDING/#building-hug-extensions","text":"Want to extend hug to tackle new problems? Integrate a new form of authentication? Add new useful types? Awesome! Here are some guidlines to help you get going and make a world class hug extension that you will be proud to have showcased to all hug users.","title":"Building hug extensions"},{"location":"EXTENDING/#how-are-extensions-built","text":"hug extensions should be built like any other python project and uploaded to PYPI. What makes a hug extension a hug extension is simply it's name and the fact it contains within its Python code utilities and classes that extend hugs capabilties.","title":"How are extensions built?"},{"location":"EXTENDING/#naming-your-extension","text":"All hug extensions should be prefixed with hug_ for easy disscovery on PYPI. Additionally, there are a few more exact prefixes that can be optionally be added to help steer users to what your extensions accomplishes: hug_types_ should be used if your extensions is used primarily to add new types to hug (for example: hug_types_numpy). hug_authentication_ if your extension is used primarily to add a new authentication type to hug (for example: hug_authentication_oath2) hug_output_format_ if your extension is used primarily to add a new output format to hug (for example: hug_output_format_svg) hug_input_format_ if your extension is used primarily to add a new input format to hug (for example: hug_input_format_html) hug_validate_ if your extension is used primarily to add a new overall validator to hug (for example: hug_validate_no_null). hug_transform_ if your extension is used primarily to add a new hug transformer (for example: hug_transform_add_time) hug_middleware_ if your extension is used primarily to add a middleware to hug (for example: hug_middleware_redis_session) For any more complex or general use case that doesn't fit into these predefined categories or combines many of them, it is perfectly suitable to simply prefix your extension with hug_ . For example: hug_geo could combine hug types, hug input formats, and hug output formats making it a good use case for a simply prefixed extension.","title":"Naming your extension"},{"location":"EXTENDING/#building-recommendations","text":"Ideally, hug extensions should be built in the same manner as hug itself. This means 100% test coverage using pytest, decent performance, pep8 compliance, and built in optional compiling with Cython. None of this is strictly required, but will help give users of your extension faith that it wont slow things down or break their setup unexpectedly.","title":"Building Recommendations"},{"location":"EXTENDING/#registering-your-extension","text":"Once you have finished developing and testing your extension, you can help increase others ability to discover it by registering it. The first place an extension should be registered is on PYPI, just like any other Python Package. In addition to that you can add your extension to the list of extensions on hug's github wiki .","title":"Registering your extension"},{"location":"EXTENDING/#thank-you","text":"A sincere thanks to anyone that takes the time to develop and register an extension for hug. You are helping to make hug a more complete eco-system for everyuser out there, and paving the way for a solid foundation into the future. Thanks! ~Timothy Crosley","title":"Thank you"},{"location":"FAQ/","text":"Frequently Asked Questions about Hug For more examples, check out Hug's documentation and examples Github directories, and its website . General Questions Q: Can I use Hug with a web framework -- Django for example? A: You can use Hug alongside Django or the web framework of your choice, but it does have drawbacks. You would need to run hug on a separate, hug-exclusive server. You can also mount Hug as a WSGI app , embedded within your normal Django app. Q: Is Hug compatabile with Python 2? A: Python 2 is not supported by Hug. However, if you need to account for backwards compatability, there are workarounds. For example, you can wrap the decorators: def my_get_fn ( func , * args , ** kwargs ): if 'hug' in globals (): return hug . get ( func , * args , ** kwargs ) return func Technical Questions Q: I need to ensure the security of my data. Can Hug be used over HTTPS? A: Not directly, but you can utilize uWSGI with nginx to transmit sensitive data. HTTPS is not part of the standard WSGI application layer, so you must use a WSGI HTTP server (such as uWSGI) to run in production. With this setup, Nginx handles SSL connections, and transfers requests to uWSGI. Q: How can I serve static files from a directory using Hug? A: For a static HTML page, you can just set the proper output format as: output=hug.output_format.html . To see other examples, check out the html_serve example, the image_serve example, and the more general static_serve example within hug/examples . Most basic examples will use a format that looks something like this: @hug.static ( '/static' ) \ufffc def my_static_dirs (): \ufffc return ( '/home/www/path-to-static-dir' ) Q: Does Hug support autoreloading? A: Hug supports any WSGI server that uses autoreloading, for example Gunicorn and uWSGI. The scripts for initializing autoreload for them are, respectively: Gunicorn: gunicorn --reload app:__hug_wsgi__ uWSGI: --py-autoreload 1 --http :8000 -w app:__hug_wsgi__ Q: How can I access a list of my routes? A: You can access a list of your routes by using the routes object on the HTTP API: __hug_wsgi__.http.routes It will return to you a structure of \"base_url -> url -> HTTP method -> Version -> Python Handler\". Therefore, for example, if you have no base_url set and you want to see the list of all URLS, you could run: __hug_wsgi__.http.routes[''].keys() Q: How can I configure a unique 404 route? A: By default, Hug will call documentation_404() if no HTTP route is found. However, if you want to configure other options (such as routing to a directiory, or routing everything else to a landing page) you can use the @hug.sink('/') decorator to create a \"catch-all\" route: import hug @hug.sink ( '/all' ) def my_sink ( request ): return request . path . replace ( '/all' , '' ) For more information, check out the ROUTING.md file within the hug/documentation directory.","title":"Faq"},{"location":"FAQ/#frequently-asked-questions-about-hug","text":"For more examples, check out Hug's documentation and examples Github directories, and its website .","title":"Frequently Asked Questions about Hug"},{"location":"FAQ/#general-questions","text":"Q: Can I use Hug with a web framework -- Django for example? A: You can use Hug alongside Django or the web framework of your choice, but it does have drawbacks. You would need to run hug on a separate, hug-exclusive server. You can also mount Hug as a WSGI app , embedded within your normal Django app. Q: Is Hug compatabile with Python 2? A: Python 2 is not supported by Hug. However, if you need to account for backwards compatability, there are workarounds. For example, you can wrap the decorators: def my_get_fn ( func , * args , ** kwargs ): if 'hug' in globals (): return hug . get ( func , * args , ** kwargs ) return func","title":"General Questions"},{"location":"FAQ/#technical-questions","text":"Q: I need to ensure the security of my data. Can Hug be used over HTTPS? A: Not directly, but you can utilize uWSGI with nginx to transmit sensitive data. HTTPS is not part of the standard WSGI application layer, so you must use a WSGI HTTP server (such as uWSGI) to run in production. With this setup, Nginx handles SSL connections, and transfers requests to uWSGI. Q: How can I serve static files from a directory using Hug? A: For a static HTML page, you can just set the proper output format as: output=hug.output_format.html . To see other examples, check out the html_serve example, the image_serve example, and the more general static_serve example within hug/examples . Most basic examples will use a format that looks something like this: @hug.static ( '/static' ) \ufffc def my_static_dirs (): \ufffc return ( '/home/www/path-to-static-dir' ) Q: Does Hug support autoreloading? A: Hug supports any WSGI server that uses autoreloading, for example Gunicorn and uWSGI. The scripts for initializing autoreload for them are, respectively: Gunicorn: gunicorn --reload app:__hug_wsgi__ uWSGI: --py-autoreload 1 --http :8000 -w app:__hug_wsgi__ Q: How can I access a list of my routes? A: You can access a list of your routes by using the routes object on the HTTP API: __hug_wsgi__.http.routes It will return to you a structure of \"base_url -> url -> HTTP method -> Version -> Python Handler\". Therefore, for example, if you have no base_url set and you want to see the list of all URLS, you could run: __hug_wsgi__.http.routes[''].keys() Q: How can I configure a unique 404 route? A: By default, Hug will call documentation_404() if no HTTP route is found. However, if you want to configure other options (such as routing to a directiory, or routing everything else to a landing page) you can use the @hug.sink('/') decorator to create a \"catch-all\" route: import hug @hug.sink ( '/all' ) def my_sink ( request ): return request . path . replace ( '/all' , '' ) For more information, check out the ROUTING.md file within the hug/documentation directory.","title":"Technical Questions"},{"location":"SECURITY/","text":"Security Policy hug takes security and quality seriously. This focus is why we depend only on thoroughly tested components and utilize static analysis tools (such as bandit and safety) to verify the security of our code base. If you find or encounter any potential security issues, please let us know right away so we can resolve them. Supported Versions Version Supported 2.5.6 :white_check_mark: Currently, only the latest version of hug will receive security fixes. Reporting a Vulnerability To report a security vulnerability, please use the Tidelift security contact . Tidelift will coordinate the fix and disclosure.","title":"Security"},{"location":"SECURITY/#security-policy","text":"hug takes security and quality seriously. This focus is why we depend only on thoroughly tested components and utilize static analysis tools (such as bandit and safety) to verify the security of our code base. If you find or encounter any potential security issues, please let us know right away so we can resolve them.","title":"Security Policy"},{"location":"SECURITY/#supported-versions","text":"Version Supported 2.5.6 :white_check_mark: Currently, only the latest version of hug will receive security fixes.","title":"Supported Versions"},{"location":"SECURITY/#reporting-a-vulnerability","text":"To report a security vulnerability, please use the Tidelift security contact . Tidelift will coordinate the fix and disclosure.","title":"Reporting a Vulnerability"},{"location":"benchmarks/http/RESULTS/","text":"Latest benchmark results: hug_test: Requests per second: 7518.20 [#/sec] (mean) Complete requests: 20000 falcon_test: Requests per second: 8186.67 [#/sec] (mean) Complete requests: 20000 flask_test: Requests per second: 5536.62 [#/sec] (mean) Complete requests: 20000 bobo_test: Requests per second: 6572.28 [#/sec] (mean) Complete requests: 20000 cherrypy_test: Requests per second: 3404.87 [#/sec] (mean) Complete requests: 20000 pyramid_test: Requests per second: 5961.53 [#/sec] (mean) Complete requests: 20000","title":"RESULTS"},{"location":"documentation/AUTHENTICATION/","text":"Authentication in hug Hug supports a number of authentication methods which handle the http headers for you and lets you very simply link them with your own authentication logic. To use hug's authentication, when defining an interface, you add a requires keyword argument to your @get (or other http verb) decorator. The argument to requires is a function , which returns either False , if the authentication fails, or a python object which represents the user. The function is wrapped by a wrapper from the hug.authentication.* module which handles the http header fields. That python object can be anything. In very simple cases it could be a string containing the user's username. If your application is using a database with an ORM such as peewee , then this object can be more complex and map to a row in a database table. To access the user object, you need to use the hug.directives.user directive in your declaration. @hug . get ( requires = ) def handler ( user : hug . directives . user ) This directive supplies the user object. Hug will have already handled the authentication, and rejected any requests with bad credentials with a 401 code, so you can just assume that the user is valid in your logic. Type of Authentication Hug Authenticator Wrapper Header Name Header Content Arguments to wrapped verification function Basic Authentication hug.authenticaton.basic Authorization \"Basic XXXX\" where XXXX is username:password encoded in Base64 username, password Token Authentication hug.authentication.token Authorization the token as a string token API Key Authentication hug.authentication.api_key X-Api-Key the API key as a string api-key","title":"Authentication"},{"location":"documentation/AUTHENTICATION/#authentication-in-hug","text":"Hug supports a number of authentication methods which handle the http headers for you and lets you very simply link them with your own authentication logic. To use hug's authentication, when defining an interface, you add a requires keyword argument to your @get (or other http verb) decorator. The argument to requires is a function , which returns either False , if the authentication fails, or a python object which represents the user. The function is wrapped by a wrapper from the hug.authentication.* module which handles the http header fields. That python object can be anything. In very simple cases it could be a string containing the user's username. If your application is using a database with an ORM such as peewee , then this object can be more complex and map to a row in a database table. To access the user object, you need to use the hug.directives.user directive in your declaration. @hug . get ( requires = ) def handler ( user : hug . directives . user ) This directive supplies the user object. Hug will have already handled the authentication, and rejected any requests with bad credentials with a 401 code, so you can just assume that the user is valid in your logic. Type of Authentication Hug Authenticator Wrapper Header Name Header Content Arguments to wrapped verification function Basic Authentication hug.authenticaton.basic Authorization \"Basic XXXX\" where XXXX is username:password encoded in Base64 username, password Token Authentication hug.authentication.token Authorization the token as a string token API Key Authentication hug.authentication.api_key X-Api-Key the API key as a string api-key","title":"Authentication in hug"},{"location":"documentation/CUSTOM_CONTEXT/","text":"Context factory in hug There is a concept of a 'context' in falcon, which is a dict that lives through the whole request. It is used to integrate for example SQLAlchemy library. However, in hug's case you would expect the context to work in each interface, not only the http one based on falcon. That is why hug provides its own context, that can be used in all interfaces. If you want to see the context in action, see the examples. Create context By default, the hug creates also a simple dict object as the context. However, you are able to define your own context by using the context_factory decorator. @hug.create_context () def context_factory ( * args , ** kwargs ): return dict () Arguments that are provided to the factory are almost the same as the ones provided to the directive (api, api_version, interface and interface specific arguments). For exact arguments, go to the interface definition. Delete context After the call is finished, the context is deleted. If you want to do something else with the context at the end, you can override the default behaviour by the delete_context decorator. @hug.delete_context () def delete_context ( context , exception = None , errors = None , lacks_requirement = None ): pass This function takes the context and some arguments that informs us about the result of the call's execution. If the call missed the requirements, the reason will be in lacks_requirements, errors will contain the result of the validation (None if call has passed the validation) and exception if there was any exception in the call. Note that if you use cli interface, the errors will contain a string with the first not passed validation. Otherwise, you will get a dict with errors. Where can I use the context? The context can be used in the authentication, directives and validation. The function used as an api endpoint should not get to the context directly, only using the directives. Authentication To use the context in the authentication function, you need to add an additional argument as the context. Using the context, you can for example check if the credentials meet the criteria basing on the connection with the database. Here are the examples: @hug.authentication.basic def context_basic_authentication ( username , password , context ): if username == context [ 'username' ] and password == context [ 'password' ]: return True @hug.authentication.api_key def context_api_key_authentication ( api_key , context ): if api_key == 'Bacon' : return 'Timothy' @hug.authentication.token def context_token_authentication ( token , context ): if token == precomptoken : return 'Timothy' Directives Here is an example of a directive that has access to the context: @hug.directive () def custom_directive ( context = None , ** kwargs ): return 'custom' Validation Hug types You can get the context by creating your own custom hug type. You can extend a regular hug type, as in example below: @hug.type ( chain = True , extend = hug . types . number , accept_context = True ) def check_if_near_the_right_number ( value , context ): the_only_right_number = context [ 'the_only_right_number' ] if value not in [ the_only_right_number - 1 , the_only_right_number , the_only_right_number + 1 , ]: raise ValueError ( 'Not near the right number' ) return value You can also chain extend a custom hug type that you created before. Keep in mind that if you marked that the type that you are extending is using the context, all the types that are extending it should also use the context. @hug.type ( chain = True , extend = check_if_near_the_right_number , accept_context = True ) def check_if_the_only_right_number ( value , context ): if value != context [ 'the_only_right_number' ]: raise ValueError ( 'Not the right number' ) return value It is possible to extend a hug type without the chain option, but still using the context: @hug.type ( chain = False , extend = hug . types . number , accept_context = True ) def check_if_string_has_right_value ( value , context ): if str ( context [ 'the_only_right_number' ]) not in value : raise ValueError ( 'The value does not contain the only right number' ) return value Marshmallow schema Marshmallow library also have a concept of the context, so hug also populates the context here. class MarshmallowContextSchema ( Schema ): name = fields . String () @validates_schema def check_context ( self , data ): self . context [ 'marshmallow' ] += 1 @hug.get () def made_up_hello ( test : MarshmallowContextSchema ()): return 'hi' What can be a context? Basically, the answer is everything. For example you can keep all the necessary database sessions in the context and also you can keep there all the resources that need to be dealt with after the execution of the endpoint. In delete_context function you can resolve all the dependencies between the databases' management. See the examples to see what can be achieved. Do not forget to add your own example if you find an another usage!","title":"Custom Context"},{"location":"documentation/CUSTOM_CONTEXT/#context-factory-in-hug","text":"There is a concept of a 'context' in falcon, which is a dict that lives through the whole request. It is used to integrate for example SQLAlchemy library. However, in hug's case you would expect the context to work in each interface, not only the http one based on falcon. That is why hug provides its own context, that can be used in all interfaces. If you want to see the context in action, see the examples.","title":"Context factory in hug"},{"location":"documentation/CUSTOM_CONTEXT/#create-context","text":"By default, the hug creates also a simple dict object as the context. However, you are able to define your own context by using the context_factory decorator. @hug.create_context () def context_factory ( * args , ** kwargs ): return dict () Arguments that are provided to the factory are almost the same as the ones provided to the directive (api, api_version, interface and interface specific arguments). For exact arguments, go to the interface definition.","title":"Create context"},{"location":"documentation/CUSTOM_CONTEXT/#delete-context","text":"After the call is finished, the context is deleted. If you want to do something else with the context at the end, you can override the default behaviour by the delete_context decorator. @hug.delete_context () def delete_context ( context , exception = None , errors = None , lacks_requirement = None ): pass This function takes the context and some arguments that informs us about the result of the call's execution. If the call missed the requirements, the reason will be in lacks_requirements, errors will contain the result of the validation (None if call has passed the validation) and exception if there was any exception in the call. Note that if you use cli interface, the errors will contain a string with the first not passed validation. Otherwise, you will get a dict with errors.","title":"Delete context"},{"location":"documentation/CUSTOM_CONTEXT/#where-can-i-use-the-context","text":"The context can be used in the authentication, directives and validation. The function used as an api endpoint should not get to the context directly, only using the directives.","title":"Where can I use the context?"},{"location":"documentation/CUSTOM_CONTEXT/#authentication","text":"To use the context in the authentication function, you need to add an additional argument as the context. Using the context, you can for example check if the credentials meet the criteria basing on the connection with the database. Here are the examples: @hug.authentication.basic def context_basic_authentication ( username , password , context ): if username == context [ 'username' ] and password == context [ 'password' ]: return True @hug.authentication.api_key def context_api_key_authentication ( api_key , context ): if api_key == 'Bacon' : return 'Timothy' @hug.authentication.token def context_token_authentication ( token , context ): if token == precomptoken : return 'Timothy'","title":"Authentication"},{"location":"documentation/CUSTOM_CONTEXT/#directives","text":"Here is an example of a directive that has access to the context: @hug.directive () def custom_directive ( context = None , ** kwargs ): return 'custom'","title":"Directives"},{"location":"documentation/CUSTOM_CONTEXT/#validation","text":"","title":"Validation"},{"location":"documentation/CUSTOM_CONTEXT/#hug-types","text":"You can get the context by creating your own custom hug type. You can extend a regular hug type, as in example below: @hug.type ( chain = True , extend = hug . types . number , accept_context = True ) def check_if_near_the_right_number ( value , context ): the_only_right_number = context [ 'the_only_right_number' ] if value not in [ the_only_right_number - 1 , the_only_right_number , the_only_right_number + 1 , ]: raise ValueError ( 'Not near the right number' ) return value You can also chain extend a custom hug type that you created before. Keep in mind that if you marked that the type that you are extending is using the context, all the types that are extending it should also use the context. @hug.type ( chain = True , extend = check_if_near_the_right_number , accept_context = True ) def check_if_the_only_right_number ( value , context ): if value != context [ 'the_only_right_number' ]: raise ValueError ( 'Not the right number' ) return value It is possible to extend a hug type without the chain option, but still using the context: @hug.type ( chain = False , extend = hug . types . number , accept_context = True ) def check_if_string_has_right_value ( value , context ): if str ( context [ 'the_only_right_number' ]) not in value : raise ValueError ( 'The value does not contain the only right number' ) return value","title":"Hug types"},{"location":"documentation/CUSTOM_CONTEXT/#marshmallow-schema","text":"Marshmallow library also have a concept of the context, so hug also populates the context here. class MarshmallowContextSchema ( Schema ): name = fields . String () @validates_schema def check_context ( self , data ): self . context [ 'marshmallow' ] += 1 @hug.get () def made_up_hello ( test : MarshmallowContextSchema ()): return 'hi'","title":"Marshmallow schema"},{"location":"documentation/CUSTOM_CONTEXT/#what-can-be-a-context","text":"Basically, the answer is everything. For example you can keep all the necessary database sessions in the context and also you can keep there all the resources that need to be dealt with after the execution of the endpoint. In delete_context function you can resolve all the dependencies between the databases' management. See the examples to see what can be achieved. Do not forget to add your own example if you find an another usage!","title":"What can be a context?"},{"location":"documentation/DIRECTIVES/","text":"hug directives (automatic argument injection) Oftentimes you'll find yourself needing something particular to an interface (say a header, a session, or content_type), but don't want to tie your function to a single interface. To support this, hug introduces the concept of directives . In hug, directives are simply arguments that have been registered to automatically provide a parameter value based on knowledge known to the interface. For example, this is the built-in session directive: @ hug . directive () def session ( context_name = ' session ' , request = None , ** kwargs ) : \"\"\" Returns the session associated with the current request \"\"\" return request and request . context . get ( context_name , None ) or None Then, when using this directive in your code, you can either specify the directive via type annotation: @hug . get () def my_endpoint ( session : hug . directives . session ) : session # is here automatically , without needing to be passed in Or by prefixing the argument with hug_ : @hug . get () def my_endpoint ( hug_session ) : session # is here automatically , without needing to be passed in You can then specify a different location for the hug session, simply by providing a default for the argument: @hug . get () def my_endpoint ( hug_session = 'alternative_session_key' ) : session # is here automatically , without needing to be passed in Built-in directives hug provides a handful of directives for commonly needed attributes: hug.directives.Timer (hug_timer=precision): Stores the time the interface was initially called, returns how much time has passed since the function was called, if casted as a float. Automatically converts to the time taken when returned as part of a JSON structure. The default value specifies the float precision desired when keeping track of the time passed. hug.directives.module (hug_module): Passes along the module that contains the API associated with this endpoint. hug.directives.api (hug_api): Passes along the hug API singleton associated with this endpoint. hug.directives.api_version (hug_api_version): Passes along the version of the API being called. hug.directives.documentation (hug_documentation): Generates and passes along the entire set of documentation for the API that contains the endpoint. hug.directives.session (hug_session=context_name): Passes along the session associated with the current request. The default value provides a different key whose value is stored on the request.context object. hug.directives.user (hug_user): Passes along the user object associated with the request. hug.directives.CurrentAPI (hug_current_api): Passes along a smart, version-aware API caller, to enable calling other functions within your API, with reassurance that the correct function is being called for the version of the API being requested. Building custom directives hug provides the @hug.directive() to enable creation of new directives. It takes one argument: apply_globally, which defaults to False. If you set this parameter to True, the hug directive will be automatically made available as a magic hug_ argument on all endpoints outside of your defined API. This is not a concern if you're applying directives via type annotation. The most basic directive will take an optional default value, as well as **kwargs: @ hug . directive () def basic ( default = False , ** kwargs ) : return str ( default ) + ' there! ' This directive could then be used like this: @ hug . local () def endpoint ( hug_basic = ' hi ' ) : return hug_basic assert endpoint () == ' hi there! ' It's important to always accept **kwargs for directive functions, as each interface gets to decide its own set of keyword arguments to send to the directive, which can then be used to pull in information for the directive. Common directive key word parameters Independent of interface, the following key word arguments will be passed to the directive: interface - The interface that the directive is being run through. Useful for conditionally injecting data (via the decorator) depending on the interface it is being called through, as demonstrated at the bottom of this section. api - The API singleton associated with this endpoint. Interface Example: @ directive () def my_directive ( default = None , interface = None , ** kwargs ) : if interface == hug . interface . CLI : return ' CLI specific ' elif interface == hug . interface . HTTP : return ' HTTP specific ' elif interface == hug . interface . Local : return ' Local ' return ' unknown ' HTTP directive key word parameters Directives are passed the following additional keyword parameters when they are being run through an HTTP interface: response : The HTTP response object that will be returned for this request. request : The HTTP request object that caused this interface to be called. api_version : The version of the endpoint being hit. CLI directive key word parameters Directives get one additional argument when they are run through a command line interface: argparse : The argparse instance created to parse command line arguments.","title":"Directives"},{"location":"documentation/DIRECTIVES/#hug-directives-automatic-argument-injection","text":"Oftentimes you'll find yourself needing something particular to an interface (say a header, a session, or content_type), but don't want to tie your function to a single interface. To support this, hug introduces the concept of directives . In hug, directives are simply arguments that have been registered to automatically provide a parameter value based on knowledge known to the interface. For example, this is the built-in session directive: @ hug . directive () def session ( context_name = ' session ' , request = None , ** kwargs ) : \"\"\" Returns the session associated with the current request \"\"\" return request and request . context . get ( context_name , None ) or None Then, when using this directive in your code, you can either specify the directive via type annotation: @hug . get () def my_endpoint ( session : hug . directives . session ) : session # is here automatically , without needing to be passed in Or by prefixing the argument with hug_ : @hug . get () def my_endpoint ( hug_session ) : session # is here automatically , without needing to be passed in You can then specify a different location for the hug session, simply by providing a default for the argument: @hug . get () def my_endpoint ( hug_session = 'alternative_session_key' ) : session # is here automatically , without needing to be passed in","title":"hug directives (automatic argument injection)"},{"location":"documentation/DIRECTIVES/#built-in-directives","text":"hug provides a handful of directives for commonly needed attributes: hug.directives.Timer (hug_timer=precision): Stores the time the interface was initially called, returns how much time has passed since the function was called, if casted as a float. Automatically converts to the time taken when returned as part of a JSON structure. The default value specifies the float precision desired when keeping track of the time passed. hug.directives.module (hug_module): Passes along the module that contains the API associated with this endpoint. hug.directives.api (hug_api): Passes along the hug API singleton associated with this endpoint. hug.directives.api_version (hug_api_version): Passes along the version of the API being called. hug.directives.documentation (hug_documentation): Generates and passes along the entire set of documentation for the API that contains the endpoint. hug.directives.session (hug_session=context_name): Passes along the session associated with the current request. The default value provides a different key whose value is stored on the request.context object. hug.directives.user (hug_user): Passes along the user object associated with the request. hug.directives.CurrentAPI (hug_current_api): Passes along a smart, version-aware API caller, to enable calling other functions within your API, with reassurance that the correct function is being called for the version of the API being requested.","title":"Built-in directives"},{"location":"documentation/DIRECTIVES/#building-custom-directives","text":"hug provides the @hug.directive() to enable creation of new directives. It takes one argument: apply_globally, which defaults to False. If you set this parameter to True, the hug directive will be automatically made available as a magic hug_ argument on all endpoints outside of your defined API. This is not a concern if you're applying directives via type annotation. The most basic directive will take an optional default value, as well as **kwargs: @ hug . directive () def basic ( default = False , ** kwargs ) : return str ( default ) + ' there! ' This directive could then be used like this: @ hug . local () def endpoint ( hug_basic = ' hi ' ) : return hug_basic assert endpoint () == ' hi there! ' It's important to always accept **kwargs for directive functions, as each interface gets to decide its own set of keyword arguments to send to the directive, which can then be used to pull in information for the directive.","title":"Building custom directives"},{"location":"documentation/DIRECTIVES/#common-directive-key-word-parameters","text":"Independent of interface, the following key word arguments will be passed to the directive: interface - The interface that the directive is being run through. Useful for conditionally injecting data (via the decorator) depending on the interface it is being called through, as demonstrated at the bottom of this section. api - The API singleton associated with this endpoint. Interface Example: @ directive () def my_directive ( default = None , interface = None , ** kwargs ) : if interface == hug . interface . CLI : return ' CLI specific ' elif interface == hug . interface . HTTP : return ' HTTP specific ' elif interface == hug . interface . Local : return ' Local ' return ' unknown '","title":"Common directive key word parameters"},{"location":"documentation/DIRECTIVES/#http-directive-key-word-parameters","text":"Directives are passed the following additional keyword parameters when they are being run through an HTTP interface: response : The HTTP response object that will be returned for this request. request : The HTTP request object that caused this interface to be called. api_version : The version of the endpoint being hit.","title":"HTTP directive key word parameters"},{"location":"documentation/DIRECTIVES/#cli-directive-key-word-parameters","text":"Directives get one additional argument when they are run through a command line interface: argparse : The argparse instance created to parse command line arguments.","title":"CLI directive key word parameters"},{"location":"documentation/OUTPUT_FORMATS/","text":"hug output formats Every endpoint that is exposed through an externally facing interface will need to return data in a standard, easily understandable format. The default output format for all hug APIs is JSON. However, you may explicitly specify a different default output_format for a particular API: hug . API ( __name__ ). http . output_format = hug . output_format . html or: @hug . default_output_format () def my_output_formatter ( data , request , response ) : # Custom output formatting code By default, this only applies to the output format of HTTP responses. To change the output format of the command line interface: @hug . default_output_format ( cli = True , http = False ) def my_output_formatter ( data , request , response ) : # Custom output formatting code To specify an output_format for a specific endpoint, simply specify the output format within its router: @ hug . get ( output = hug . output_format . html ) def my_endpoint () : return # HTML generating code goes here You can use route chaining to specify an output format for a group of endpoints within an API: html = hug . get ( output = hug . output_format . html ) @ html def my_endpoint_1 () : return # HTML generating code goes here @ html . urls ( ' / ' ) def root () : return # HTML generating code goes here Finally, an output format may be a collection of different output formats that get used conditionally. For example, using the built-in suffix output format: suffix_output = hug . output_format . suffix ( { ' .js ' : hug . output_format . json , ' .html ' : hug . output_format . html } ) @ hug . get (( ' my_endpoint.js ' , ' my_endoint.html ' ) , output = suffix_output ) def my_endpoint () : return '' In this case, if the endpoint is accessed via my_endpoint.js, the output type will be JSON; however if it's accessed via my_endoint.html, the output type will be HTML. You can also change the default output format globally for all APIs with either: @hug . default_output_format ( apply_globally = True , cli = True , http = True ) def my_output_formatter ( data , request , response ) : # Custom output formatting code or: hug . defaults . output_format = hug . output_format . html # for HTTP hug . defaults . cli_output_format = hug . output_format . html # for the CLI Note that when extending APIs, changing the default output format globally must be done before importing the modules of any of the sub-APIs: hug . defaults . cli_output_format = hug . output_format . html from my_app import my_sub_api @hug.extend_api () def extended (): return [ my_sub_api ] Built-in hug output formats hug provides a large catalog of built-in output formats, which can be used to build useful APIs right away: hug.output_format.json : The default hug output formatter for all endpoints; outputs in Javascript Serialized Object Notation (JSON). hug.output_format.text : Outputs in a plain text format. hug.output_format.html : Outputs Hyper Text Markup Language (HTML). hug.output_format.json_camelcase : Outputs in the JSON format, but first converts all keys to camelCase to better conform to Javascript coding standards. hug.output_format.pretty_json : Outputs in the JSON format, with extra whitespace to improve human readability. hug.output_format.image(format) : Outputs an image (of the specified format). There are convenience calls in the form `hug.output_format.{FORMAT}_image for the following image types: 'png', 'jpg', 'bmp', 'eps', 'gif', 'im', 'jpeg', 'msp', 'pcx', 'ppm', 'spider', 'tiff', 'webp', 'xbm', 'cur', 'dcx', 'fli', 'flc', 'gbr', 'gd', 'ico', 'icns', 'imt', 'iptc', 'naa', 'mcidas', 'mpo', 'pcd', 'psd', 'sgi', 'tga', 'wal', 'xpm', and 'svg'. Automatically works on returned file names, streams, or objects that produce an image on read, save, or render. hug.output_format.video(video_type, video_mime, doc) : Streams a video back to the user in the specified format. There are convenience calls in the form `hug.output_format.{FORMAT}_video for the following video types: 'flv', 'mp4', 'm3u8', 'ts', '3gp', 'mov', 'avi', and 'wmv'. Automatically works on returned file names, streams, or objects that produce a video on read, save, or render. hug.output_format.file : Will dynamically determine and stream a file based on its content. Automatically works on returned file names and streams. hug.output_format.on_content_type(handlers={content_type: output_format}, default=None) : Dynamically changes the output format based on the request content type. hug.output_format.suffix(handlers={suffix: output_format}, default=None) : Dynamically changes the output format based on a suffix at the end of the requested path. hug.output_format.prefix(handlers={suffix: output_format}, default=None) : Dynamically changes the output format based on a prefix at the beginning of the requested path. Creating a custom output format An output format is simply a function with a content type attached that takes a data argument, and optionally a request and response, and returns properly encoded and formatted data: @ hug . format . content_type ( ' file/text ' ) def format_as_text ( data , request = None , response = None ) : return str ( data ) . encode ( ' utf8 ' ) A common pattern is to only apply the output format. Validation errors aren't passed in, since it's hard to deal with this for several formats (such as images), and it may make more sense to simply return the error as JSON. hug makes this pattern simple, as well, with the hug.output_format.on_valid decorator: @ hug . output_format . on_valid ( ' file/text ' ) def format_as_text_when_valid ( data , request = None , response = None ) : return str ( data ) . encode ( ' utf8 ' )","title":"Output Formats"},{"location":"documentation/OUTPUT_FORMATS/#hug-output-formats","text":"Every endpoint that is exposed through an externally facing interface will need to return data in a standard, easily understandable format. The default output format for all hug APIs is JSON. However, you may explicitly specify a different default output_format for a particular API: hug . API ( __name__ ). http . output_format = hug . output_format . html or: @hug . default_output_format () def my_output_formatter ( data , request , response ) : # Custom output formatting code By default, this only applies to the output format of HTTP responses. To change the output format of the command line interface: @hug . default_output_format ( cli = True , http = False ) def my_output_formatter ( data , request , response ) : # Custom output formatting code To specify an output_format for a specific endpoint, simply specify the output format within its router: @ hug . get ( output = hug . output_format . html ) def my_endpoint () : return # HTML generating code goes here You can use route chaining to specify an output format for a group of endpoints within an API: html = hug . get ( output = hug . output_format . html ) @ html def my_endpoint_1 () : return # HTML generating code goes here @ html . urls ( ' / ' ) def root () : return # HTML generating code goes here Finally, an output format may be a collection of different output formats that get used conditionally. For example, using the built-in suffix output format: suffix_output = hug . output_format . suffix ( { ' .js ' : hug . output_format . json , ' .html ' : hug . output_format . html } ) @ hug . get (( ' my_endpoint.js ' , ' my_endoint.html ' ) , output = suffix_output ) def my_endpoint () : return '' In this case, if the endpoint is accessed via my_endpoint.js, the output type will be JSON; however if it's accessed via my_endoint.html, the output type will be HTML. You can also change the default output format globally for all APIs with either: @hug . default_output_format ( apply_globally = True , cli = True , http = True ) def my_output_formatter ( data , request , response ) : # Custom output formatting code or: hug . defaults . output_format = hug . output_format . html # for HTTP hug . defaults . cli_output_format = hug . output_format . html # for the CLI Note that when extending APIs, changing the default output format globally must be done before importing the modules of any of the sub-APIs: hug . defaults . cli_output_format = hug . output_format . html from my_app import my_sub_api @hug.extend_api () def extended (): return [ my_sub_api ]","title":"hug output formats"},{"location":"documentation/OUTPUT_FORMATS/#built-in-hug-output-formats","text":"hug provides a large catalog of built-in output formats, which can be used to build useful APIs right away: hug.output_format.json : The default hug output formatter for all endpoints; outputs in Javascript Serialized Object Notation (JSON). hug.output_format.text : Outputs in a plain text format. hug.output_format.html : Outputs Hyper Text Markup Language (HTML). hug.output_format.json_camelcase : Outputs in the JSON format, but first converts all keys to camelCase to better conform to Javascript coding standards. hug.output_format.pretty_json : Outputs in the JSON format, with extra whitespace to improve human readability. hug.output_format.image(format) : Outputs an image (of the specified format). There are convenience calls in the form `hug.output_format.{FORMAT}_image for the following image types: 'png', 'jpg', 'bmp', 'eps', 'gif', 'im', 'jpeg', 'msp', 'pcx', 'ppm', 'spider', 'tiff', 'webp', 'xbm', 'cur', 'dcx', 'fli', 'flc', 'gbr', 'gd', 'ico', 'icns', 'imt', 'iptc', 'naa', 'mcidas', 'mpo', 'pcd', 'psd', 'sgi', 'tga', 'wal', 'xpm', and 'svg'. Automatically works on returned file names, streams, or objects that produce an image on read, save, or render. hug.output_format.video(video_type, video_mime, doc) : Streams a video back to the user in the specified format. There are convenience calls in the form `hug.output_format.{FORMAT}_video for the following video types: 'flv', 'mp4', 'm3u8', 'ts', '3gp', 'mov', 'avi', and 'wmv'. Automatically works on returned file names, streams, or objects that produce a video on read, save, or render. hug.output_format.file : Will dynamically determine and stream a file based on its content. Automatically works on returned file names and streams. hug.output_format.on_content_type(handlers={content_type: output_format}, default=None) : Dynamically changes the output format based on the request content type. hug.output_format.suffix(handlers={suffix: output_format}, default=None) : Dynamically changes the output format based on a suffix at the end of the requested path. hug.output_format.prefix(handlers={suffix: output_format}, default=None) : Dynamically changes the output format based on a prefix at the beginning of the requested path.","title":"Built-in hug output formats"},{"location":"documentation/OUTPUT_FORMATS/#creating-a-custom-output-format","text":"An output format is simply a function with a content type attached that takes a data argument, and optionally a request and response, and returns properly encoded and formatted data: @ hug . format . content_type ( ' file/text ' ) def format_as_text ( data , request = None , response = None ) : return str ( data ) . encode ( ' utf8 ' ) A common pattern is to only apply the output format. Validation errors aren't passed in, since it's hard to deal with this for several formats (such as images), and it may make more sense to simply return the error as JSON. hug makes this pattern simple, as well, with the hug.output_format.on_valid decorator: @ hug . output_format . on_valid ( ' file/text ' ) def format_as_text_when_valid ( data , request = None , response = None ) : return str ( data ) . encode ( ' utf8 ' )","title":"Creating a custom output format"},{"location":"documentation/ROUTING/","text":"Routing in hug The most basic function of any framework meant to enable external interaction with an API, is routing how the external interaction will correspond to internal function calls and business logic. hug provides flexible and powerful routers that aim to scale intuitively from simple use-cases to complex. To enable this all hug routers share 3 attributes: Can be used directly as function decorators Can be used separately from the function Can be stored, modified, and chained before being used And, while hug uses functions in most of its examples, it supports applying routes to methods and objects as well. All hug routers enforce type annotation and enable automatic argument supplying via directives. Using a router as a decorator The most basic use case is to simply define the route directly above the function you need to expose as a decorator: import hug @hug.get ( '/home' ) def root (): return 'Welcome home!' This is clear, explicit, and obvious. As such, this is recommended for most basic APIs. Declaring a router separate from a function Sometimes, in more complex use-cases, it's necessary to define routing separate from where the code itself is defined. hug aims to make this as easy and intuitive as it can be: Internal API: # internal . py def root () : return ' Welcome home! ' External API: # external.py import hug import internal router = hug . route . API ( __name__ ) router . get ( '/home' )( internal . root ) Or, alternatively: # external.py import hug import internal api = hug . API ( __name__ ) hug . get ( '/home' , api = api )( internal . root ) Chaining routers for easy re-use A very common scenario when using hug routers, because they are so powerful, is duplication between routers. For instance: if you decide you want every route to return the 404 page when a validation error occurs or you want to require validation for a collection of routes. hug makes this extremely simple by allowing all routes to be chained and reused: import hug api = hug . get ( on_invalid = hug . redirect . not_found ) @api.urls ( '/do-math' , examples = 'number_1=1&number_2=2' ) def math ( number_1 : hug . types . number , number_2 : hug . types . number ): return number_1 + number_2 @api def happy_birthday ( name , age : hug . types . number ): \"\"\"Says happy birthday to a user\"\"\" return \"Happy {age} Birthday {name}!\" . format ( ** locals ()) It's important to note that to chain you simply call the argument you would normally pass in to the routers init function as a method on the existing router. Then you pass in any additional parameters you would like to override as **kwargs - as shown in the math example above. Common router parameters There are a few parameters that are shared between all router types, as they are globally applicable to all currently supported interfaces: api : The API to register the route with. You can always retrieve the API singleton for the current module by doing hug.API(__name__) transform : A function to call on the the data returned by the function to transform it in some way specific to this interface output : An output format to apply to the outputted data (after return and optional transformation) requires : A list or single function that must all return True for the function to execute when called via this interface (commonly used for authentication) HTTP Routers in addition to hug.http hug includes convenience decorators for all common HTTP METHODS ( hug.connect , hug.delete , hug.get , hug.head , hug.options , hug.patch , hug.post , hug.put , hug.get_post , hug.put_post , and hug.trace ). These methods are functionally the same as calling @hug.http(accept=(METHOD, )) and are otherwise identical to the http router. urls : A list of or a single URL that should be routed to the function. Supports defining variables within the URL that will automatically be passed to the function when {} notation is found in the URL: /website/{page} . Defaults to the name of the function being routed to. accept : A list of or a single HTTP METHOD value to accept. Defaults to all common HTTP methods. examples : A list of or a single example set of parameters in URL query param format. For example: examples=\"argument_1=x&argument_2=y\" versions : A list of or a single integer version of the API this endpoint supports. To support a range of versions the Python builtin range function can be used. suffixes : A list of or a single suffix to add to the end of all URLs using this router. prefixes : A list of or a single prefix to add before all URLs using this router. response_headers : An optional dictionary of response headers to set automatically on every request to this endpoint. status : An optional status code to automatically apply to the response on every request to this endpoint. parse_body : If True and the format of the request body matches one known by hug, hug will run the specified input formatter on the request body before passing it as an argument to the routed function. Defaults to True . on_invalid : A transformation function to run outputed data through, only if the request fails validation. Defaults to the endpoints specified general transform function, can be set to not run at all by setting to None . output_invalid : Specifies an output format to attach to the endpoint only on the case that validation fails. Defaults to the endpoints specified output format. raise_on_invalid : If set to true, instead of collecting validation errors in a dictionary, hug will simply raise them as they occur. Handling for 404 Responses By default, Hug will call documentation_404() if a user tries to access a nonexistant route when serving. If you want to specify something different, you can use the \"sink\" decorator, such as in the example below. The @hug.sink() decorator serves as a \"catch all\" for unassigned routes. import hug @hug.sink ( '/all' ) def my_sink ( request ): return request . path . replace ( '/all' , '' ) In this case, the server routes requests to anything that's no an assigned route to the landing page. To test the functionality of your sink decorator, serve your application locally, then attempt to access an unassigned route. Using this code, if you try to access localhost:8000/this-route-is-invalid , you will be rerouted to localhost:8000 . CLI Routing Any endpoint can also be exposed to the command line as well, using @hug.cli : name : The name that should execute the command from the command line. Defaults to the name of the function being routed. version : The optional version associated with this command line application. doc : Documentation to provide to users of this command line tool. Defaults to the functions doc string. Local Routing By default all hug APIs are already valid local APIs. However, sometimes it can be useful to apply type annotations and/or directives to local use as well. For these cases hug provides @hug.local : validate : Apply type annotations to local use of the function. Defaults to True . directives : Apply directives to local use of the function. Defaults to True . version : Specify a version of the API for local use. If versions are being used, this generally should be the latest supported. on_invalid : A transformation function to run outputed data through, only if the request fails validation. Defaults to the endpoints specified general transform function, can be set to not run at all by setting to None . output_invalid : Specifies an output format to attach to the endpoint only on the case that validation fails. Defaults to the endpoints specified output format. raise_on_invalid : If set to True , instead of collecting validation errors in a dictionary, hug will simply raise them as they occur. NOTE: unlike all other routers, this modifies the function in-place","title":"Routing"},{"location":"documentation/ROUTING/#routing-in-hug","text":"The most basic function of any framework meant to enable external interaction with an API, is routing how the external interaction will correspond to internal function calls and business logic. hug provides flexible and powerful routers that aim to scale intuitively from simple use-cases to complex. To enable this all hug routers share 3 attributes: Can be used directly as function decorators Can be used separately from the function Can be stored, modified, and chained before being used And, while hug uses functions in most of its examples, it supports applying routes to methods and objects as well. All hug routers enforce type annotation and enable automatic argument supplying via directives.","title":"Routing in hug"},{"location":"documentation/ROUTING/#using-a-router-as-a-decorator","text":"The most basic use case is to simply define the route directly above the function you need to expose as a decorator: import hug @hug.get ( '/home' ) def root (): return 'Welcome home!' This is clear, explicit, and obvious. As such, this is recommended for most basic APIs.","title":"Using a router as a decorator"},{"location":"documentation/ROUTING/#declaring-a-router-separate-from-a-function","text":"Sometimes, in more complex use-cases, it's necessary to define routing separate from where the code itself is defined. hug aims to make this as easy and intuitive as it can be: Internal API: # internal . py def root () : return ' Welcome home! ' External API: # external.py import hug import internal router = hug . route . API ( __name__ ) router . get ( '/home' )( internal . root ) Or, alternatively: # external.py import hug import internal api = hug . API ( __name__ ) hug . get ( '/home' , api = api )( internal . root )","title":"Declaring a router separate from a function"},{"location":"documentation/ROUTING/#chaining-routers-for-easy-re-use","text":"A very common scenario when using hug routers, because they are so powerful, is duplication between routers. For instance: if you decide you want every route to return the 404 page when a validation error occurs or you want to require validation for a collection of routes. hug makes this extremely simple by allowing all routes to be chained and reused: import hug api = hug . get ( on_invalid = hug . redirect . not_found ) @api.urls ( '/do-math' , examples = 'number_1=1&number_2=2' ) def math ( number_1 : hug . types . number , number_2 : hug . types . number ): return number_1 + number_2 @api def happy_birthday ( name , age : hug . types . number ): \"\"\"Says happy birthday to a user\"\"\" return \"Happy {age} Birthday {name}!\" . format ( ** locals ()) It's important to note that to chain you simply call the argument you would normally pass in to the routers init function as a method on the existing router. Then you pass in any additional parameters you would like to override as **kwargs - as shown in the math example above.","title":"Chaining routers for easy re-use"},{"location":"documentation/ROUTING/#common-router-parameters","text":"There are a few parameters that are shared between all router types, as they are globally applicable to all currently supported interfaces: api : The API to register the route with. You can always retrieve the API singleton for the current module by doing hug.API(__name__) transform : A function to call on the the data returned by the function to transform it in some way specific to this interface output : An output format to apply to the outputted data (after return and optional transformation) requires : A list or single function that must all return True for the function to execute when called via this interface (commonly used for authentication)","title":"Common router parameters"},{"location":"documentation/ROUTING/#http-routers","text":"in addition to hug.http hug includes convenience decorators for all common HTTP METHODS ( hug.connect , hug.delete , hug.get , hug.head , hug.options , hug.patch , hug.post , hug.put , hug.get_post , hug.put_post , and hug.trace ). These methods are functionally the same as calling @hug.http(accept=(METHOD, )) and are otherwise identical to the http router. urls : A list of or a single URL that should be routed to the function. Supports defining variables within the URL that will automatically be passed to the function when {} notation is found in the URL: /website/{page} . Defaults to the name of the function being routed to. accept : A list of or a single HTTP METHOD value to accept. Defaults to all common HTTP methods. examples : A list of or a single example set of parameters in URL query param format. For example: examples=\"argument_1=x&argument_2=y\" versions : A list of or a single integer version of the API this endpoint supports. To support a range of versions the Python builtin range function can be used. suffixes : A list of or a single suffix to add to the end of all URLs using this router. prefixes : A list of or a single prefix to add before all URLs using this router. response_headers : An optional dictionary of response headers to set automatically on every request to this endpoint. status : An optional status code to automatically apply to the response on every request to this endpoint. parse_body : If True and the format of the request body matches one known by hug, hug will run the specified input formatter on the request body before passing it as an argument to the routed function. Defaults to True . on_invalid : A transformation function to run outputed data through, only if the request fails validation. Defaults to the endpoints specified general transform function, can be set to not run at all by setting to None . output_invalid : Specifies an output format to attach to the endpoint only on the case that validation fails. Defaults to the endpoints specified output format. raise_on_invalid : If set to true, instead of collecting validation errors in a dictionary, hug will simply raise them as they occur.","title":"HTTP Routers"},{"location":"documentation/ROUTING/#handling-for-404-responses","text":"By default, Hug will call documentation_404() if a user tries to access a nonexistant route when serving. If you want to specify something different, you can use the \"sink\" decorator, such as in the example below. The @hug.sink() decorator serves as a \"catch all\" for unassigned routes. import hug @hug.sink ( '/all' ) def my_sink ( request ): return request . path . replace ( '/all' , '' ) In this case, the server routes requests to anything that's no an assigned route to the landing page. To test the functionality of your sink decorator, serve your application locally, then attempt to access an unassigned route. Using this code, if you try to access localhost:8000/this-route-is-invalid , you will be rerouted to localhost:8000 .","title":"Handling for 404 Responses"},{"location":"documentation/ROUTING/#cli-routing","text":"Any endpoint can also be exposed to the command line as well, using @hug.cli : name : The name that should execute the command from the command line. Defaults to the name of the function being routed. version : The optional version associated with this command line application. doc : Documentation to provide to users of this command line tool. Defaults to the functions doc string.","title":"CLI Routing"},{"location":"documentation/ROUTING/#local-routing","text":"By default all hug APIs are already valid local APIs. However, sometimes it can be useful to apply type annotations and/or directives to local use as well. For these cases hug provides @hug.local : validate : Apply type annotations to local use of the function. Defaults to True . directives : Apply directives to local use of the function. Defaults to True . version : Specify a version of the API for local use. If versions are being used, this generally should be the latest supported. on_invalid : A transformation function to run outputed data through, only if the request fails validation. Defaults to the endpoints specified general transform function, can be set to not run at all by setting to None . output_invalid : Specifies an output format to attach to the endpoint only on the case that validation fails. Defaults to the endpoints specified output format. raise_on_invalid : If set to True , instead of collecting validation errors in a dictionary, hug will simply raise them as they occur. NOTE: unlike all other routers, this modifies the function in-place","title":"Local Routing"},{"location":"documentation/TYPE_ANNOTATIONS/","text":"Type annotations in hug hug leverages Python3 type annotations for validation and API specification. Within the context of hug, annotations should be set to one of 4 things: A cast function, built-in, or your own (str, int, etc) that takes a value casts it and then returns it, raising an exception if it is not in a format that can be cast into the desired type A hug type (hug.types.text, hug.types.number, etc.). These are essentially built-in cast functions that provide more contextual information, and good default error messages A marshmallow type and/or schema. In hug 2.0.0 Marshmallow is a first class citizen in hug, and all fields and schemas defined with it can be used in hug as type annotations A string. When a basic Python string is set as the type annotation it is used by hug to generate documentation, but does not get applied during the validation phase For example: import hug @hug.get () def hello ( first_name : hug . types . text , last_name : 'Family Name' , age : int ): print ( \"Hi {0} {1}!\" . format ( first_name , last_name ) is a valid hug endpoint. Any time a type annotation raises an exception during casting of a type, it is seen as a failure. Otherwise the cast is assumed successful with the returned type replacing the passed-in parameter. By default, all errors are collected in an errors dictionary and returned as the output of the endpoint before the routed function ever gets called. To change how errors are returned you can transform them via the on_invalid route option, and specify a specific output format for errors by specifying the output_invalid route option. Or, if you prefer, you can keep hug from handling the validation errors at all by passing in raise_on_invalid=True to the route. Built in hug types hug provides several built-in types for common API use cases: number : Validates that a whole number was passed in float_number : Validates that a valid floating point number was passed in decimal : Validates and converts the provided value into a Python Decimal object uuid : Validates that the provided value is a valid UUID text : Validates that the provided value is a single string parameter multiple : Ensures the parameter is passed in as a list (even if only one value is passed in) boolean : A basic naive HTTP style boolean where no value passed in is seen as False and any value passed in (even if its false ) is seen as True smart_boolean : A smarter, but more computentionally expensive, boolean that checks the content of the value for common true / false formats (true, True, t, 1) or (false, False, f, 0) delimited_list(delimiter) : splits up the passed in value based on the provided delimiter and then passes it to the function as a list one_of(values) : Validates that the passed in value is one of those specified mapping(dict_of_passed_in_to_desired_values) : Like one_of , but with a dictionary of acceptable values, to converted value. multi(types) : Allows passing in multiple acceptable types for a parameter, short circuiting on the first acceptable one in_range(lower, upper, convert=number) : Accepts a number within a lower and upper bound of acceptable values less_than(limit, convert=number) : Accepts a number within a lower and upper bound of acceptable values greater_than(minimum, convert=number) : Accepts a value above a given minimum length(lower, upper, convert=text) : Accepts a a value that is within a specific length limit shorter_than(limit, convert=text) : Accepts a text value shorter than the specified length limit longer_than(limit, convert=text) : Accepts a value up to the specified limit cut_off(limit, convert=text) : Cuts off the provided value at the specified index Extending and creating new hug types The most obvious way to extend a hug type is to simply inherit from the base type defined in hug.types and then override __call__ to override how the cast function, or override __init__ to override what parameters the type takes: import hug class TheAnswer ( hug . types . Text ): \"\"\"My new documentation\"\"\" def __call__ ( self , value ): value = super () . __call__ ( value ) if value != 'fourty-two' : raise ValueError ( 'Value is not the answer to everything.' ) return value If you simply want to perform additional conversion after a base type is finished, or modify its documentation, the most succinct way is the hug.type decorator: import hug @hug.type ( extend = hug . types . number ) def the_answer ( value ): \"\"\"My new documentation\"\"\" if value != 42 : raise ValueError ( 'Value is not the answer to everything.' ) return value Marshmallow integration Marshmallow is an advanced serialization, deserialization, and validation library. Hug supports using marshmallow fields and schemas as input types. Here is a simple example of an API that does datetime addition. import datetime as dt import hug from marshmallow import fields from marshmallow.validate import Range @hug.get ( '/dateadd' , examples = \"value=1973-04-10&addend=63\" ) def dateadd ( value : fields . Date (), addend : fields . Int ( validate = Range ( min = 1 ))): \"\"\"Add a value to a date.\"\"\" delta = dt . timedelta ( days = addend ) result = value + delta return { 'result' : result }","title":"Type Annotations"},{"location":"documentation/TYPE_ANNOTATIONS/#type-annotations-in-hug","text":"hug leverages Python3 type annotations for validation and API specification. Within the context of hug, annotations should be set to one of 4 things: A cast function, built-in, or your own (str, int, etc) that takes a value casts it and then returns it, raising an exception if it is not in a format that can be cast into the desired type A hug type (hug.types.text, hug.types.number, etc.). These are essentially built-in cast functions that provide more contextual information, and good default error messages A marshmallow type and/or schema. In hug 2.0.0 Marshmallow is a first class citizen in hug, and all fields and schemas defined with it can be used in hug as type annotations A string. When a basic Python string is set as the type annotation it is used by hug to generate documentation, but does not get applied during the validation phase For example: import hug @hug.get () def hello ( first_name : hug . types . text , last_name : 'Family Name' , age : int ): print ( \"Hi {0} {1}!\" . format ( first_name , last_name ) is a valid hug endpoint. Any time a type annotation raises an exception during casting of a type, it is seen as a failure. Otherwise the cast is assumed successful with the returned type replacing the passed-in parameter. By default, all errors are collected in an errors dictionary and returned as the output of the endpoint before the routed function ever gets called. To change how errors are returned you can transform them via the on_invalid route option, and specify a specific output format for errors by specifying the output_invalid route option. Or, if you prefer, you can keep hug from handling the validation errors at all by passing in raise_on_invalid=True to the route.","title":"Type annotations in hug"},{"location":"documentation/TYPE_ANNOTATIONS/#built-in-hug-types","text":"hug provides several built-in types for common API use cases: number : Validates that a whole number was passed in float_number : Validates that a valid floating point number was passed in decimal : Validates and converts the provided value into a Python Decimal object uuid : Validates that the provided value is a valid UUID text : Validates that the provided value is a single string parameter multiple : Ensures the parameter is passed in as a list (even if only one value is passed in) boolean : A basic naive HTTP style boolean where no value passed in is seen as False and any value passed in (even if its false ) is seen as True smart_boolean : A smarter, but more computentionally expensive, boolean that checks the content of the value for common true / false formats (true, True, t, 1) or (false, False, f, 0) delimited_list(delimiter) : splits up the passed in value based on the provided delimiter and then passes it to the function as a list one_of(values) : Validates that the passed in value is one of those specified mapping(dict_of_passed_in_to_desired_values) : Like one_of , but with a dictionary of acceptable values, to converted value. multi(types) : Allows passing in multiple acceptable types for a parameter, short circuiting on the first acceptable one in_range(lower, upper, convert=number) : Accepts a number within a lower and upper bound of acceptable values less_than(limit, convert=number) : Accepts a number within a lower and upper bound of acceptable values greater_than(minimum, convert=number) : Accepts a value above a given minimum length(lower, upper, convert=text) : Accepts a a value that is within a specific length limit shorter_than(limit, convert=text) : Accepts a text value shorter than the specified length limit longer_than(limit, convert=text) : Accepts a value up to the specified limit cut_off(limit, convert=text) : Cuts off the provided value at the specified index","title":"Built in hug types"},{"location":"documentation/TYPE_ANNOTATIONS/#extending-and-creating-new-hug-types","text":"The most obvious way to extend a hug type is to simply inherit from the base type defined in hug.types and then override __call__ to override how the cast function, or override __init__ to override what parameters the type takes: import hug class TheAnswer ( hug . types . Text ): \"\"\"My new documentation\"\"\" def __call__ ( self , value ): value = super () . __call__ ( value ) if value != 'fourty-two' : raise ValueError ( 'Value is not the answer to everything.' ) return value If you simply want to perform additional conversion after a base type is finished, or modify its documentation, the most succinct way is the hug.type decorator: import hug @hug.type ( extend = hug . types . number ) def the_answer ( value ): \"\"\"My new documentation\"\"\" if value != 42 : raise ValueError ( 'Value is not the answer to everything.' ) return value","title":"Extending and creating new hug types"},{"location":"documentation/TYPE_ANNOTATIONS/#marshmallow-integration","text":"Marshmallow is an advanced serialization, deserialization, and validation library. Hug supports using marshmallow fields and schemas as input types. Here is a simple example of an API that does datetime addition. import datetime as dt import hug from marshmallow import fields from marshmallow.validate import Range @hug.get ( '/dateadd' , examples = \"value=1973-04-10&addend=63\" ) def dateadd ( value : fields . Date (), addend : fields . Int ( validate = Range ( min = 1 ))): \"\"\"Add a value to a date.\"\"\" delta = dt . timedelta ( days = addend ) result = value + delta return { 'result' : result }","title":"Marshmallow integration"},{"location":"examples/docker_compose_with_mongodb/","text":"mongodb + hug microservice Run with sudo /path/to/docker-compose up --build Add data with something that can POST, e.g. curl http://localhost:8000/new -d name=\"my name\" -d description=\"a description\" Visit localhost:8000/ to see all the current data Rejoice!","title":"mongodb + hug microservice"},{"location":"examples/docker_compose_with_mongodb/#mongodb-hug-microservice","text":"Run with sudo /path/to/docker-compose up --build Add data with something that can POST, e.g. curl http://localhost:8000/new -d name=\"my name\" -d description=\"a description\" Visit localhost:8000/ to see all the current data Rejoice!","title":"mongodb + hug microservice"},{"location":"examples/docker_nginx/","text":"Docker/NGINX with Hug Example of a Docker image containing a Python project utilizing NGINX, Gunicorn, and Hug. This example provides a stack that operates as follows: Client <-> NGINX <-> Gunicorn <-> Python API ( Hug ) Getting started Clone/copy this directory to your local machine, navigate to said directory, then: For production: This is an \"immutable\" build that will require restarting of the container for changes to reflect. $ make prod For development: This is a \"mutable\" build, which enables us to make changes to our Python project, and changes will reflect in real time! $ make dev Once the docker images are running, navigate to localhost:8000 . A hello world message should be visible!","title":"Docker/NGINX with Hug"},{"location":"examples/docker_nginx/#dockernginx-with-hug","text":"Example of a Docker image containing a Python project utilizing NGINX, Gunicorn, and Hug. This example provides a stack that operates as follows: Client <-> NGINX <-> Gunicorn <-> Python API ( Hug )","title":"Docker/NGINX with Hug"},{"location":"examples/docker_nginx/#getting-started","text":"Clone/copy this directory to your local machine, navigate to said directory, then: For production: This is an \"immutable\" build that will require restarting of the container for changes to reflect. $ make prod For development: This is a \"mutable\" build, which enables us to make changes to our Python project, and changes will reflect in real time! $ make dev Once the docker images are running, navigate to localhost:8000 . A hello world message should be visible!","title":"Getting started"},{"location":"examples/multiple_files/","text":"Splitting the API into multiple files Example of an API defined in multiple Python modules and combined together using the extend_api() helper. Run with hug -f api.py . There are three API endpoints: - http://localhost:8000/ \u2013 say_hi() from api.py - http://localhost:8000/part1 \u2013 part1() from part_1.py - http://localhost:8000/part2 \u2013 part2() from part_2.py","title":"Splitting the API into multiple files"},{"location":"examples/multiple_files/#splitting-the-api-into-multiple-files","text":"Example of an API defined in multiple Python modules and combined together using the extend_api() helper. Run with hug -f api.py . There are three API endpoints: - http://localhost:8000/ \u2013 say_hi() from api.py - http://localhost:8000/part1 \u2013 part1() from part_1.py - http://localhost:8000/part2 \u2013 part2() from part_2.py","title":"Splitting the API into multiple files"},{"location":"reference/hug/","text":"Module hug hug/ init .py Everyone needs a hug every once in a while. Even API developers. Hug aims to make developing Python driven APIs as simple as possible, but no simpler. Hug's Design Objectives: Make developing a Python driven API as succint as a written definition. The framework should encourage code that self-documents. It should be fast. Never should a developer feel the need to look somewhere else for performance reasons. Writing tests for APIs written on-top of Hug should be easy and intuitive. Magic done once, in an API, is better then pushing the problem set to the user of the API. Be the basis for next generation Python APIs, embracing the latest technology. Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. View Source \"\"\" hug/__init__.py Everyone needs a hug every once in a while . Even API developers . Hug aims to make developing Python driven APIs as simple as possible , but no simpler . Hug ' s Design Objectives: - Make developing a Python driven API as succint as a written definition . - The framework should encourage code that self - documents . - It should be fast . Never should a developer feel the need to look somewhere else for performance reasons . - Writing tests for APIs written on - top of Hug should be easy and intuitive . - Magic done once , in an API , is better then pushing the problem set to the user of the API . - Be the basis for next generation Python APIs , embracing the latest technology . Copyright ( C ) 2016 Timothy Edmund Crosley Permission is hereby granted , free of charge , to any person obtaining a copy of this software and associated documentation files ( the \" Software \" ) , to deal in the Software without restriction , including without limitation the rights to use , copy , modify , merge , publish , distribute , sublicense , and / or sell copies of the Software , and to permit persons to whom the Software is furnished to do so , subject to the following conditions : The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software . THE SOFTWARE IS PROVIDED \" AS IS \" , WITHOUT WARRANTY OF ANY KIND , EXPRESS OR IMPLIED , INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY , FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT . IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM , DAMAGES OR OTHER LIABILITY , WHETHER IN AN ACTION OF CONTRACT , TORT OR OTHERWISE , ARISING FROM , OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE . \"\"\" from __future__ import absolute_import from falcon import * from hug import ( directives , exceptions , format , input_format , introspect , middleware , output_format , redirect , route , test , transform , types , use , validate , ) from hug . _version import current from hug . api import API from hug . decorators import ( context_factory , default_input_format , default_output_format , delete_context , directive , extend_api , middleware_class , reqresp_middleware , request_middleware , response_middleware , startup , wraps , ) from hug . route import ( call , cli , connect , delete , exception , get , get_post , head , http , local , not_found , object , options , patch , post , put , sink , static , trace , ) from hug . types import create as type # The following imports must be imported last ; in particular, defaults to have access to all modules from hug import authentication # isort : skip from hug import development_runner # isort : skip from hug import defaults # isort : skip try : # pragma : no cover - defaulting to uvloop if it is installed import uvloop import asyncio asyncio . set_event_loop_policy ( uvloop . EventLoopPolicy ()) except ( ImportError , AttributeError ) : pass __version__ = current Sub-modules hug.api hug.authentication hug.decorators hug.defaults hug.development_runner hug.directives hug.exceptions hug.format hug.input_format hug.interface hug.introspect hug.json_module hug.middleware hug.output_format hug.redirect hug.route hug.routing hug.store hug.test hug.this hug.transform hug.types hug.use hug.validate Variables COMBINED_METHODS DEFAULT_MEDIA_TYPE HTTP_100 HTTP_101 HTTP_102 HTTP_200 HTTP_201 HTTP_202 HTTP_203 HTTP_204 HTTP_205 HTTP_206 HTTP_207 HTTP_208 HTTP_226 HTTP_300 HTTP_301 HTTP_302 HTTP_303 HTTP_304 HTTP_305 HTTP_307 HTTP_308 HTTP_400 HTTP_401 HTTP_402 HTTP_403 HTTP_404 HTTP_405 HTTP_406 HTTP_407 HTTP_408 HTTP_409 HTTP_410 HTTP_411 HTTP_412 HTTP_413 HTTP_414 HTTP_415 HTTP_416 HTTP_417 HTTP_418 HTTP_422 HTTP_423 HTTP_424 HTTP_426 HTTP_428 HTTP_429 HTTP_431 HTTP_451 HTTP_500 HTTP_501 HTTP_502 HTTP_503 HTTP_504 HTTP_505 HTTP_507 HTTP_508 HTTP_511 HTTP_701 HTTP_702 HTTP_703 HTTP_710 HTTP_711 HTTP_712 HTTP_719 HTTP_720 HTTP_721 HTTP_722 HTTP_723 HTTP_724 HTTP_725 HTTP_726 HTTP_727 HTTP_740 HTTP_741 HTTP_742 HTTP_743 HTTP_744 HTTP_745 HTTP_748 HTTP_749 HTTP_750 HTTP_753 HTTP_754 HTTP_755 HTTP_759 HTTP_771 HTTP_772 HTTP_773 HTTP_774 HTTP_776 HTTP_777 HTTP_778 HTTP_779 HTTP_780 HTTP_781 HTTP_782 HTTP_783 HTTP_784 HTTP_785 HTTP_786 HTTP_791 HTTP_792 HTTP_797 HTTP_799 HTTP_ACCEPTED HTTP_ALREADY_REPORTED HTTP_BAD_GATEWAY HTTP_BAD_REQUEST HTTP_CONFLICT HTTP_CONTINUE HTTP_CREATED HTTP_EXPECTATION_FAILED HTTP_FAILED_DEPENDENCY HTTP_FORBIDDEN HTTP_FOUND HTTP_GATEWAY_TIMEOUT HTTP_GONE HTTP_HTTP_VERSION_NOT_SUPPORTED HTTP_IM_A_TEAPOT HTTP_IM_USED HTTP_INSUFFICIENT_STORAGE HTTP_INTERNAL_SERVER_ERROR HTTP_LENGTH_REQUIRED HTTP_LOCKED HTTP_LOOP_DETECTED HTTP_METHODS HTTP_METHOD_NOT_ALLOWED HTTP_MOVED_PERMANENTLY HTTP_MULTIPLE_CHOICES HTTP_MULTI_STATUS HTTP_NETWORK_AUTHENTICATION_REQUIRED HTTP_NON_AUTHORITATIVE_INFORMATION HTTP_NOT_ACCEPTABLE HTTP_NOT_FOUND HTTP_NOT_IMPLEMENTED HTTP_NOT_MODIFIED HTTP_NO_CONTENT HTTP_OK HTTP_PARTIAL_CONTENT HTTP_PAYMENT_REQUIRED HTTP_PERMANENT_REDIRECT HTTP_PRECONDITION_FAILED HTTP_PRECONDITION_REQUIRED HTTP_PROCESSING HTTP_PROXY_AUTHENTICATION_REQUIRED HTTP_REQUESTED_RANGE_NOT_SATISFIABLE HTTP_REQUEST_ENTITY_TOO_LARGE HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE HTTP_REQUEST_TIMEOUT HTTP_REQUEST_URI_TOO_LONG HTTP_RESET_CONTENT HTTP_SEE_OTHER HTTP_SERVICE_UNAVAILABLE HTTP_SWITCHING_PROTOCOLS HTTP_TEMPORARY_REDIRECT HTTP_TOO_MANY_REQUESTS HTTP_UNAUTHORIZED HTTP_UNAVAILABLE_FOR_LEGAL_REASONS HTTP_UNPROCESSABLE_ENTITY HTTP_UNSUPPORTED_MEDIA_TYPE HTTP_UPGRADE_REQUIRED HTTP_USE_PROXY MEDIA_GIF MEDIA_HTML MEDIA_JPEG MEDIA_JS MEDIA_JSON MEDIA_MSGPACK MEDIA_PNG MEDIA_TEXT MEDIA_XML MEDIA_YAML WEBDAV_METHODS connect current delete get get_post head options patch post put trace","title":"Index"},{"location":"reference/hug/#module-hug","text":"hug/ init .py Everyone needs a hug every once in a while. Even API developers. Hug aims to make developing Python driven APIs as simple as possible, but no simpler. Hug's Design Objectives: Make developing a Python driven API as succint as a written definition. The framework should encourage code that self-documents. It should be fast. Never should a developer feel the need to look somewhere else for performance reasons. Writing tests for APIs written on-top of Hug should be easy and intuitive. Magic done once, in an API, is better then pushing the problem set to the user of the API. Be the basis for next generation Python APIs, embracing the latest technology. Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. View Source \"\"\" hug/__init__.py Everyone needs a hug every once in a while . Even API developers . Hug aims to make developing Python driven APIs as simple as possible , but no simpler . Hug ' s Design Objectives: - Make developing a Python driven API as succint as a written definition . - The framework should encourage code that self - documents . - It should be fast . Never should a developer feel the need to look somewhere else for performance reasons . - Writing tests for APIs written on - top of Hug should be easy and intuitive . - Magic done once , in an API , is better then pushing the problem set to the user of the API . - Be the basis for next generation Python APIs , embracing the latest technology . Copyright ( C ) 2016 Timothy Edmund Crosley Permission is hereby granted , free of charge , to any person obtaining a copy of this software and associated documentation files ( the \" Software \" ) , to deal in the Software without restriction , including without limitation the rights to use , copy , modify , merge , publish , distribute , sublicense , and / or sell copies of the Software , and to permit persons to whom the Software is furnished to do so , subject to the following conditions : The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software . THE SOFTWARE IS PROVIDED \" AS IS \" , WITHOUT WARRANTY OF ANY KIND , EXPRESS OR IMPLIED , INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY , FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT . IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM , DAMAGES OR OTHER LIABILITY , WHETHER IN AN ACTION OF CONTRACT , TORT OR OTHERWISE , ARISING FROM , OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE . \"\"\" from __future__ import absolute_import from falcon import * from hug import ( directives , exceptions , format , input_format , introspect , middleware , output_format , redirect , route , test , transform , types , use , validate , ) from hug . _version import current from hug . api import API from hug . decorators import ( context_factory , default_input_format , default_output_format , delete_context , directive , extend_api , middleware_class , reqresp_middleware , request_middleware , response_middleware , startup , wraps , ) from hug . route import ( call , cli , connect , delete , exception , get , get_post , head , http , local , not_found , object , options , patch , post , put , sink , static , trace , ) from hug . types import create as type # The following imports must be imported last ; in particular, defaults to have access to all modules from hug import authentication # isort : skip from hug import development_runner # isort : skip from hug import defaults # isort : skip try : # pragma : no cover - defaulting to uvloop if it is installed import uvloop import asyncio asyncio . set_event_loop_policy ( uvloop . EventLoopPolicy ()) except ( ImportError , AttributeError ) : pass __version__ = current","title":"Module hug"},{"location":"reference/hug/#sub-modules","text":"hug.api hug.authentication hug.decorators hug.defaults hug.development_runner hug.directives hug.exceptions hug.format hug.input_format hug.interface hug.introspect hug.json_module hug.middleware hug.output_format hug.redirect hug.route hug.routing hug.store hug.test hug.this hug.transform hug.types hug.use hug.validate","title":"Sub-modules"},{"location":"reference/hug/#variables","text":"COMBINED_METHODS DEFAULT_MEDIA_TYPE HTTP_100 HTTP_101 HTTP_102 HTTP_200 HTTP_201 HTTP_202 HTTP_203 HTTP_204 HTTP_205 HTTP_206 HTTP_207 HTTP_208 HTTP_226 HTTP_300 HTTP_301 HTTP_302 HTTP_303 HTTP_304 HTTP_305 HTTP_307 HTTP_308 HTTP_400 HTTP_401 HTTP_402 HTTP_403 HTTP_404 HTTP_405 HTTP_406 HTTP_407 HTTP_408 HTTP_409 HTTP_410 HTTP_411 HTTP_412 HTTP_413 HTTP_414 HTTP_415 HTTP_416 HTTP_417 HTTP_418 HTTP_422 HTTP_423 HTTP_424 HTTP_426 HTTP_428 HTTP_429 HTTP_431 HTTP_451 HTTP_500 HTTP_501 HTTP_502 HTTP_503 HTTP_504 HTTP_505 HTTP_507 HTTP_508 HTTP_511 HTTP_701 HTTP_702 HTTP_703 HTTP_710 HTTP_711 HTTP_712 HTTP_719 HTTP_720 HTTP_721 HTTP_722 HTTP_723 HTTP_724 HTTP_725 HTTP_726 HTTP_727 HTTP_740 HTTP_741 HTTP_742 HTTP_743 HTTP_744 HTTP_745 HTTP_748 HTTP_749 HTTP_750 HTTP_753 HTTP_754 HTTP_755 HTTP_759 HTTP_771 HTTP_772 HTTP_773 HTTP_774 HTTP_776 HTTP_777 HTTP_778 HTTP_779 HTTP_780 HTTP_781 HTTP_782 HTTP_783 HTTP_784 HTTP_785 HTTP_786 HTTP_791 HTTP_792 HTTP_797 HTTP_799 HTTP_ACCEPTED HTTP_ALREADY_REPORTED HTTP_BAD_GATEWAY HTTP_BAD_REQUEST HTTP_CONFLICT HTTP_CONTINUE HTTP_CREATED HTTP_EXPECTATION_FAILED HTTP_FAILED_DEPENDENCY HTTP_FORBIDDEN HTTP_FOUND HTTP_GATEWAY_TIMEOUT HTTP_GONE HTTP_HTTP_VERSION_NOT_SUPPORTED HTTP_IM_A_TEAPOT HTTP_IM_USED HTTP_INSUFFICIENT_STORAGE HTTP_INTERNAL_SERVER_ERROR HTTP_LENGTH_REQUIRED HTTP_LOCKED HTTP_LOOP_DETECTED HTTP_METHODS HTTP_METHOD_NOT_ALLOWED HTTP_MOVED_PERMANENTLY HTTP_MULTIPLE_CHOICES HTTP_MULTI_STATUS HTTP_NETWORK_AUTHENTICATION_REQUIRED HTTP_NON_AUTHORITATIVE_INFORMATION HTTP_NOT_ACCEPTABLE HTTP_NOT_FOUND HTTP_NOT_IMPLEMENTED HTTP_NOT_MODIFIED HTTP_NO_CONTENT HTTP_OK HTTP_PARTIAL_CONTENT HTTP_PAYMENT_REQUIRED HTTP_PERMANENT_REDIRECT HTTP_PRECONDITION_FAILED HTTP_PRECONDITION_REQUIRED HTTP_PROCESSING HTTP_PROXY_AUTHENTICATION_REQUIRED HTTP_REQUESTED_RANGE_NOT_SATISFIABLE HTTP_REQUEST_ENTITY_TOO_LARGE HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE HTTP_REQUEST_TIMEOUT HTTP_REQUEST_URI_TOO_LONG HTTP_RESET_CONTENT HTTP_SEE_OTHER HTTP_SERVICE_UNAVAILABLE HTTP_SWITCHING_PROTOCOLS HTTP_TEMPORARY_REDIRECT HTTP_TOO_MANY_REQUESTS HTTP_UNAUTHORIZED HTTP_UNAVAILABLE_FOR_LEGAL_REASONS HTTP_UNPROCESSABLE_ENTITY HTTP_UNSUPPORTED_MEDIA_TYPE HTTP_UPGRADE_REQUIRED HTTP_USE_PROXY MEDIA_GIF MEDIA_HTML MEDIA_JPEG MEDIA_JS MEDIA_JSON MEDIA_MSGPACK MEDIA_PNG MEDIA_TEXT MEDIA_XML MEDIA_YAML WEBDAV_METHODS connect current delete get get_post head options patch post put trace","title":"Variables"},{"location":"reference/hug/api/","text":"Module hug.api hug/api.py Defines the dynamically generated Hug API object that is responsible for storing all routes and state within a module Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Variables HTTP_METHODS INTRO current Functions from_object def from_object ( obj ) Returns a Hug API instance from a given object (function, class, instance) Classes API class API ( module = None , name = '' , doc = '' , cli_error_exit_codes = False , future = False ) Stores the information necessary to expose API calls within this module externally Instance variables cli cli_error_exit_codes context context_factory delete_context doc future http module name started startup_handlers Methods add_directive def add_directive ( self , directive ) add_startup_handler def add_startup_handler ( self , handler ) Adds a startup handler to the hug api directive def directive ( self , name , default = None ) Returns the loaded directive with the specified name, or default if passed name is not present directives def directives ( self ) Returns all directives applicable to this Hug API extend def extend ( self , api , route = '' , base_url = '' , http = True , cli = True , ** kwargs ) Adds handlers from a different Hug API to this one - to create a single API handlers def handlers ( self ) Returns all registered handlers attached to this API CLIInterfaceAPI class CLIInterfaceAPI ( api , version = '' , error_exit_codes = False ) Defines the CLI interface specific API Ancestors (in MRO) hug.api.InterfaceAPI Class variables api Instance variables api commands error_exit_codes output_format Methods extend def extend ( self , cli_api , command_prefix = '' , sub_command = '' , ** kwargs ) Extends this CLI api with the commands present in the provided cli_api object handlers def handlers ( self ) Returns all registered handlers attached to this API HTTPInterfaceAPI class HTTPInterfaceAPI ( api , base_url = '' ) Defines the HTTP interface specific API Ancestors (in MRO) hug.api.InterfaceAPI Class variables api Static methods base_404 def base_404 ( request , response , * args , ** kwargs ) Defines the base 404 handler Instance variables api base_url falcon middleware not_found Returns the active not found handler not_found_handlers output_format routes sinks versioned versions Methods add_exception_handler def add_exception_handler ( self , exception_type , error_handler , versions = ( None ,) ) Adds a error handler to the hug api add_middleware def add_middleware ( self , middleware ) Adds a middleware object used to process all incoming requests against the API add_sink def add_sink ( self , sink , url , base_url = '' ) determine_version def determine_version ( self , request , api_version = None ) Determines the appropriate version given the set api_version, the request header, and URL query params documentation def documentation ( self , base_url = None , api_version = None , prefix = '' ) Generates and returns documentation for this API endpoint documentation_404 def documentation_404 ( self , base_url = None ) Returns a smart 404 page that contains documentation for the written API exception_handlers def exception_handlers ( self , version = None ) extend def extend ( self , http_api , route = '' , base_url = '' , ** kwargs ) Adds handlers from a different Hug API to this one - to create a single API handlers def handlers ( self ) Returns all registered handlers attached to this API input_format def input_format ( self , content_type ) Returns the set input_format handler for the given content_type serve def serve ( self , host = '' , port = 8000 , no_documentation = False , display_intro = True ) Runs the basic hug development server against this API server def server ( self , default_not_found = True , base_url = None ) Returns a WSGI compatible API server for the given Hug API module set_input_format def set_input_format ( self , content_type , handler ) Sets an input format handler for this Hug API, given the specified content_type set_not_found_handler def set_not_found_handler ( self , handler , version = None ) Sets the not_found handler for the specified version of the api urls def urls ( self ) Returns a generator of all URLs attached to this API version_router def version_router ( self , request , response , api_version = None , versions = None , not_found = None , ** kwargs ) Intelligently routes a request to the correct handler based on the version being requested InterfaceAPI class InterfaceAPI ( api ) Defines the per-interface API which defines all shared information for a specific interface, and how it should be exposed Descendants hug.api.HTTPInterfaceAPI hug.api.CLIInterfaceAPI Instance variables api ModuleSingleton class ModuleSingleton ( / , * args , ** kwargs ) Defines the module level hug singleton Ancestors (in MRO) builtins.type Methods mro def mro ( self , / ) Return a type's method resolution order.","title":"API"},{"location":"reference/hug/api/#module-hugapi","text":"hug/api.py Defines the dynamically generated Hug API object that is responsible for storing all routes and state within a module Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.api"},{"location":"reference/hug/api/#variables","text":"HTTP_METHODS INTRO current","title":"Variables"},{"location":"reference/hug/api/#functions","text":"","title":"Functions"},{"location":"reference/hug/api/#from_object","text":"def from_object ( obj ) Returns a Hug API instance from a given object (function, class, instance)","title":"from_object"},{"location":"reference/hug/api/#classes","text":"","title":"Classes"},{"location":"reference/hug/api/#api","text":"class API ( module = None , name = '' , doc = '' , cli_error_exit_codes = False , future = False ) Stores the information necessary to expose API calls within this module externally","title":"API"},{"location":"reference/hug/api/#instance-variables","text":"cli cli_error_exit_codes context context_factory delete_context doc future http module name started startup_handlers","title":"Instance variables"},{"location":"reference/hug/api/#methods","text":"","title":"Methods"},{"location":"reference/hug/api/#add_directive","text":"def add_directive ( self , directive )","title":"add_directive"},{"location":"reference/hug/api/#add_startup_handler","text":"def add_startup_handler ( self , handler ) Adds a startup handler to the hug api","title":"add_startup_handler"},{"location":"reference/hug/api/#directive","text":"def directive ( self , name , default = None ) Returns the loaded directive with the specified name, or default if passed name is not present","title":"directive"},{"location":"reference/hug/api/#directives","text":"def directives ( self ) Returns all directives applicable to this Hug API","title":"directives"},{"location":"reference/hug/api/#extend","text":"def extend ( self , api , route = '' , base_url = '' , http = True , cli = True , ** kwargs ) Adds handlers from a different Hug API to this one - to create a single API","title":"extend"},{"location":"reference/hug/api/#handlers","text":"def handlers ( self ) Returns all registered handlers attached to this API","title":"handlers"},{"location":"reference/hug/api/#cliinterfaceapi","text":"class CLIInterfaceAPI ( api , version = '' , error_exit_codes = False ) Defines the CLI interface specific API","title":"CLIInterfaceAPI"},{"location":"reference/hug/api/#ancestors-in-mro","text":"hug.api.InterfaceAPI","title":"Ancestors (in MRO)"},{"location":"reference/hug/api/#class-variables","text":"api","title":"Class variables"},{"location":"reference/hug/api/#instance-variables_1","text":"api commands error_exit_codes output_format","title":"Instance variables"},{"location":"reference/hug/api/#methods_1","text":"","title":"Methods"},{"location":"reference/hug/api/#extend_1","text":"def extend ( self , cli_api , command_prefix = '' , sub_command = '' , ** kwargs ) Extends this CLI api with the commands present in the provided cli_api object","title":"extend"},{"location":"reference/hug/api/#handlers_1","text":"def handlers ( self ) Returns all registered handlers attached to this API","title":"handlers"},{"location":"reference/hug/api/#httpinterfaceapi","text":"class HTTPInterfaceAPI ( api , base_url = '' ) Defines the HTTP interface specific API","title":"HTTPInterfaceAPI"},{"location":"reference/hug/api/#ancestors-in-mro_1","text":"hug.api.InterfaceAPI","title":"Ancestors (in MRO)"},{"location":"reference/hug/api/#class-variables_1","text":"api","title":"Class variables"},{"location":"reference/hug/api/#static-methods","text":"","title":"Static methods"},{"location":"reference/hug/api/#base_404","text":"def base_404 ( request , response , * args , ** kwargs ) Defines the base 404 handler","title":"base_404"},{"location":"reference/hug/api/#instance-variables_2","text":"api base_url falcon middleware not_found Returns the active not found handler not_found_handlers output_format routes sinks versioned versions","title":"Instance variables"},{"location":"reference/hug/api/#methods_2","text":"","title":"Methods"},{"location":"reference/hug/api/#add_exception_handler","text":"def add_exception_handler ( self , exception_type , error_handler , versions = ( None ,) ) Adds a error handler to the hug api","title":"add_exception_handler"},{"location":"reference/hug/api/#add_middleware","text":"def add_middleware ( self , middleware ) Adds a middleware object used to process all incoming requests against the API","title":"add_middleware"},{"location":"reference/hug/api/#add_sink","text":"def add_sink ( self , sink , url , base_url = '' )","title":"add_sink"},{"location":"reference/hug/api/#determine_version","text":"def determine_version ( self , request , api_version = None ) Determines the appropriate version given the set api_version, the request header, and URL query params","title":"determine_version"},{"location":"reference/hug/api/#documentation","text":"def documentation ( self , base_url = None , api_version = None , prefix = '' ) Generates and returns documentation for this API endpoint","title":"documentation"},{"location":"reference/hug/api/#documentation_404","text":"def documentation_404 ( self , base_url = None ) Returns a smart 404 page that contains documentation for the written API","title":"documentation_404"},{"location":"reference/hug/api/#exception_handlers","text":"def exception_handlers ( self , version = None )","title":"exception_handlers"},{"location":"reference/hug/api/#extend_2","text":"def extend ( self , http_api , route = '' , base_url = '' , ** kwargs ) Adds handlers from a different Hug API to this one - to create a single API","title":"extend"},{"location":"reference/hug/api/#handlers_2","text":"def handlers ( self ) Returns all registered handlers attached to this API","title":"handlers"},{"location":"reference/hug/api/#input_format","text":"def input_format ( self , content_type ) Returns the set input_format handler for the given content_type","title":"input_format"},{"location":"reference/hug/api/#serve","text":"def serve ( self , host = '' , port = 8000 , no_documentation = False , display_intro = True ) Runs the basic hug development server against this API","title":"serve"},{"location":"reference/hug/api/#server","text":"def server ( self , default_not_found = True , base_url = None ) Returns a WSGI compatible API server for the given Hug API module","title":"server"},{"location":"reference/hug/api/#set_input_format","text":"def set_input_format ( self , content_type , handler ) Sets an input format handler for this Hug API, given the specified content_type","title":"set_input_format"},{"location":"reference/hug/api/#set_not_found_handler","text":"def set_not_found_handler ( self , handler , version = None ) Sets the not_found handler for the specified version of the api","title":"set_not_found_handler"},{"location":"reference/hug/api/#urls","text":"def urls ( self ) Returns a generator of all URLs attached to this API","title":"urls"},{"location":"reference/hug/api/#version_router","text":"def version_router ( self , request , response , api_version = None , versions = None , not_found = None , ** kwargs ) Intelligently routes a request to the correct handler based on the version being requested","title":"version_router"},{"location":"reference/hug/api/#interfaceapi","text":"class InterfaceAPI ( api ) Defines the per-interface API which defines all shared information for a specific interface, and how it should be exposed","title":"InterfaceAPI"},{"location":"reference/hug/api/#descendants","text":"hug.api.HTTPInterfaceAPI hug.api.CLIInterfaceAPI","title":"Descendants"},{"location":"reference/hug/api/#instance-variables_3","text":"api","title":"Instance variables"},{"location":"reference/hug/api/#modulesingleton","text":"class ModuleSingleton ( / , * args , ** kwargs ) Defines the module level hug singleton","title":"ModuleSingleton"},{"location":"reference/hug/api/#ancestors-in-mro_2","text":"builtins.type","title":"Ancestors (in MRO)"},{"location":"reference/hug/api/#methods_3","text":"","title":"Methods"},{"location":"reference/hug/api/#mro","text":"def mro ( self , / ) Return a type's method resolution order.","title":"mro"},{"location":"reference/hug/authentication/","text":"Module hug.authentication hug/authentication.py Provides the basic built-in authentication helper functions Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Functions api_key def api_key ( verify_user ) authenticator def authenticator ( function , challenges = () ) Wraps authentication logic, verify_user through to the authentication function. The verify_user function passed in should accept an API key and return a user object to store in the request context if authentication succeeded. basic def basic ( verify_user ) token def token ( verify_user ) verify def verify ( user , password ) Returns a simple verification callback that simply verifies that the users and password match that provided","title":"Authentication"},{"location":"reference/hug/authentication/#module-hugauthentication","text":"hug/authentication.py Provides the basic built-in authentication helper functions Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.authentication"},{"location":"reference/hug/authentication/#functions","text":"","title":"Functions"},{"location":"reference/hug/authentication/#api_key","text":"def api_key ( verify_user )","title":"api_key"},{"location":"reference/hug/authentication/#authenticator","text":"def authenticator ( function , challenges = () ) Wraps authentication logic, verify_user through to the authentication function. The verify_user function passed in should accept an API key and return a user object to store in the request context if authentication succeeded.","title":"authenticator"},{"location":"reference/hug/authentication/#basic","text":"def basic ( verify_user )","title":"basic"},{"location":"reference/hug/authentication/#token","text":"def token ( verify_user )","title":"token"},{"location":"reference/hug/authentication/#verify","text":"def verify ( user , password ) Returns a simple verification callback that simply verifies that the users and password match that provided","title":"verify"},{"location":"reference/hug/decorators/","text":"Module hug.decorators hug/decorators.py Defines the method decorators at the core of Hug's approach to creating HTTP APIs Decorators for exposing python method as HTTP methods (get, post, etc) Decorators for setting the default output and input formats used throughout an API using the framework Decorator for registering a new directive method Decorator for including another API modules handlers into the current one, with opitonal prefix route Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Variables HTTP_METHODS Functions auto_kwargs def auto_kwargs ( function ) Modifies the provided function to support kwargs by only passing along kwargs for parameters it accepts context_factory def context_factory ( apply_globally = False , api = None ) A decorator that registers a single hug context factory default_input_format def default_input_format ( content_type = 'application/json' , apply_globally = False , api = None ) A decorator that allows you to override the default output format for an API default_output_format def default_output_format ( content_type = 'application/json' , apply_globally = False , api = None , cli = False , http = True ) A decorator that allows you to override the default output format for an API delete_context def delete_context ( apply_globally = False , api = None ) A decorator that registers a single hug delete context function directive def directive ( apply_globally = False , api = None ) A decorator that registers a single hug directive extend_api def extend_api ( route = '' , api = None , base_url = '' , ** kwargs ) Extends the current api, with handlers from an imported api. Optionally provide a route that prefixes access middleware_class def middleware_class ( api = None ) Registers a middleware class reqresp_middleware def reqresp_middleware ( api = None ) Registers a middleware function that will be called on every request and response request_middleware def request_middleware ( api = None ) Registers a middleware function that will be called on every request response_middleware def response_middleware ( api = None ) Registers a middleware function that will be called on every response startup def startup ( api = None ) Runs the provided function on startup, passing in an instance of the api wraps def wraps ( function ) Enables building decorators around functions used for hug routes without changing their function signature","title":"Decorators"},{"location":"reference/hug/decorators/#module-hugdecorators","text":"hug/decorators.py Defines the method decorators at the core of Hug's approach to creating HTTP APIs Decorators for exposing python method as HTTP methods (get, post, etc) Decorators for setting the default output and input formats used throughout an API using the framework Decorator for registering a new directive method Decorator for including another API modules handlers into the current one, with opitonal prefix route Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.decorators"},{"location":"reference/hug/decorators/#variables","text":"HTTP_METHODS","title":"Variables"},{"location":"reference/hug/decorators/#functions","text":"","title":"Functions"},{"location":"reference/hug/decorators/#auto_kwargs","text":"def auto_kwargs ( function ) Modifies the provided function to support kwargs by only passing along kwargs for parameters it accepts","title":"auto_kwargs"},{"location":"reference/hug/decorators/#context_factory","text":"def context_factory ( apply_globally = False , api = None ) A decorator that registers a single hug context factory","title":"context_factory"},{"location":"reference/hug/decorators/#default_input_format","text":"def default_input_format ( content_type = 'application/json' , apply_globally = False , api = None ) A decorator that allows you to override the default output format for an API","title":"default_input_format"},{"location":"reference/hug/decorators/#default_output_format","text":"def default_output_format ( content_type = 'application/json' , apply_globally = False , api = None , cli = False , http = True ) A decorator that allows you to override the default output format for an API","title":"default_output_format"},{"location":"reference/hug/decorators/#delete_context","text":"def delete_context ( apply_globally = False , api = None ) A decorator that registers a single hug delete context function","title":"delete_context"},{"location":"reference/hug/decorators/#directive","text":"def directive ( apply_globally = False , api = None ) A decorator that registers a single hug directive","title":"directive"},{"location":"reference/hug/decorators/#extend_api","text":"def extend_api ( route = '' , api = None , base_url = '' , ** kwargs ) Extends the current api, with handlers from an imported api. Optionally provide a route that prefixes access","title":"extend_api"},{"location":"reference/hug/decorators/#middleware_class","text":"def middleware_class ( api = None ) Registers a middleware class","title":"middleware_class"},{"location":"reference/hug/decorators/#reqresp_middleware","text":"def reqresp_middleware ( api = None ) Registers a middleware function that will be called on every request and response","title":"reqresp_middleware"},{"location":"reference/hug/decorators/#request_middleware","text":"def request_middleware ( api = None ) Registers a middleware function that will be called on every request","title":"request_middleware"},{"location":"reference/hug/decorators/#response_middleware","text":"def response_middleware ( api = None ) Registers a middleware function that will be called on every response","title":"response_middleware"},{"location":"reference/hug/decorators/#startup","text":"def startup ( api = None ) Runs the provided function on startup, passing in an instance of the api","title":"startup"},{"location":"reference/hug/decorators/#wraps","text":"def wraps ( function ) Enables building decorators around functions used for hug routes without changing their function signature","title":"wraps"},{"location":"reference/hug/defaults/","text":"Module hug.defaults hug/defaults.py Defines and stores Hug's default handlers Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Variables directives input_format Functions context_factory def context_factory ( * args , ** kwargs ) delete_context def delete_context ( context , exception = None , errors = None , lacks_requirement = None )","title":"Defaults"},{"location":"reference/hug/defaults/#module-hugdefaults","text":"hug/defaults.py Defines and stores Hug's default handlers Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.defaults"},{"location":"reference/hug/defaults/#variables","text":"directives input_format","title":"Variables"},{"location":"reference/hug/defaults/#functions","text":"","title":"Functions"},{"location":"reference/hug/defaults/#context_factory","text":"def context_factory ( * args , ** kwargs )","title":"context_factory"},{"location":"reference/hug/defaults/#delete_context","text":"def delete_context ( context , exception = None , errors = None , lacks_requirement = None )","title":"delete_context"},{"location":"reference/hug/development_runner/","text":"Module hug.development_runner hug/development_runner.py Contains logic to enable execution of hug APIS locally from the command line for development use Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Variables INIT_MODULES current Functions hug def hug ( file : 'A Python file that contains a Hug API' = None , module : 'A Python module that contains a Hug API' = None , host : 'Interface to bind to' = '' , port : < hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > = 8000 , no_404_documentation : < hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8bdf6a240 > = False , manual_reload : < hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8bdf6a240 > = False , interval : < hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > = 1 , command : 'Run a command defined in the given module' = None , silent : < hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8bdf6a240 > = False ) Hug API Development Server reload_checker def reload_checker ( interval )","title":"Development Runner"},{"location":"reference/hug/development_runner/#module-hugdevelopment_runner","text":"hug/development_runner.py Contains logic to enable execution of hug APIS locally from the command line for development use Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.development_runner"},{"location":"reference/hug/development_runner/#variables","text":"INIT_MODULES current","title":"Variables"},{"location":"reference/hug/development_runner/#functions","text":"","title":"Functions"},{"location":"reference/hug/development_runner/#hug","text":"def hug ( file : 'A Python file that contains a Hug API' = None , module : 'A Python module that contains a Hug API' = None , host : 'Interface to bind to' = '' , port : < hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > = 8000 , no_404_documentation : < hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8bdf6a240 > = False , manual_reload : < hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8bdf6a240 > = False , interval : < hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > = 1 , command : 'Run a command defined in the given module' = None , silent : < hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8bdf6a240 > = False ) Hug API Development Server","title":"hug"},{"location":"reference/hug/development_runner/#reload_checker","text":"def reload_checker ( interval )","title":"reload_checker"},{"location":"reference/hug/directives/","text":"Module hug.directives hug/directives.py Defines the directives built into hug. Directives allow attaching behaviour to an API handler based simply on an argument it takes and that arguments default value. The directive gets called with the default supplied, ther request data, and api_version. The result of running the directive method is then set as the argument value. Directive attributes are always prefixed with 'hug_' Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Functions api def api ( default = None , api = None , ** kwargs ) Returns the api instance in which this API function is being ran api_version def api_version ( default = None , api_version = None , ** kwargs ) Returns the current api_version as a directive for use in both request and not request handling code cors def cors ( support = '*' , response = None , ** kwargs ) Adds the the Access-Control-Allow-Origin header to this endpoint, with the specified support documentation def documentation ( default = None , api_version = None , api = None , ** kwargs ) returns documentation for the current api module def module ( default = None , api = None , ** kwargs ) Returns the module that is running this hug API function session def session ( context_name = 'session' , request = None , ** kwargs ) Returns the session associated with the current request user def user ( default = None , request = None , ** kwargs ) Returns the current logged in user Classes CurrentAPI class CurrentAPI ( default = None , api_version = None , ** kwargs ) Returns quick access to all api functions on the current version of the api Class variables directive Instance variables api api_version Timer class Timer ( round_to = None , ** kwargs ) Keeps track of time surpased since instantiation, outputed by doing float(instance) Class variables directive Instance variables round_to start","title":"Directives"},{"location":"reference/hug/directives/#module-hugdirectives","text":"hug/directives.py Defines the directives built into hug. Directives allow attaching behaviour to an API handler based simply on an argument it takes and that arguments default value. The directive gets called with the default supplied, ther request data, and api_version. The result of running the directive method is then set as the argument value. Directive attributes are always prefixed with 'hug_' Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.directives"},{"location":"reference/hug/directives/#functions","text":"","title":"Functions"},{"location":"reference/hug/directives/#api","text":"def api ( default = None , api = None , ** kwargs ) Returns the api instance in which this API function is being ran","title":"api"},{"location":"reference/hug/directives/#api_version","text":"def api_version ( default = None , api_version = None , ** kwargs ) Returns the current api_version as a directive for use in both request and not request handling code","title":"api_version"},{"location":"reference/hug/directives/#cors","text":"def cors ( support = '*' , response = None , ** kwargs ) Adds the the Access-Control-Allow-Origin header to this endpoint, with the specified support","title":"cors"},{"location":"reference/hug/directives/#documentation","text":"def documentation ( default = None , api_version = None , api = None , ** kwargs ) returns documentation for the current api","title":"documentation"},{"location":"reference/hug/directives/#module","text":"def module ( default = None , api = None , ** kwargs ) Returns the module that is running this hug API function","title":"module"},{"location":"reference/hug/directives/#session","text":"def session ( context_name = 'session' , request = None , ** kwargs ) Returns the session associated with the current request","title":"session"},{"location":"reference/hug/directives/#user","text":"def user ( default = None , request = None , ** kwargs ) Returns the current logged in user","title":"user"},{"location":"reference/hug/directives/#classes","text":"","title":"Classes"},{"location":"reference/hug/directives/#currentapi","text":"class CurrentAPI ( default = None , api_version = None , ** kwargs ) Returns quick access to all api functions on the current version of the api","title":"CurrentAPI"},{"location":"reference/hug/directives/#class-variables","text":"directive","title":"Class variables"},{"location":"reference/hug/directives/#instance-variables","text":"api api_version","title":"Instance variables"},{"location":"reference/hug/directives/#timer","text":"class Timer ( round_to = None , ** kwargs ) Keeps track of time surpased since instantiation, outputed by doing float(instance)","title":"Timer"},{"location":"reference/hug/directives/#class-variables_1","text":"directive","title":"Class variables"},{"location":"reference/hug/directives/#instance-variables_1","text":"round_to start","title":"Instance variables"},{"location":"reference/hug/exceptions/","text":"Module hug.exceptions hug/exceptions.py Defines the custom exceptions that are part of, and support Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Classes InvalidTypeData class InvalidTypeData ( message , reasons = None ) Should be raised when data passed in doesn't match a types expectations Ancestors (in MRO) builtins.Exception builtins.BaseException Class variables args Methods with_traceback def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self. SessionNotFound class SessionNotFound ( / , * args , ** kwargs ) Should be raised when a session ID has not been found inside a session store Ancestors (in MRO) hug.exceptions.StoreKeyNotFound builtins.Exception builtins.BaseException Class variables args Methods with_traceback def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self. StoreKeyNotFound class StoreKeyNotFound ( / , * args , ** kwargs ) Should be raised when a store key has not been found inside a store Ancestors (in MRO) builtins.Exception builtins.BaseException Descendants hug.exceptions.SessionNotFound Class variables args Methods with_traceback def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"Exceptions"},{"location":"reference/hug/exceptions/#module-hugexceptions","text":"hug/exceptions.py Defines the custom exceptions that are part of, and support Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.exceptions"},{"location":"reference/hug/exceptions/#classes","text":"","title":"Classes"},{"location":"reference/hug/exceptions/#invalidtypedata","text":"class InvalidTypeData ( message , reasons = None ) Should be raised when data passed in doesn't match a types expectations","title":"InvalidTypeData"},{"location":"reference/hug/exceptions/#ancestors-in-mro","text":"builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/hug/exceptions/#class-variables","text":"args","title":"Class variables"},{"location":"reference/hug/exceptions/#methods","text":"","title":"Methods"},{"location":"reference/hug/exceptions/#with_traceback","text":"def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"with_traceback"},{"location":"reference/hug/exceptions/#sessionnotfound","text":"class SessionNotFound ( / , * args , ** kwargs ) Should be raised when a session ID has not been found inside a session store","title":"SessionNotFound"},{"location":"reference/hug/exceptions/#ancestors-in-mro_1","text":"hug.exceptions.StoreKeyNotFound builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/hug/exceptions/#class-variables_1","text":"args","title":"Class variables"},{"location":"reference/hug/exceptions/#methods_1","text":"","title":"Methods"},{"location":"reference/hug/exceptions/#with_traceback_1","text":"def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"with_traceback"},{"location":"reference/hug/exceptions/#storekeynotfound","text":"class StoreKeyNotFound ( / , * args , ** kwargs ) Should be raised when a store key has not been found inside a store","title":"StoreKeyNotFound"},{"location":"reference/hug/exceptions/#ancestors-in-mro_2","text":"builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/hug/exceptions/#descendants","text":"hug.exceptions.SessionNotFound","title":"Descendants"},{"location":"reference/hug/exceptions/#class-variables_2","text":"args","title":"Class variables"},{"location":"reference/hug/exceptions/#methods_2","text":"","title":"Methods"},{"location":"reference/hug/exceptions/#with_traceback_2","text":"def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"with_traceback"},{"location":"reference/hug/format/","text":"Module hug.format hug/format.py Defines formatting utility methods that are common both to input and output formatting and aid in general formatting of fields and content Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Variables UNDERSCORE Functions camelcase def camelcase ( text ) Converts text that may be underscored into a camelcase format content_type def content_type ( content_type ) Attaches the supplied content_type to a Hug formatting function parse_content_type def parse_content_type ( content_type ) Separates out the parameters from the content_type and returns both in a tuple (content_type, parameters) underscore def underscore ( text ) Converts text that may be camelcased into an underscored format","title":"Format"},{"location":"reference/hug/format/#module-hugformat","text":"hug/format.py Defines formatting utility methods that are common both to input and output formatting and aid in general formatting of fields and content Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.format"},{"location":"reference/hug/format/#variables","text":"UNDERSCORE","title":"Variables"},{"location":"reference/hug/format/#functions","text":"","title":"Functions"},{"location":"reference/hug/format/#camelcase","text":"def camelcase ( text ) Converts text that may be underscored into a camelcase format","title":"camelcase"},{"location":"reference/hug/format/#content_type","text":"def content_type ( content_type ) Attaches the supplied content_type to a Hug formatting function","title":"content_type"},{"location":"reference/hug/format/#parse_content_type","text":"def parse_content_type ( content_type ) Separates out the parameters from the content_type and returns both in a tuple (content_type, parameters)","title":"parse_content_type"},{"location":"reference/hug/format/#underscore","text":"def underscore ( text ) Converts text that may be camelcased into an underscored format","title":"underscore"},{"location":"reference/hug/input_format/","text":"Module hug.input_format hug/input_formats.py Defines the built-in Hug input_formatting handlers Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Functions json def json ( body , charset = 'utf-8' , ** kwargs ) Takes JSON formatted data, converting it into native Python objects json_underscore def json_underscore ( body , charset = 'utf-8' , ** kwargs ) Converts JSON formatted date to native Python objects. The keys in any JSON dict are transformed from camelcase to underscore separated words. multipart def multipart ( body , content_length = 0 , ** header_params ) Converts multipart form data into native Python objects text def text ( body , charset = 'utf-8' , ** kwargs ) Takes plain text data urlencoded def urlencoded ( body , charset = 'ascii' , ** kwargs ) Converts query strings into native Python objects","title":"Input Format"},{"location":"reference/hug/input_format/#module-huginput_format","text":"hug/input_formats.py Defines the built-in Hug input_formatting handlers Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.input_format"},{"location":"reference/hug/input_format/#functions","text":"","title":"Functions"},{"location":"reference/hug/input_format/#json","text":"def json ( body , charset = 'utf-8' , ** kwargs ) Takes JSON formatted data, converting it into native Python objects","title":"json"},{"location":"reference/hug/input_format/#json_underscore","text":"def json_underscore ( body , charset = 'utf-8' , ** kwargs ) Converts JSON formatted date to native Python objects. The keys in any JSON dict are transformed from camelcase to underscore separated words.","title":"json_underscore"},{"location":"reference/hug/input_format/#multipart","text":"def multipart ( body , content_length = 0 , ** header_params ) Converts multipart form data into native Python objects","title":"multipart"},{"location":"reference/hug/input_format/#text","text":"def text ( body , charset = 'utf-8' , ** kwargs ) Takes plain text data","title":"text"},{"location":"reference/hug/input_format/#urlencoded","text":"def urlencoded ( body , charset = 'ascii' , ** kwargs ) Converts query strings into native Python objects","title":"urlencoded"},{"location":"reference/hug/interface/","text":"Module hug.interface hug/interface.py Defines the various interface hug provides to expose routes to functions Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Variables DOC_TYPE_MAP HTTP_BAD_REQUEST Functions asyncio_call def asyncio_call ( function , * args , ** kwargs ) Classes CLI class CLI ( route , function ) Defines the Interface responsible for exposing functions to the CLI Ancestors (in MRO) hug.interface.Interface Static methods cleanup_parameters def cleanup_parameters ( parameters , exception = None ) initialize_handler def initialize_handler ( handler , value , context ) Instance variables all_parameters api defaults directives examples input_transformations interface invalid_outputs map_params on_invalid output_doc outputs parameters raise_on_invalid required requires transform validate_function wrapped Methods check_requirements def check_requirements ( self , request = None , response = None , context = None ) Checks to see if all requirements set pass if all requirements pass nothing will be returned otherwise, the error reported will be returned documentation def documentation ( self , add_to = None ) Produces general documentation for the interface output def output ( self , data , context ) Outputs the provided data using the transformations and output format specified for this CLI endpoint validate def validate ( self , input_parameters , context ) Runs all set type transformers / validators against the provided input parameters and returns any errors ExceptionRaised class ExceptionRaised ( route , * args , ** kwargs ) Defines the interface responsible for taking and transforming exceptions that occur during processing Ancestors (in MRO) hug.interface.HTTP hug.interface.Interface Class variables AUTO_INCLUDE all_parameters catch_exceptions defaults directives examples input_transformations inputs interface invalid_outputs map_params on_invalid output_doc parameters parse_body private raise_on_invalid required requires response_headers set_status transform validate_function wrapped Static methods cleanup_parameters def cleanup_parameters ( parameters , exception = None ) initialize_handler def initialize_handler ( handler , value , context ) Instance variables all_parameters api catch_exceptions defaults directives examples exclude handle input_transformations inputs interface invalid_outputs map_params on_invalid output_doc outputs parameters parse_body private raise_on_invalid required requires response_headers set_status transform validate_function wrapped Methods call_function def call_function ( self , parameters ) check_requirements def check_requirements ( self , request = None , response = None , context = None ) Checks to see if all requirements set pass if all requirements pass nothing will be returned otherwise, the error reported will be returned content_type def content_type ( self , request = None , response = None ) Returns the content type that should be used by default for this endpoint documentation def documentation ( self , add_to = None , version = None , prefix = '' , base_url = '' , url = '' ) Returns the documentation specific to an HTTP interface gather_parameters def gather_parameters ( self , request , response , context , api_version = None , ** input_parameters ) Gathers and returns all parameters that will be used for this endpoint invalid_content_type def invalid_content_type ( self , request = None , response = None ) Returns the content type that should be used by default on validation errors render_content def render_content ( self , content , context , request , response , ** kwargs ) render_errors def render_errors ( self , errors , request , response ) set_response_defaults def set_response_defaults ( self , response , request = None ) Sets up the response defaults that are defined in the URL route transform_data def transform_data ( self , data , request = None , response = None , context = None ) url def url ( self , version = None , ** kwargs ) Returns the first matching URL found for the specified arguments urls def urls ( self , version = None ) Returns all URLS that are mapped to this interface validate def validate ( self , input_parameters , context ) Runs all set type transformers / validators against the provided input parameters and returns any errors HTTP class HTTP ( route , function , catch_exceptions = True ) Defines the interface responsible for wrapping functions and exposing them via HTTP based on the route Ancestors (in MRO) hug.interface.Interface Descendants hug.interface.ExceptionRaised Class variables AUTO_INCLUDE all_parameters defaults directives interface invalid_outputs map_params output_doc parameters raise_on_invalid required requires validate_function Static methods cleanup_parameters def cleanup_parameters ( parameters , exception = None ) initialize_handler def initialize_handler ( handler , value , context ) Instance variables all_parameters api catch_exceptions defaults directives examples input_transformations inputs interface invalid_outputs map_params on_invalid output_doc outputs parameters parse_body private raise_on_invalid required requires response_headers set_status transform validate_function wrapped Methods call_function def call_function ( self , parameters ) check_requirements def check_requirements ( self , request = None , response = None , context = None ) Checks to see if all requirements set pass if all requirements pass nothing will be returned otherwise, the error reported will be returned content_type def content_type ( self , request = None , response = None ) Returns the content type that should be used by default for this endpoint documentation def documentation ( self , add_to = None , version = None , prefix = '' , base_url = '' , url = '' ) Returns the documentation specific to an HTTP interface gather_parameters def gather_parameters ( self , request , response , context , api_version = None , ** input_parameters ) Gathers and returns all parameters that will be used for this endpoint invalid_content_type def invalid_content_type ( self , request = None , response = None ) Returns the content type that should be used by default on validation errors render_content def render_content ( self , content , context , request , response , ** kwargs ) render_errors def render_errors ( self , errors , request , response ) set_response_defaults def set_response_defaults ( self , response , request = None ) Sets up the response defaults that are defined in the URL route transform_data def transform_data ( self , data , request = None , response = None , context = None ) url def url ( self , version = None , ** kwargs ) Returns the first matching URL found for the specified arguments urls def urls ( self , version = None ) Returns all URLS that are mapped to this interface validate def validate ( self , input_parameters , context ) Runs all set type transformers / validators against the provided input parameters and returns any errors Interface class Interface ( route , function ) Defines the basic hug interface object, which is responsible for wrapping a user defined function and providing all the info requested in the function as well as the route A Interface object should be created for every kind of protocal hug supports Descendants hug.interface.Local hug.interface.CLI hug.interface.HTTP Static methods cleanup_parameters def cleanup_parameters ( parameters , exception = None ) initialize_handler def initialize_handler ( handler , value , context ) Instance variables all_parameters api defaults directives examples input_transformations interface invalid_outputs map_params on_invalid output_doc outputs parameters raise_on_invalid required requires transform validate_function wrapped Methods check_requirements def check_requirements ( self , request = None , response = None , context = None ) Checks to see if all requirements set pass if all requirements pass nothing will be returned otherwise, the error reported will be returned documentation def documentation ( self , add_to = None ) Produces general documentation for the interface validate def validate ( self , input_parameters , context ) Runs all set type transformers / validators against the provided input parameters and returns any errors Interfaces class Interfaces ( function , args = None ) Defines the per-function singleton applied to hugged functions defining common data needed by all interfaces Local class Local ( route , function ) Defines the Interface responsible for exposing functions locally Ancestors (in MRO) hug.interface.Interface Class variables all_parameters defaults directives examples input_transformations interface invalid_outputs map_params on_invalid output_doc parameters raise_on_invalid required requires transform validate_function wrapped Static methods cleanup_parameters def cleanup_parameters ( parameters , exception = None ) initialize_handler def initialize_handler ( handler , value , context ) Instance variables all_parameters api defaults directives examples input_transformations interface invalid_outputs map_params on_invalid output_doc outputs parameters raise_on_invalid required requires skip_directives skip_validation transform validate_function version wrapped Methods check_requirements def check_requirements ( self , request = None , response = None , context = None ) Checks to see if all requirements set pass if all requirements pass nothing will be returned otherwise, the error reported will be returned documentation def documentation ( self , add_to = None ) Produces general documentation for the interface validate def validate ( self , input_parameters , context ) Runs all set type transformers / validators against the provided input parameters and returns any errors","title":"Interface"},{"location":"reference/hug/interface/#module-huginterface","text":"hug/interface.py Defines the various interface hug provides to expose routes to functions Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.interface"},{"location":"reference/hug/interface/#variables","text":"DOC_TYPE_MAP HTTP_BAD_REQUEST","title":"Variables"},{"location":"reference/hug/interface/#functions","text":"","title":"Functions"},{"location":"reference/hug/interface/#asyncio_call","text":"def asyncio_call ( function , * args , ** kwargs )","title":"asyncio_call"},{"location":"reference/hug/interface/#classes","text":"","title":"Classes"},{"location":"reference/hug/interface/#cli","text":"class CLI ( route , function ) Defines the Interface responsible for exposing functions to the CLI","title":"CLI"},{"location":"reference/hug/interface/#ancestors-in-mro","text":"hug.interface.Interface","title":"Ancestors (in MRO)"},{"location":"reference/hug/interface/#static-methods","text":"","title":"Static methods"},{"location":"reference/hug/interface/#cleanup_parameters","text":"def cleanup_parameters ( parameters , exception = None )","title":"cleanup_parameters"},{"location":"reference/hug/interface/#initialize_handler","text":"def initialize_handler ( handler , value , context )","title":"initialize_handler"},{"location":"reference/hug/interface/#instance-variables","text":"all_parameters api defaults directives examples input_transformations interface invalid_outputs map_params on_invalid output_doc outputs parameters raise_on_invalid required requires transform validate_function wrapped","title":"Instance variables"},{"location":"reference/hug/interface/#methods","text":"","title":"Methods"},{"location":"reference/hug/interface/#check_requirements","text":"def check_requirements ( self , request = None , response = None , context = None ) Checks to see if all requirements set pass if all requirements pass nothing will be returned otherwise, the error reported will be returned","title":"check_requirements"},{"location":"reference/hug/interface/#documentation","text":"def documentation ( self , add_to = None ) Produces general documentation for the interface","title":"documentation"},{"location":"reference/hug/interface/#output","text":"def output ( self , data , context ) Outputs the provided data using the transformations and output format specified for this CLI endpoint","title":"output"},{"location":"reference/hug/interface/#validate","text":"def validate ( self , input_parameters , context ) Runs all set type transformers / validators against the provided input parameters and returns any errors","title":"validate"},{"location":"reference/hug/interface/#exceptionraised","text":"class ExceptionRaised ( route , * args , ** kwargs ) Defines the interface responsible for taking and transforming exceptions that occur during processing","title":"ExceptionRaised"},{"location":"reference/hug/interface/#ancestors-in-mro_1","text":"hug.interface.HTTP hug.interface.Interface","title":"Ancestors (in MRO)"},{"location":"reference/hug/interface/#class-variables","text":"AUTO_INCLUDE all_parameters catch_exceptions defaults directives examples input_transformations inputs interface invalid_outputs map_params on_invalid output_doc parameters parse_body private raise_on_invalid required requires response_headers set_status transform validate_function wrapped","title":"Class variables"},{"location":"reference/hug/interface/#static-methods_1","text":"","title":"Static methods"},{"location":"reference/hug/interface/#cleanup_parameters_1","text":"def cleanup_parameters ( parameters , exception = None )","title":"cleanup_parameters"},{"location":"reference/hug/interface/#initialize_handler_1","text":"def initialize_handler ( handler , value , context )","title":"initialize_handler"},{"location":"reference/hug/interface/#instance-variables_1","text":"all_parameters api catch_exceptions defaults directives examples exclude handle input_transformations inputs interface invalid_outputs map_params on_invalid output_doc outputs parameters parse_body private raise_on_invalid required requires response_headers set_status transform validate_function wrapped","title":"Instance variables"},{"location":"reference/hug/interface/#methods_1","text":"","title":"Methods"},{"location":"reference/hug/interface/#call_function","text":"def call_function ( self , parameters )","title":"call_function"},{"location":"reference/hug/interface/#check_requirements_1","text":"def check_requirements ( self , request = None , response = None , context = None ) Checks to see if all requirements set pass if all requirements pass nothing will be returned otherwise, the error reported will be returned","title":"check_requirements"},{"location":"reference/hug/interface/#content_type","text":"def content_type ( self , request = None , response = None ) Returns the content type that should be used by default for this endpoint","title":"content_type"},{"location":"reference/hug/interface/#documentation_1","text":"def documentation ( self , add_to = None , version = None , prefix = '' , base_url = '' , url = '' ) Returns the documentation specific to an HTTP interface","title":"documentation"},{"location":"reference/hug/interface/#gather_parameters","text":"def gather_parameters ( self , request , response , context , api_version = None , ** input_parameters ) Gathers and returns all parameters that will be used for this endpoint","title":"gather_parameters"},{"location":"reference/hug/interface/#invalid_content_type","text":"def invalid_content_type ( self , request = None , response = None ) Returns the content type that should be used by default on validation errors","title":"invalid_content_type"},{"location":"reference/hug/interface/#render_content","text":"def render_content ( self , content , context , request , response , ** kwargs )","title":"render_content"},{"location":"reference/hug/interface/#render_errors","text":"def render_errors ( self , errors , request , response )","title":"render_errors"},{"location":"reference/hug/interface/#set_response_defaults","text":"def set_response_defaults ( self , response , request = None ) Sets up the response defaults that are defined in the URL route","title":"set_response_defaults"},{"location":"reference/hug/interface/#transform_data","text":"def transform_data ( self , data , request = None , response = None , context = None )","title":"transform_data"},{"location":"reference/hug/interface/#url","text":"def url ( self , version = None , ** kwargs ) Returns the first matching URL found for the specified arguments","title":"url"},{"location":"reference/hug/interface/#urls","text":"def urls ( self , version = None ) Returns all URLS that are mapped to this interface","title":"urls"},{"location":"reference/hug/interface/#validate_1","text":"def validate ( self , input_parameters , context ) Runs all set type transformers / validators against the provided input parameters and returns any errors","title":"validate"},{"location":"reference/hug/interface/#http","text":"class HTTP ( route , function , catch_exceptions = True ) Defines the interface responsible for wrapping functions and exposing them via HTTP based on the route","title":"HTTP"},{"location":"reference/hug/interface/#ancestors-in-mro_2","text":"hug.interface.Interface","title":"Ancestors (in MRO)"},{"location":"reference/hug/interface/#descendants","text":"hug.interface.ExceptionRaised","title":"Descendants"},{"location":"reference/hug/interface/#class-variables_1","text":"AUTO_INCLUDE all_parameters defaults directives interface invalid_outputs map_params output_doc parameters raise_on_invalid required requires validate_function","title":"Class variables"},{"location":"reference/hug/interface/#static-methods_2","text":"","title":"Static methods"},{"location":"reference/hug/interface/#cleanup_parameters_2","text":"def cleanup_parameters ( parameters , exception = None )","title":"cleanup_parameters"},{"location":"reference/hug/interface/#initialize_handler_2","text":"def initialize_handler ( handler , value , context )","title":"initialize_handler"},{"location":"reference/hug/interface/#instance-variables_2","text":"all_parameters api catch_exceptions defaults directives examples input_transformations inputs interface invalid_outputs map_params on_invalid output_doc outputs parameters parse_body private raise_on_invalid required requires response_headers set_status transform validate_function wrapped","title":"Instance variables"},{"location":"reference/hug/interface/#methods_2","text":"","title":"Methods"},{"location":"reference/hug/interface/#call_function_1","text":"def call_function ( self , parameters )","title":"call_function"},{"location":"reference/hug/interface/#check_requirements_2","text":"def check_requirements ( self , request = None , response = None , context = None ) Checks to see if all requirements set pass if all requirements pass nothing will be returned otherwise, the error reported will be returned","title":"check_requirements"},{"location":"reference/hug/interface/#content_type_1","text":"def content_type ( self , request = None , response = None ) Returns the content type that should be used by default for this endpoint","title":"content_type"},{"location":"reference/hug/interface/#documentation_2","text":"def documentation ( self , add_to = None , version = None , prefix = '' , base_url = '' , url = '' ) Returns the documentation specific to an HTTP interface","title":"documentation"},{"location":"reference/hug/interface/#gather_parameters_1","text":"def gather_parameters ( self , request , response , context , api_version = None , ** input_parameters ) Gathers and returns all parameters that will be used for this endpoint","title":"gather_parameters"},{"location":"reference/hug/interface/#invalid_content_type_1","text":"def invalid_content_type ( self , request = None , response = None ) Returns the content type that should be used by default on validation errors","title":"invalid_content_type"},{"location":"reference/hug/interface/#render_content_1","text":"def render_content ( self , content , context , request , response , ** kwargs )","title":"render_content"},{"location":"reference/hug/interface/#render_errors_1","text":"def render_errors ( self , errors , request , response )","title":"render_errors"},{"location":"reference/hug/interface/#set_response_defaults_1","text":"def set_response_defaults ( self , response , request = None ) Sets up the response defaults that are defined in the URL route","title":"set_response_defaults"},{"location":"reference/hug/interface/#transform_data_1","text":"def transform_data ( self , data , request = None , response = None , context = None )","title":"transform_data"},{"location":"reference/hug/interface/#url_1","text":"def url ( self , version = None , ** kwargs ) Returns the first matching URL found for the specified arguments","title":"url"},{"location":"reference/hug/interface/#urls_1","text":"def urls ( self , version = None ) Returns all URLS that are mapped to this interface","title":"urls"},{"location":"reference/hug/interface/#validate_2","text":"def validate ( self , input_parameters , context ) Runs all set type transformers / validators against the provided input parameters and returns any errors","title":"validate"},{"location":"reference/hug/interface/#interface","text":"class Interface ( route , function ) Defines the basic hug interface object, which is responsible for wrapping a user defined function and providing all the info requested in the function as well as the route A Interface object should be created for every kind of protocal hug supports","title":"Interface"},{"location":"reference/hug/interface/#descendants_1","text":"hug.interface.Local hug.interface.CLI hug.interface.HTTP","title":"Descendants"},{"location":"reference/hug/interface/#static-methods_3","text":"","title":"Static methods"},{"location":"reference/hug/interface/#cleanup_parameters_3","text":"def cleanup_parameters ( parameters , exception = None )","title":"cleanup_parameters"},{"location":"reference/hug/interface/#initialize_handler_3","text":"def initialize_handler ( handler , value , context )","title":"initialize_handler"},{"location":"reference/hug/interface/#instance-variables_3","text":"all_parameters api defaults directives examples input_transformations interface invalid_outputs map_params on_invalid output_doc outputs parameters raise_on_invalid required requires transform validate_function wrapped","title":"Instance variables"},{"location":"reference/hug/interface/#methods_3","text":"","title":"Methods"},{"location":"reference/hug/interface/#check_requirements_3","text":"def check_requirements ( self , request = None , response = None , context = None ) Checks to see if all requirements set pass if all requirements pass nothing will be returned otherwise, the error reported will be returned","title":"check_requirements"},{"location":"reference/hug/interface/#documentation_3","text":"def documentation ( self , add_to = None ) Produces general documentation for the interface","title":"documentation"},{"location":"reference/hug/interface/#validate_3","text":"def validate ( self , input_parameters , context ) Runs all set type transformers / validators against the provided input parameters and returns any errors","title":"validate"},{"location":"reference/hug/interface/#interfaces","text":"class Interfaces ( function , args = None ) Defines the per-function singleton applied to hugged functions defining common data needed by all interfaces","title":"Interfaces"},{"location":"reference/hug/interface/#local","text":"class Local ( route , function ) Defines the Interface responsible for exposing functions locally","title":"Local"},{"location":"reference/hug/interface/#ancestors-in-mro_3","text":"hug.interface.Interface","title":"Ancestors (in MRO)"},{"location":"reference/hug/interface/#class-variables_2","text":"all_parameters defaults directives examples input_transformations interface invalid_outputs map_params on_invalid output_doc parameters raise_on_invalid required requires transform validate_function wrapped","title":"Class variables"},{"location":"reference/hug/interface/#static-methods_4","text":"","title":"Static methods"},{"location":"reference/hug/interface/#cleanup_parameters_4","text":"def cleanup_parameters ( parameters , exception = None )","title":"cleanup_parameters"},{"location":"reference/hug/interface/#initialize_handler_4","text":"def initialize_handler ( handler , value , context )","title":"initialize_handler"},{"location":"reference/hug/interface/#instance-variables_4","text":"all_parameters api defaults directives examples input_transformations interface invalid_outputs map_params on_invalid output_doc outputs parameters raise_on_invalid required requires skip_directives skip_validation transform validate_function version wrapped","title":"Instance variables"},{"location":"reference/hug/interface/#methods_4","text":"","title":"Methods"},{"location":"reference/hug/interface/#check_requirements_4","text":"def check_requirements ( self , request = None , response = None , context = None ) Checks to see if all requirements set pass if all requirements pass nothing will be returned otherwise, the error reported will be returned","title":"check_requirements"},{"location":"reference/hug/interface/#documentation_4","text":"def documentation ( self , add_to = None ) Produces general documentation for the interface","title":"documentation"},{"location":"reference/hug/interface/#validate_4","text":"def validate ( self , input_parameters , context ) Runs all set type transformers / validators against the provided input parameters and returns any errors","title":"validate"},{"location":"reference/hug/introspect/","text":"Module hug.introspect hug/introspect.py Defines built in hug functions to aid in introspection Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Functions arguments def arguments ( function , extra_arguments = 0 ) Returns the name of all arguments a function takes generate_accepted_kwargs def generate_accepted_kwargs ( function , * named_arguments ) Dynamically creates a function that when called with dictionary of arguments will produce a kwarg that's compatible with the supplied function is_coroutine def is_coroutine ( function ) Returns True if the passed in function is a coroutine is_method def is_method ( function ) Returns True if the passed in function is identified as a method (NOT a function) name def name ( function ) Returns the name of a function takes_all_arguments def takes_all_arguments ( function , * named_arguments ) Returns True if all supplied arguments are found in the function takes_args def takes_args ( function ) Returns True if the supplied functions takes extra non-keyword arguments takes_arguments def takes_arguments ( function , * named_arguments ) Returns the arguments that a function takes from a list of requested arguments takes_kwargs def takes_kwargs ( function ) Returns True if the supplied function takes keyword arguments","title":"Introspect"},{"location":"reference/hug/introspect/#module-hugintrospect","text":"hug/introspect.py Defines built in hug functions to aid in introspection Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.introspect"},{"location":"reference/hug/introspect/#functions","text":"","title":"Functions"},{"location":"reference/hug/introspect/#arguments","text":"def arguments ( function , extra_arguments = 0 ) Returns the name of all arguments a function takes","title":"arguments"},{"location":"reference/hug/introspect/#generate_accepted_kwargs","text":"def generate_accepted_kwargs ( function , * named_arguments ) Dynamically creates a function that when called with dictionary of arguments will produce a kwarg that's compatible with the supplied function","title":"generate_accepted_kwargs"},{"location":"reference/hug/introspect/#is_coroutine","text":"def is_coroutine ( function ) Returns True if the passed in function is a coroutine","title":"is_coroutine"},{"location":"reference/hug/introspect/#is_method","text":"def is_method ( function ) Returns True if the passed in function is identified as a method (NOT a function)","title":"is_method"},{"location":"reference/hug/introspect/#name","text":"def name ( function ) Returns the name of a function","title":"name"},{"location":"reference/hug/introspect/#takes_all_arguments","text":"def takes_all_arguments ( function , * named_arguments ) Returns True if all supplied arguments are found in the function","title":"takes_all_arguments"},{"location":"reference/hug/introspect/#takes_args","text":"def takes_args ( function ) Returns True if the supplied functions takes extra non-keyword arguments","title":"takes_args"},{"location":"reference/hug/introspect/#takes_arguments","text":"def takes_arguments ( function , * named_arguments ) Returns the arguments that a function takes from a list of requested arguments","title":"takes_arguments"},{"location":"reference/hug/introspect/#takes_kwargs","text":"def takes_kwargs ( function ) Returns True if the supplied function takes keyword arguments","title":"takes_kwargs"},{"location":"reference/hug/json_module/","text":"Module hug.json_module Variables HUG_USE_UJSON Classes dumps_proxy class dumps_proxy ( / , * args , ** kwargs ) Proxies the call so non supported kwargs are skipped and it enables escape_forward_slashes to simulate built-in json","title":"Json Module"},{"location":"reference/hug/json_module/#module-hugjson_module","text":"","title":"Module hug.json_module"},{"location":"reference/hug/json_module/#variables","text":"HUG_USE_UJSON","title":"Variables"},{"location":"reference/hug/json_module/#classes","text":"","title":"Classes"},{"location":"reference/hug/json_module/#dumps_proxy","text":"class dumps_proxy ( / , * args , ** kwargs ) Proxies the call so non supported kwargs are skipped and it enables escape_forward_slashes to simulate built-in json","title":"dumps_proxy"},{"location":"reference/hug/middleware/","text":"Module hug.middleware hug/middleware.py A collection of useful middlewares to automate common hug functionality Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Classes CORSMiddleware class CORSMiddleware ( api , allow_origins : 'list' = None , allow_credentials : bool = True , max_age : 'int' = None ) A middleware for allowing cross-origin request sharing (CORS) Adds appropriate Access-Control-* headers to the HTTP responses returned from the hug API, especially for HTTP OPTIONS responses used in CORS preflighting. Instance variables allow_credentials allow_origins api max_age Methods match_route def match_route ( self , reqpath ) Match a request with parameter to it's corresponding route process_response def process_response ( self , request , response , resource , req_succeeded ) Add CORS headers to the response LogMiddleware class LogMiddleware ( logger = None ) A middleware that logs all incoming requests and outgoing responses that make their way through the API Instance variables logger Methods process_request def process_request ( self , request , response ) Logs the basic endpoint requested process_response def process_response ( self , request , response , resource , req_succeeded ) Logs the basic data returned by the API SessionMiddleware class SessionMiddleware ( store , context_name = 'session' , cookie_name = 'sid' , cookie_expires = None , cookie_max_age = None , cookie_domain = None , cookie_path = None , cookie_secure = True , cookie_http_only = True ) Simple session middleware. Injects a session dictionary into the context of a request, sets a session cookie, and stores/restores data via a coupled store object. A session store object must implement the following methods: * get(session_id) - return session data * exists(session_id) - return boolean if session ID exists or not * set(session_id, session_data) - save session data for given session ID The name of the context key can be set via the 'context_name' argument. The cookie arguments are the same as for falcons set_cookie() function, just prefixed with 'cookie_'. Instance variables context_name cookie_domain cookie_expires cookie_http_only cookie_max_age cookie_name cookie_path cookie_secure store Methods generate_sid def generate_sid ( self ) Generate a UUID4 string. process_request def process_request ( self , request , response ) Get session ID from cookie, load corresponding session data from coupled store and inject session data into the request context. process_response def process_response ( self , request , response , resource , req_succeeded ) Save request context in coupled store object. Set cookie containing a session ID.","title":"Middleware"},{"location":"reference/hug/middleware/#module-hugmiddleware","text":"hug/middleware.py A collection of useful middlewares to automate common hug functionality Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.middleware"},{"location":"reference/hug/middleware/#classes","text":"","title":"Classes"},{"location":"reference/hug/middleware/#corsmiddleware","text":"class CORSMiddleware ( api , allow_origins : 'list' = None , allow_credentials : bool = True , max_age : 'int' = None ) A middleware for allowing cross-origin request sharing (CORS) Adds appropriate Access-Control-* headers to the HTTP responses returned from the hug API, especially for HTTP OPTIONS responses used in CORS preflighting.","title":"CORSMiddleware"},{"location":"reference/hug/middleware/#instance-variables","text":"allow_credentials allow_origins api max_age","title":"Instance variables"},{"location":"reference/hug/middleware/#methods","text":"","title":"Methods"},{"location":"reference/hug/middleware/#match_route","text":"def match_route ( self , reqpath ) Match a request with parameter to it's corresponding route","title":"match_route"},{"location":"reference/hug/middleware/#process_response","text":"def process_response ( self , request , response , resource , req_succeeded ) Add CORS headers to the response","title":"process_response"},{"location":"reference/hug/middleware/#logmiddleware","text":"class LogMiddleware ( logger = None ) A middleware that logs all incoming requests and outgoing responses that make their way through the API","title":"LogMiddleware"},{"location":"reference/hug/middleware/#instance-variables_1","text":"logger","title":"Instance variables"},{"location":"reference/hug/middleware/#methods_1","text":"","title":"Methods"},{"location":"reference/hug/middleware/#process_request","text":"def process_request ( self , request , response ) Logs the basic endpoint requested","title":"process_request"},{"location":"reference/hug/middleware/#process_response_1","text":"def process_response ( self , request , response , resource , req_succeeded ) Logs the basic data returned by the API","title":"process_response"},{"location":"reference/hug/middleware/#sessionmiddleware","text":"class SessionMiddleware ( store , context_name = 'session' , cookie_name = 'sid' , cookie_expires = None , cookie_max_age = None , cookie_domain = None , cookie_path = None , cookie_secure = True , cookie_http_only = True ) Simple session middleware. Injects a session dictionary into the context of a request, sets a session cookie, and stores/restores data via a coupled store object. A session store object must implement the following methods: * get(session_id) - return session data * exists(session_id) - return boolean if session ID exists or not * set(session_id, session_data) - save session data for given session ID The name of the context key can be set via the 'context_name' argument. The cookie arguments are the same as for falcons set_cookie() function, just prefixed with 'cookie_'.","title":"SessionMiddleware"},{"location":"reference/hug/middleware/#instance-variables_2","text":"context_name cookie_domain cookie_expires cookie_http_only cookie_max_age cookie_name cookie_path cookie_secure store","title":"Instance variables"},{"location":"reference/hug/middleware/#methods_2","text":"","title":"Methods"},{"location":"reference/hug/middleware/#generate_sid","text":"def generate_sid ( self ) Generate a UUID4 string.","title":"generate_sid"},{"location":"reference/hug/middleware/#process_request_1","text":"def process_request ( self , request , response ) Get session ID from cookie, load corresponding session data from coupled store and inject session data into the request context.","title":"process_request"},{"location":"reference/hug/middleware/#process_response_2","text":"def process_response ( self , request , response , resource , req_succeeded ) Save request context in coupled store object. Set cookie containing a session ID.","title":"process_response"},{"location":"reference/hug/output_format/","text":"Module hug.output_format hug/output_format.py Defines Hug's built-in output formatting methods Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Variables HTTP_NOT_FOUND IMAGE_TYPES RE_ACCEPT_QUALITY VIDEO_TYPES image_type json_converters video_mime video_type Functions 3gp_video def 3 gp_video ( data , ** kwargs ) 3gp formatted video accept def accept ( handlers , default = None , error = 'The requested content type does not match any of those allowed' ) Returns a content in a different format based on the clients defined accepted content type, should pass in a dict with the following format: { '[content-type]' : action , ... } accept_quality def accept_quality ( accept , default = 1 ) Separates out the quality score from the accepted content_type avi_video def avi_video ( data , ** kwargs ) avi formatted video bmp_image def bmp_image ( data , ** kwargs ) bmp formatted image cur_image def cur_image ( data , ** kwargs ) cur formatted image dcx_image def dcx_image ( data , ** kwargs ) dcx formatted image eps_image def eps_image ( data , ** kwargs ) eps formatted image file def file ( data , response , ** kwargs ) A dynamically retrieved file flc_image def flc_image ( data , ** kwargs ) flc formatted image fli_image def fli_image ( data , ** kwargs ) fli formatted image flv_video def flv_video ( data , ** kwargs ) flv formatted video gbr_image def gbr_image ( data , ** kwargs ) gbr formatted image gd_image def gd_image ( data , ** kwargs ) gd formatted image gif_image def gif_image ( data , ** kwargs ) gif formatted image html def html ( content , ** kwargs ) HTML (Hypertext Markup Language) icns_image def icns_image ( data , ** kwargs ) icns formatted image ico_image def ico_image ( data , ** kwargs ) ico formatted image im_image def im_image ( data , ** kwargs ) im formatted image image def image ( image_format , doc = None ) Dynamically creates an image type handler for the specified image type imt_image def imt_image ( data , ** kwargs ) imt formatted image iptc_image def iptc_image ( data , ** kwargs ) iptc formatted image jpeg_image def jpeg_image ( data , ** kwargs ) jpeg formatted image jpg_image def jpg_image ( data , ** kwargs ) jpg formatted image json def json ( content , request = None , response = None , ensure_ascii = False , ** kwargs ) JSON (Javascript Serialized Object Notation) json_camelcase def json_camelcase ( content , ** kwargs ) JSON (Javascript Serialized Object Notation) with all keys camelCased json_convert def json_convert ( * kinds ) Registers the wrapped method as a JSON converter for the provided types. NOTE: custom converters are always globally applied m3u8_video def m3u8_video ( data , ** kwargs ) m3u8 formatted video mcidas_image def mcidas_image ( data , ** kwargs ) mcidas formatted image mov_video def mov_video ( data , ** kwargs ) mov formatted video mp4_video def mp4_video ( data , ** kwargs ) mp4 formatted video mpo_image def mpo_image ( data , ** kwargs ) mpo formatted image msp_image def msp_image ( data , ** kwargs ) msp formatted image naa_image def naa_image ( data , ** kwargs ) naa formatted image numpy_boolable def numpy_boolable ( item ) numpy_byte_decodeable def numpy_byte_decodeable ( item ) numpy_floatable def numpy_floatable ( item ) numpy_integerable def numpy_integerable ( item ) numpy_listable def numpy_listable ( item ) numpy_stringable def numpy_stringable ( item ) on_content_type def on_content_type ( handlers , default = None , error = 'The requested content type does not match any of those allowed' ) Returns a content in a different format based on the clients provided content type, should pass in a dict with the following format: { '[content-type]' : action , ... } on_valid def on_valid ( valid_content_type , on_invalid =< cyfunction json at 0x7fb8be25d270 > ) Renders as the specified content type only if no errors are found in the provided data object pcd_image def pcd_image ( data , ** kwargs ) pcd formatted image pcx_image def pcx_image ( data , ** kwargs ) pcx formatted image png_image def png_image ( data , ** kwargs ) png formatted image ppm_image def ppm_image ( data , ** kwargs ) ppm formatted image prefix def prefix ( handlers , default = None , error = 'The requested prefix does not match any of those allowed' ) Returns a content in a different format based on the prefix placed at the end of the URL route should pass in a dict with the following format: { '[prefix]' : action , ... } pretty_json def pretty_json ( content , ** kwargs ) JSON (Javascript Serialized Object Notion) pretty printed and indented psd_image def psd_image ( data , ** kwargs ) psd formatted image sgi_image def sgi_image ( data , ** kwargs ) sgi formatted image spider_image def spider_image ( data , ** kwargs ) spider formatted image suffix def suffix ( handlers , default = None , error = 'The requested suffix does not match any of those allowed' ) Returns a content in a different format based on the suffix placed at the end of the URL route should pass in a dict with the following format: { '[suffix]' : action , ... } svg_image def svg_image ( data , ** kwargs ) svg formatted image svg_xml_image def svg_xml_image ( data , ** kwargs ) svg+xml formatted image text def text ( content , ** kwargs ) Free form UTF-8 text tga_image def tga_image ( data , ** kwargs ) tga formatted image tiff_image def tiff_image ( data , ** kwargs ) tiff formatted image ts_video def ts_video ( data , ** kwargs ) ts formatted video video def video ( video_type , video_mime , doc = None ) Dynamically creates a video type handler for the specified video type wal_image def wal_image ( data , ** kwargs ) wal formatted image webp_image def webp_image ( data , ** kwargs ) webp formatted image wmv_video def wmv_video ( data , ** kwargs ) wmv formatted video xbm_image def xbm_image ( data , ** kwargs ) xbm formatted image xpm_image def xpm_image ( data , ** kwargs ) xpm formatted image","title":"Output Format"},{"location":"reference/hug/output_format/#module-hugoutput_format","text":"hug/output_format.py Defines Hug's built-in output formatting methods Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.output_format"},{"location":"reference/hug/output_format/#variables","text":"HTTP_NOT_FOUND IMAGE_TYPES RE_ACCEPT_QUALITY VIDEO_TYPES image_type json_converters video_mime video_type","title":"Variables"},{"location":"reference/hug/output_format/#functions","text":"","title":"Functions"},{"location":"reference/hug/output_format/#3gp_video","text":"def 3 gp_video ( data , ** kwargs ) 3gp formatted video","title":"3gp_video"},{"location":"reference/hug/output_format/#accept","text":"def accept ( handlers , default = None , error = 'The requested content type does not match any of those allowed' ) Returns a content in a different format based on the clients defined accepted content type, should pass in a dict with the following format: { '[content-type]' : action , ... }","title":"accept"},{"location":"reference/hug/output_format/#accept_quality","text":"def accept_quality ( accept , default = 1 ) Separates out the quality score from the accepted content_type","title":"accept_quality"},{"location":"reference/hug/output_format/#avi_video","text":"def avi_video ( data , ** kwargs ) avi formatted video","title":"avi_video"},{"location":"reference/hug/output_format/#bmp_image","text":"def bmp_image ( data , ** kwargs ) bmp formatted image","title":"bmp_image"},{"location":"reference/hug/output_format/#cur_image","text":"def cur_image ( data , ** kwargs ) cur formatted image","title":"cur_image"},{"location":"reference/hug/output_format/#dcx_image","text":"def dcx_image ( data , ** kwargs ) dcx formatted image","title":"dcx_image"},{"location":"reference/hug/output_format/#eps_image","text":"def eps_image ( data , ** kwargs ) eps formatted image","title":"eps_image"},{"location":"reference/hug/output_format/#file","text":"def file ( data , response , ** kwargs ) A dynamically retrieved file","title":"file"},{"location":"reference/hug/output_format/#flc_image","text":"def flc_image ( data , ** kwargs ) flc formatted image","title":"flc_image"},{"location":"reference/hug/output_format/#fli_image","text":"def fli_image ( data , ** kwargs ) fli formatted image","title":"fli_image"},{"location":"reference/hug/output_format/#flv_video","text":"def flv_video ( data , ** kwargs ) flv formatted video","title":"flv_video"},{"location":"reference/hug/output_format/#gbr_image","text":"def gbr_image ( data , ** kwargs ) gbr formatted image","title":"gbr_image"},{"location":"reference/hug/output_format/#gd_image","text":"def gd_image ( data , ** kwargs ) gd formatted image","title":"gd_image"},{"location":"reference/hug/output_format/#gif_image","text":"def gif_image ( data , ** kwargs ) gif formatted image","title":"gif_image"},{"location":"reference/hug/output_format/#html","text":"def html ( content , ** kwargs ) HTML (Hypertext Markup Language)","title":"html"},{"location":"reference/hug/output_format/#icns_image","text":"def icns_image ( data , ** kwargs ) icns formatted image","title":"icns_image"},{"location":"reference/hug/output_format/#ico_image","text":"def ico_image ( data , ** kwargs ) ico formatted image","title":"ico_image"},{"location":"reference/hug/output_format/#im_image","text":"def im_image ( data , ** kwargs ) im formatted image","title":"im_image"},{"location":"reference/hug/output_format/#image","text":"def image ( image_format , doc = None ) Dynamically creates an image type handler for the specified image type","title":"image"},{"location":"reference/hug/output_format/#imt_image","text":"def imt_image ( data , ** kwargs ) imt formatted image","title":"imt_image"},{"location":"reference/hug/output_format/#iptc_image","text":"def iptc_image ( data , ** kwargs ) iptc formatted image","title":"iptc_image"},{"location":"reference/hug/output_format/#jpeg_image","text":"def jpeg_image ( data , ** kwargs ) jpeg formatted image","title":"jpeg_image"},{"location":"reference/hug/output_format/#jpg_image","text":"def jpg_image ( data , ** kwargs ) jpg formatted image","title":"jpg_image"},{"location":"reference/hug/output_format/#json","text":"def json ( content , request = None , response = None , ensure_ascii = False , ** kwargs ) JSON (Javascript Serialized Object Notation)","title":"json"},{"location":"reference/hug/output_format/#json_camelcase","text":"def json_camelcase ( content , ** kwargs ) JSON (Javascript Serialized Object Notation) with all keys camelCased","title":"json_camelcase"},{"location":"reference/hug/output_format/#json_convert","text":"def json_convert ( * kinds ) Registers the wrapped method as a JSON converter for the provided types. NOTE: custom converters are always globally applied","title":"json_convert"},{"location":"reference/hug/output_format/#m3u8_video","text":"def m3u8_video ( data , ** kwargs ) m3u8 formatted video","title":"m3u8_video"},{"location":"reference/hug/output_format/#mcidas_image","text":"def mcidas_image ( data , ** kwargs ) mcidas formatted image","title":"mcidas_image"},{"location":"reference/hug/output_format/#mov_video","text":"def mov_video ( data , ** kwargs ) mov formatted video","title":"mov_video"},{"location":"reference/hug/output_format/#mp4_video","text":"def mp4_video ( data , ** kwargs ) mp4 formatted video","title":"mp4_video"},{"location":"reference/hug/output_format/#mpo_image","text":"def mpo_image ( data , ** kwargs ) mpo formatted image","title":"mpo_image"},{"location":"reference/hug/output_format/#msp_image","text":"def msp_image ( data , ** kwargs ) msp formatted image","title":"msp_image"},{"location":"reference/hug/output_format/#naa_image","text":"def naa_image ( data , ** kwargs ) naa formatted image","title":"naa_image"},{"location":"reference/hug/output_format/#numpy_boolable","text":"def numpy_boolable ( item )","title":"numpy_boolable"},{"location":"reference/hug/output_format/#numpy_byte_decodeable","text":"def numpy_byte_decodeable ( item )","title":"numpy_byte_decodeable"},{"location":"reference/hug/output_format/#numpy_floatable","text":"def numpy_floatable ( item )","title":"numpy_floatable"},{"location":"reference/hug/output_format/#numpy_integerable","text":"def numpy_integerable ( item )","title":"numpy_integerable"},{"location":"reference/hug/output_format/#numpy_listable","text":"def numpy_listable ( item )","title":"numpy_listable"},{"location":"reference/hug/output_format/#numpy_stringable","text":"def numpy_stringable ( item )","title":"numpy_stringable"},{"location":"reference/hug/output_format/#on_content_type","text":"def on_content_type ( handlers , default = None , error = 'The requested content type does not match any of those allowed' ) Returns a content in a different format based on the clients provided content type, should pass in a dict with the following format: { '[content-type]' : action , ... }","title":"on_content_type"},{"location":"reference/hug/output_format/#on_valid","text":"def on_valid ( valid_content_type , on_invalid =< cyfunction json at 0x7fb8be25d270 > ) Renders as the specified content type only if no errors are found in the provided data object","title":"on_valid"},{"location":"reference/hug/output_format/#pcd_image","text":"def pcd_image ( data , ** kwargs ) pcd formatted image","title":"pcd_image"},{"location":"reference/hug/output_format/#pcx_image","text":"def pcx_image ( data , ** kwargs ) pcx formatted image","title":"pcx_image"},{"location":"reference/hug/output_format/#png_image","text":"def png_image ( data , ** kwargs ) png formatted image","title":"png_image"},{"location":"reference/hug/output_format/#ppm_image","text":"def ppm_image ( data , ** kwargs ) ppm formatted image","title":"ppm_image"},{"location":"reference/hug/output_format/#prefix","text":"def prefix ( handlers , default = None , error = 'The requested prefix does not match any of those allowed' ) Returns a content in a different format based on the prefix placed at the end of the URL route should pass in a dict with the following format: { '[prefix]' : action , ... }","title":"prefix"},{"location":"reference/hug/output_format/#pretty_json","text":"def pretty_json ( content , ** kwargs ) JSON (Javascript Serialized Object Notion) pretty printed and indented","title":"pretty_json"},{"location":"reference/hug/output_format/#psd_image","text":"def psd_image ( data , ** kwargs ) psd formatted image","title":"psd_image"},{"location":"reference/hug/output_format/#sgi_image","text":"def sgi_image ( data , ** kwargs ) sgi formatted image","title":"sgi_image"},{"location":"reference/hug/output_format/#spider_image","text":"def spider_image ( data , ** kwargs ) spider formatted image","title":"spider_image"},{"location":"reference/hug/output_format/#suffix","text":"def suffix ( handlers , default = None , error = 'The requested suffix does not match any of those allowed' ) Returns a content in a different format based on the suffix placed at the end of the URL route should pass in a dict with the following format: { '[suffix]' : action , ... }","title":"suffix"},{"location":"reference/hug/output_format/#svg_image","text":"def svg_image ( data , ** kwargs ) svg formatted image","title":"svg_image"},{"location":"reference/hug/output_format/#svg_xml_image","text":"def svg_xml_image ( data , ** kwargs ) svg+xml formatted image","title":"svg_xml_image"},{"location":"reference/hug/output_format/#text","text":"def text ( content , ** kwargs ) Free form UTF-8 text","title":"text"},{"location":"reference/hug/output_format/#tga_image","text":"def tga_image ( data , ** kwargs ) tga formatted image","title":"tga_image"},{"location":"reference/hug/output_format/#tiff_image","text":"def tiff_image ( data , ** kwargs ) tiff formatted image","title":"tiff_image"},{"location":"reference/hug/output_format/#ts_video","text":"def ts_video ( data , ** kwargs ) ts formatted video","title":"ts_video"},{"location":"reference/hug/output_format/#video","text":"def video ( video_type , video_mime , doc = None ) Dynamically creates a video type handler for the specified video type","title":"video"},{"location":"reference/hug/output_format/#wal_image","text":"def wal_image ( data , ** kwargs ) wal formatted image","title":"wal_image"},{"location":"reference/hug/output_format/#webp_image","text":"def webp_image ( data , ** kwargs ) webp formatted image","title":"webp_image"},{"location":"reference/hug/output_format/#wmv_video","text":"def wmv_video ( data , ** kwargs ) wmv formatted video","title":"wmv_video"},{"location":"reference/hug/output_format/#xbm_image","text":"def xbm_image ( data , ** kwargs ) xbm formatted image","title":"xbm_image"},{"location":"reference/hug/output_format/#xpm_image","text":"def xpm_image ( data , ** kwargs ) xpm formatted image","title":"xpm_image"},{"location":"reference/hug/redirect/","text":"Module hug.redirect hug/redirect.py Implements convenience redirect methods that raise a redirection exception when called Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Functions found def found ( location ) Redirects to the specified location using HTTP 302 status code not_found def not_found ( * args , ** kwargs ) Redirects request handling to the not found render permanent def permanent ( location ) Redirects to the specified location using HTTP 301 status code see_other def see_other ( location ) Redirects to the specified location using HTTP 303 status code temporary def temporary ( location ) Redirects to the specified location using HTTP 307 status code to def to ( location , code = '302 Found' ) Redirects to the specified location using the provided http_code (defaults to HTTP_302 FOUND)","title":"Redirect"},{"location":"reference/hug/redirect/#module-hugredirect","text":"hug/redirect.py Implements convenience redirect methods that raise a redirection exception when called Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.redirect"},{"location":"reference/hug/redirect/#functions","text":"","title":"Functions"},{"location":"reference/hug/redirect/#found","text":"def found ( location ) Redirects to the specified location using HTTP 302 status code","title":"found"},{"location":"reference/hug/redirect/#not_found","text":"def not_found ( * args , ** kwargs ) Redirects request handling to the not found render","title":"not_found"},{"location":"reference/hug/redirect/#permanent","text":"def permanent ( location ) Redirects to the specified location using HTTP 301 status code","title":"permanent"},{"location":"reference/hug/redirect/#see_other","text":"def see_other ( location ) Redirects to the specified location using HTTP 303 status code","title":"see_other"},{"location":"reference/hug/redirect/#temporary","text":"def temporary ( location ) Redirects to the specified location using HTTP 307 status code","title":"temporary"},{"location":"reference/hug/redirect/#to","text":"def to ( location , code = '302 Found' ) Redirects to the specified location using the provided http_code (defaults to HTTP_302 FOUND)","title":"to"},{"location":"reference/hug/route/","text":"Module hug.route hug/route.py Defines user usable routers Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Variables HTTP_METHODS connect delete get get_post head method method_handler object options patch post put put_post trace Classes API class API ( api ) Provides a convient way to route functions to a single API independent of where they live Instance variables api Methods cli def cli ( self , * args , ** kwargs ) Defines a CLI function that should be routed by this API connect def connect ( self , * args , ** kwargs ) Builds a new CONNECT HTTP route that is registered to this API delete def delete ( self , * args , ** kwargs ) Builds a new DELETE HTTP route that is registered to this API exception def exception ( self , * args , ** kwargs ) Defines how this API should handle the provided exceptions get def get ( self , * args , ** kwargs ) Builds a new GET HTTP route that is registered to this API get_post def get_post ( self , * args , ** kwargs ) Builds a new GET or POST HTTP route that is registered to this API head def head ( self , * args , ** kwargs ) Builds a new HEAD HTTP route that is registered to this API http def http ( self , * args , ** kwargs ) Starts the process of building a new HTTP route linked to this API instance not_found def not_found ( self , * args , ** kwargs ) Defines the handler that should handle not found requests against this API object def object ( self , * args , ** kwargs ) Registers a class based router to this API options def options ( self , * args , ** kwargs ) Builds a new OPTIONS HTTP route that is registered to this API patch def patch ( self , * args , ** kwargs ) Builds a new PATCH HTTP route that is registered to this API post def post ( self , * args , ** kwargs ) Builds a new POST HTTP route that is registered to this API put def put ( self , * args , ** kwargs ) Builds a new PUT HTTP route that is registered to this API put_post def put_post ( self , * args , ** kwargs ) Builds a new PUT or POST HTTP route that is registered to this API sink def sink ( self , * args , ** kwargs ) Define URL prefixes/handler matches where everything under the URL prefix should be handled static def static ( self , * args , ** kwargs ) Define the routes to static files the API should expose trace def trace ( self , * args , ** kwargs ) Builds a new TRACE HTTP route that is registered to this API urls def urls ( self , * args , ** kwargs ) DEPRECATED: for backwords compatibility with < hug 2.2.0. API.http should be used instead. Starts the process of building a new URL HTTP route linked to this API instance Object class Object ( urls = None , accept = ( 'CONNECT' , 'DELETE' , 'GET' , 'HEAD' , 'OPTIONS' , 'PATCH' , 'POST' , 'PUT' , 'TRACE' ), output = None , ** kwargs ) Defines a router for classes and objects Ancestors (in MRO) hug.routing.URLRouter hug.routing.HTTPRouter hug.routing.InternalValidation hug.routing.Router Class variables route Methods accept def accept ( self , * accept , ** overrides ) Sets a list of HTTP methods this router should accept add_response_headers def add_response_headers ( self , headers , ** overrides ) Adds the specified response headers while keeping existing ones in-tact allow_origins def allow_origins ( self , * origins , methods = None , max_age = None , credentials = None , headers = None , ** overrides ) Convenience method for quickly allowing other resources to access this one api def api ( self , api , ** overrides ) Sets the API that should contain this route cache def cache ( self , private = False , max_age = 31536000 , s_maxage = None , no_cache = False , no_store = False , must_revalidate = False , ** overrides ) Convenience method for quickly adding cache header to route call def call ( self , ** overrides ) Sets the acceptable HTTP method to all known cli def cli ( self , method ) Registers a method on an Object as a CLI route connect def connect ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to CONNECT defaults def defaults ( self , defaults , ** overrides ) Sets the custom defaults that will be used for custom parameters delete def delete ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to DELETE doesnt_require def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route examples def examples ( self , * examples , ** overrides ) Sets the examples that the route should use get def get ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to a GET get_post def get_post ( self , ** overrides ) Exposes a Python method externally under both the HTTP POST and GET methods head def head ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to HEAD http def http ( self , ** overrides ) Sets the acceptable HTTP method to all known http_methods def http_methods ( self , urls = None , ** route_data ) Creates routes from a class, where the class method names should line up to HTTP METHOD types map_params def map_params ( self , ** map_params ) Map interface specific params to an internal name representation on_invalid def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False . options def options ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to OPTIONS output def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route output_invalid def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route. parameters def parameters ( self , parameters , ** overrides ) Sets the custom parameters that will be used instead of those found introspecting the decorated function parse_body def parse_body ( self , automatic = True , ** overrides ) Tells hug to automatically parse the input body if it matches a registered input format patch def patch ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to PATCH post def post ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to POST prefixes def prefixes ( self , * prefixes , ** overrides ) Sets the prefixes supported by the route put def put ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to PUT put_post def put_post ( self , ** overrides ) Exposes a Python method externally under both the HTTP POST and PUT methods raise_on_invalid def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them requires def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route response_headers def response_headers ( self , headers , ** overrides ) Sets the response headers automatically injected by the router set_status def set_status ( self , status , ** overrides ) Sets the status that will be returned by default suffixes def suffixes ( self , * suffixes , ** overrides ) Sets the suffixes supported by the route trace def trace ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to TRACE transform def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format urls def urls ( self , * urls , ** overrides ) Sets the URLs that will map to this API call validate def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler versions def versions ( self , supported , ** overrides ) Sets the versions that this route should be compatiable with where def where ( self , ** overrides )","title":"Route"},{"location":"reference/hug/route/#module-hugroute","text":"hug/route.py Defines user usable routers Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.route"},{"location":"reference/hug/route/#variables","text":"HTTP_METHODS connect delete get get_post head method method_handler object options patch post put put_post trace","title":"Variables"},{"location":"reference/hug/route/#classes","text":"","title":"Classes"},{"location":"reference/hug/route/#api","text":"class API ( api ) Provides a convient way to route functions to a single API independent of where they live","title":"API"},{"location":"reference/hug/route/#instance-variables","text":"api","title":"Instance variables"},{"location":"reference/hug/route/#methods","text":"","title":"Methods"},{"location":"reference/hug/route/#cli","text":"def cli ( self , * args , ** kwargs ) Defines a CLI function that should be routed by this API","title":"cli"},{"location":"reference/hug/route/#connect","text":"def connect ( self , * args , ** kwargs ) Builds a new CONNECT HTTP route that is registered to this API","title":"connect"},{"location":"reference/hug/route/#delete","text":"def delete ( self , * args , ** kwargs ) Builds a new DELETE HTTP route that is registered to this API","title":"delete"},{"location":"reference/hug/route/#exception","text":"def exception ( self , * args , ** kwargs ) Defines how this API should handle the provided exceptions","title":"exception"},{"location":"reference/hug/route/#get","text":"def get ( self , * args , ** kwargs ) Builds a new GET HTTP route that is registered to this API","title":"get"},{"location":"reference/hug/route/#get_post","text":"def get_post ( self , * args , ** kwargs ) Builds a new GET or POST HTTP route that is registered to this API","title":"get_post"},{"location":"reference/hug/route/#head","text":"def head ( self , * args , ** kwargs ) Builds a new HEAD HTTP route that is registered to this API","title":"head"},{"location":"reference/hug/route/#http","text":"def http ( self , * args , ** kwargs ) Starts the process of building a new HTTP route linked to this API instance","title":"http"},{"location":"reference/hug/route/#not_found","text":"def not_found ( self , * args , ** kwargs ) Defines the handler that should handle not found requests against this API","title":"not_found"},{"location":"reference/hug/route/#object","text":"def object ( self , * args , ** kwargs ) Registers a class based router to this API","title":"object"},{"location":"reference/hug/route/#options","text":"def options ( self , * args , ** kwargs ) Builds a new OPTIONS HTTP route that is registered to this API","title":"options"},{"location":"reference/hug/route/#patch","text":"def patch ( self , * args , ** kwargs ) Builds a new PATCH HTTP route that is registered to this API","title":"patch"},{"location":"reference/hug/route/#post","text":"def post ( self , * args , ** kwargs ) Builds a new POST HTTP route that is registered to this API","title":"post"},{"location":"reference/hug/route/#put","text":"def put ( self , * args , ** kwargs ) Builds a new PUT HTTP route that is registered to this API","title":"put"},{"location":"reference/hug/route/#put_post","text":"def put_post ( self , * args , ** kwargs ) Builds a new PUT or POST HTTP route that is registered to this API","title":"put_post"},{"location":"reference/hug/route/#sink","text":"def sink ( self , * args , ** kwargs ) Define URL prefixes/handler matches where everything under the URL prefix should be handled","title":"sink"},{"location":"reference/hug/route/#static","text":"def static ( self , * args , ** kwargs ) Define the routes to static files the API should expose","title":"static"},{"location":"reference/hug/route/#trace","text":"def trace ( self , * args , ** kwargs ) Builds a new TRACE HTTP route that is registered to this API","title":"trace"},{"location":"reference/hug/route/#urls","text":"def urls ( self , * args , ** kwargs ) DEPRECATED: for backwords compatibility with < hug 2.2.0. API.http should be used instead. Starts the process of building a new URL HTTP route linked to this API instance","title":"urls"},{"location":"reference/hug/route/#object_1","text":"class Object ( urls = None , accept = ( 'CONNECT' , 'DELETE' , 'GET' , 'HEAD' , 'OPTIONS' , 'PATCH' , 'POST' , 'PUT' , 'TRACE' ), output = None , ** kwargs ) Defines a router for classes and objects","title":"Object"},{"location":"reference/hug/route/#ancestors-in-mro","text":"hug.routing.URLRouter hug.routing.HTTPRouter hug.routing.InternalValidation hug.routing.Router","title":"Ancestors (in MRO)"},{"location":"reference/hug/route/#class-variables","text":"route","title":"Class variables"},{"location":"reference/hug/route/#methods_1","text":"","title":"Methods"},{"location":"reference/hug/route/#accept","text":"def accept ( self , * accept , ** overrides ) Sets a list of HTTP methods this router should accept","title":"accept"},{"location":"reference/hug/route/#add_response_headers","text":"def add_response_headers ( self , headers , ** overrides ) Adds the specified response headers while keeping existing ones in-tact","title":"add_response_headers"},{"location":"reference/hug/route/#allow_origins","text":"def allow_origins ( self , * origins , methods = None , max_age = None , credentials = None , headers = None , ** overrides ) Convenience method for quickly allowing other resources to access this one","title":"allow_origins"},{"location":"reference/hug/route/#api_1","text":"def api ( self , api , ** overrides ) Sets the API that should contain this route","title":"api"},{"location":"reference/hug/route/#cache","text":"def cache ( self , private = False , max_age = 31536000 , s_maxage = None , no_cache = False , no_store = False , must_revalidate = False , ** overrides ) Convenience method for quickly adding cache header to route","title":"cache"},{"location":"reference/hug/route/#call","text":"def call ( self , ** overrides ) Sets the acceptable HTTP method to all known","title":"call"},{"location":"reference/hug/route/#cli_1","text":"def cli ( self , method ) Registers a method on an Object as a CLI route","title":"cli"},{"location":"reference/hug/route/#connect_1","text":"def connect ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to CONNECT","title":"connect"},{"location":"reference/hug/route/#defaults","text":"def defaults ( self , defaults , ** overrides ) Sets the custom defaults that will be used for custom parameters","title":"defaults"},{"location":"reference/hug/route/#delete_1","text":"def delete ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to DELETE","title":"delete"},{"location":"reference/hug/route/#doesnt_require","text":"def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route","title":"doesnt_require"},{"location":"reference/hug/route/#examples","text":"def examples ( self , * examples , ** overrides ) Sets the examples that the route should use","title":"examples"},{"location":"reference/hug/route/#get_1","text":"def get ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to a GET","title":"get"},{"location":"reference/hug/route/#get_post_1","text":"def get_post ( self , ** overrides ) Exposes a Python method externally under both the HTTP POST and GET methods","title":"get_post"},{"location":"reference/hug/route/#head_1","text":"def head ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to HEAD","title":"head"},{"location":"reference/hug/route/#http_1","text":"def http ( self , ** overrides ) Sets the acceptable HTTP method to all known","title":"http"},{"location":"reference/hug/route/#http_methods","text":"def http_methods ( self , urls = None , ** route_data ) Creates routes from a class, where the class method names should line up to HTTP METHOD types","title":"http_methods"},{"location":"reference/hug/route/#map_params","text":"def map_params ( self , ** map_params ) Map interface specific params to an internal name representation","title":"map_params"},{"location":"reference/hug/route/#on_invalid","text":"def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False .","title":"on_invalid"},{"location":"reference/hug/route/#options_1","text":"def options ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to OPTIONS","title":"options"},{"location":"reference/hug/route/#output","text":"def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route","title":"output"},{"location":"reference/hug/route/#output_invalid","text":"def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route.","title":"output_invalid"},{"location":"reference/hug/route/#parameters","text":"def parameters ( self , parameters , ** overrides ) Sets the custom parameters that will be used instead of those found introspecting the decorated function","title":"parameters"},{"location":"reference/hug/route/#parse_body","text":"def parse_body ( self , automatic = True , ** overrides ) Tells hug to automatically parse the input body if it matches a registered input format","title":"parse_body"},{"location":"reference/hug/route/#patch_1","text":"def patch ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to PATCH","title":"patch"},{"location":"reference/hug/route/#post_1","text":"def post ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to POST","title":"post"},{"location":"reference/hug/route/#prefixes","text":"def prefixes ( self , * prefixes , ** overrides ) Sets the prefixes supported by the route","title":"prefixes"},{"location":"reference/hug/route/#put_1","text":"def put ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to PUT","title":"put"},{"location":"reference/hug/route/#put_post_1","text":"def put_post ( self , ** overrides ) Exposes a Python method externally under both the HTTP POST and PUT methods","title":"put_post"},{"location":"reference/hug/route/#raise_on_invalid","text":"def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them","title":"raise_on_invalid"},{"location":"reference/hug/route/#requires","text":"def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route","title":"requires"},{"location":"reference/hug/route/#response_headers","text":"def response_headers ( self , headers , ** overrides ) Sets the response headers automatically injected by the router","title":"response_headers"},{"location":"reference/hug/route/#set_status","text":"def set_status ( self , status , ** overrides ) Sets the status that will be returned by default","title":"set_status"},{"location":"reference/hug/route/#suffixes","text":"def suffixes ( self , * suffixes , ** overrides ) Sets the suffixes supported by the route","title":"suffixes"},{"location":"reference/hug/route/#trace_1","text":"def trace ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to TRACE","title":"trace"},{"location":"reference/hug/route/#transform","text":"def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format","title":"transform"},{"location":"reference/hug/route/#urls_1","text":"def urls ( self , * urls , ** overrides ) Sets the URLs that will map to this API call","title":"urls"},{"location":"reference/hug/route/#validate","text":"def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler","title":"validate"},{"location":"reference/hug/route/#versions","text":"def versions ( self , supported , ** overrides ) Sets the versions that this route should be compatiable with","title":"versions"},{"location":"reference/hug/route/#where","text":"def where ( self , ** overrides )","title":"where"},{"location":"reference/hug/routing/","text":"Module hug.routing hug/routing.py Defines the chainable classes responsible for defining the routing of Python functions for use with Falcon and CLIs Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Variables HTTP_METHODS Classes CLIRouter class CLIRouter ( name = None , version = None , doc = None , ** kwargs ) The CLIRouter provides a chainable router that can be used to route a CLI command to a Python function Ancestors (in MRO) hug.routing.Router Class variables route Instance variables route Methods api def api ( self , api , ** overrides ) Sets the API that should contain this route doc def doc ( self , documentation , ** overrides ) Sets the documentation for the CLI interface doesnt_require def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route map_params def map_params ( self , ** map_params ) Map interface specific params to an internal name representation name def name ( self , name , ** overrides ) Sets the name for the CLI interface output def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route requires def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route transform def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format validate def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler version def version ( self , version , ** overrides ) Sets the version for the CLI interface where def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values ExceptionRouter class ExceptionRouter ( exceptions = ( < class ' Exception '>,), exclude = (), output = None , ** kwargs ) Provides a chainable router that can be used to route exceptions thrown during request handling Ancestors (in MRO) hug.routing.HTTPRouter hug.routing.InternalValidation hug.routing.Router Class variables route Instance variables route Methods add_response_headers def add_response_headers ( self , headers , ** overrides ) Adds the specified response headers while keeping existing ones in-tact allow_origins def allow_origins ( self , * origins , methods = None , max_age = None , credentials = None , headers = None , ** overrides ) Convenience method for quickly allowing other resources to access this one api def api ( self , api , ** overrides ) Sets the API that should contain this route cache def cache ( self , private = False , max_age = 31536000 , s_maxage = None , no_cache = False , no_store = False , must_revalidate = False , ** overrides ) Convenience method for quickly adding cache header to route defaults def defaults ( self , defaults , ** overrides ) Sets the custom defaults that will be used for custom parameters doesnt_require def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route map_params def map_params ( self , ** map_params ) Map interface specific params to an internal name representation on_invalid def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False . output def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route output_invalid def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route. parameters def parameters ( self , parameters , ** overrides ) Sets the custom parameters that will be used instead of those found introspecting the decorated function parse_body def parse_body ( self , automatic = True , ** overrides ) Tells hug to automatically parse the input body if it matches a registered input format raise_on_invalid def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them requires def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route response_headers def response_headers ( self , headers , ** overrides ) Sets the response headers automatically injected by the router set_status def set_status ( self , status , ** overrides ) Sets the status that will be returned by default transform def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format validate def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler versions def versions ( self , supported , ** overrides ) Sets the versions that this route should be compatiable with where def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values HTTPRouter class HTTPRouter ( versions =< built - in function any > , parse_body = False , parameters = None , defaults = None , status = None , response_headers = None , private = False , inputs = None , ** kwargs ) The HTTPRouter provides the base concept of a router from an HTTPRequest to a Python function Ancestors (in MRO) hug.routing.InternalValidation hug.routing.Router Descendants hug.routing.NotFoundRouter hug.routing.SinkRouter hug.routing.ExceptionRouter hug.routing.URLRouter Class variables route Instance variables route Methods add_response_headers def add_response_headers ( self , headers , ** overrides ) Adds the specified response headers while keeping existing ones in-tact allow_origins def allow_origins ( self , * origins , methods = None , max_age = None , credentials = None , headers = None , ** overrides ) Convenience method for quickly allowing other resources to access this one api def api ( self , api , ** overrides ) Sets the API that should contain this route cache def cache ( self , private = False , max_age = 31536000 , s_maxage = None , no_cache = False , no_store = False , must_revalidate = False , ** overrides ) Convenience method for quickly adding cache header to route defaults def defaults ( self , defaults , ** overrides ) Sets the custom defaults that will be used for custom parameters doesnt_require def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route map_params def map_params ( self , ** map_params ) Map interface specific params to an internal name representation on_invalid def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False . output def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route output_invalid def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route. parameters def parameters ( self , parameters , ** overrides ) Sets the custom parameters that will be used instead of those found introspecting the decorated function parse_body def parse_body ( self , automatic = True , ** overrides ) Tells hug to automatically parse the input body if it matches a registered input format raise_on_invalid def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them requires def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route response_headers def response_headers ( self , headers , ** overrides ) Sets the response headers automatically injected by the router set_status def set_status ( self , status , ** overrides ) Sets the status that will be returned by default transform def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format validate def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler versions def versions ( self , supported , ** overrides ) Sets the versions that this route should be compatiable with where def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values InternalValidation class InternalValidation ( raise_on_invalid = False , on_invalid = None , output_invalid = None , ** kwargs ) Defines the base route for interfaces that define their own internal validation Ancestors (in MRO) hug.routing.Router Descendants hug.routing.LocalRouter hug.routing.HTTPRouter Class variables route Instance variables route Methods api def api ( self , api , ** overrides ) Sets the API that should contain this route doesnt_require def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route map_params def map_params ( self , ** map_params ) Map interface specific params to an internal name representation on_invalid def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False . output def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route output_invalid def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route. raise_on_invalid def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them requires def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route transform def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format validate def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler where def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values LocalRouter class LocalRouter ( directives = True , validate = True , version = None , ** kwargs ) The LocalRouter defines how interfaces should be handled when accessed locally from within Python code Ancestors (in MRO) hug.routing.InternalValidation hug.routing.Router Class variables route Instance variables route Methods api def api ( self , api , ** overrides ) Sets the API that should contain this route directives def directives ( self , use = True , ** kwargs ) doesnt_require def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route map_params def map_params ( self , ** map_params ) Map interface specific params to an internal name representation on_invalid def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False . output def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route output_invalid def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route. raise_on_invalid def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them requires def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route transform def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format validate def validate ( self , enforce = True , ** kwargs ) version def version ( self , supported , ** kwargs ) where def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values NotFoundRouter class NotFoundRouter ( output = None , versions =< built - in function any > , status = '404 Not Found' , ** kwargs ) Provides a chainable router that can be used to route 404'd request to a Python function Ancestors (in MRO) hug.routing.HTTPRouter hug.routing.InternalValidation hug.routing.Router Class variables route Instance variables route Methods add_response_headers def add_response_headers ( self , headers , ** overrides ) Adds the specified response headers while keeping existing ones in-tact allow_origins def allow_origins ( self , * origins , methods = None , max_age = None , credentials = None , headers = None , ** overrides ) Convenience method for quickly allowing other resources to access this one api def api ( self , api , ** overrides ) Sets the API that should contain this route cache def cache ( self , private = False , max_age = 31536000 , s_maxage = None , no_cache = False , no_store = False , must_revalidate = False , ** overrides ) Convenience method for quickly adding cache header to route defaults def defaults ( self , defaults , ** overrides ) Sets the custom defaults that will be used for custom parameters doesnt_require def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route map_params def map_params ( self , ** map_params ) Map interface specific params to an internal name representation on_invalid def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False . output def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route output_invalid def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route. parameters def parameters ( self , parameters , ** overrides ) Sets the custom parameters that will be used instead of those found introspecting the decorated function parse_body def parse_body ( self , automatic = True , ** overrides ) Tells hug to automatically parse the input body if it matches a registered input format raise_on_invalid def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them requires def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route response_headers def response_headers ( self , headers , ** overrides ) Sets the response headers automatically injected by the router set_status def set_status ( self , status , ** overrides ) Sets the status that will be returned by default transform def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format validate def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler versions def versions ( self , supported , ** overrides ) Sets the versions that this route should be compatiable with where def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values Router class Router ( transform = None , output = None , validate = None , api = None , requires = (), map_params = None , args = None , ** kwargs ) The base chainable router object Descendants hug.routing.CLIRouter hug.routing.InternalValidation Instance variables route Methods api def api ( self , api , ** overrides ) Sets the API that should contain this route doesnt_require def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route map_params def map_params ( self , ** map_params ) Map interface specific params to an internal name representation output def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route requires def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route transform def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format validate def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler where def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values SinkRouter class SinkRouter ( urls = None , output = None , ** kwargs ) Provides a chainable router that can be used to route all routes pass a certain base URL (essentially route/*) Ancestors (in MRO) hug.routing.HTTPRouter hug.routing.InternalValidation hug.routing.Router Descendants hug.routing.StaticRouter Class variables route Instance variables route Methods add_response_headers def add_response_headers ( self , headers , ** overrides ) Adds the specified response headers while keeping existing ones in-tact allow_origins def allow_origins ( self , * origins , methods = None , max_age = None , credentials = None , headers = None , ** overrides ) Convenience method for quickly allowing other resources to access this one api def api ( self , api , ** overrides ) Sets the API that should contain this route cache def cache ( self , private = False , max_age = 31536000 , s_maxage = None , no_cache = False , no_store = False , must_revalidate = False , ** overrides ) Convenience method for quickly adding cache header to route defaults def defaults ( self , defaults , ** overrides ) Sets the custom defaults that will be used for custom parameters doesnt_require def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route map_params def map_params ( self , ** map_params ) Map interface specific params to an internal name representation on_invalid def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False . output def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route output_invalid def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route. parameters def parameters ( self , parameters , ** overrides ) Sets the custom parameters that will be used instead of those found introspecting the decorated function parse_body def parse_body ( self , automatic = True , ** overrides ) Tells hug to automatically parse the input body if it matches a registered input format raise_on_invalid def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them requires def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route response_headers def response_headers ( self , headers , ** overrides ) Sets the response headers automatically injected by the router set_status def set_status ( self , status , ** overrides ) Sets the status that will be returned by default transform def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format validate def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler versions def versions ( self , supported , ** overrides ) Sets the versions that this route should be compatiable with where def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values StaticRouter class StaticRouter ( urls = None , output =< cyfunction file at 0x7fb8be2708e8 > , cache = False , ** kwargs ) Provides a chainable router that can be used to return static files automatically from a set of directories Ancestors (in MRO) hug.routing.SinkRouter hug.routing.HTTPRouter hug.routing.InternalValidation hug.routing.Router Instance variables route Methods add_response_headers def add_response_headers ( self , headers , ** overrides ) Adds the specified response headers while keeping existing ones in-tact allow_origins def allow_origins ( self , * origins , methods = None , max_age = None , credentials = None , headers = None , ** overrides ) Convenience method for quickly allowing other resources to access this one api def api ( self , api , ** overrides ) Sets the API that should contain this route cache def cache ( self , private = False , max_age = 31536000 , s_maxage = None , no_cache = False , no_store = False , must_revalidate = False , ** overrides ) Convenience method for quickly adding cache header to route defaults def defaults ( self , defaults , ** overrides ) Sets the custom defaults that will be used for custom parameters doesnt_require def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route map_params def map_params ( self , ** map_params ) Map interface specific params to an internal name representation on_invalid def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False . output def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route output_invalid def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route. parameters def parameters ( self , parameters , ** overrides ) Sets the custom parameters that will be used instead of those found introspecting the decorated function parse_body def parse_body ( self , automatic = True , ** overrides ) Tells hug to automatically parse the input body if it matches a registered input format raise_on_invalid def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them requires def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route response_headers def response_headers ( self , headers , ** overrides ) Sets the response headers automatically injected by the router set_status def set_status ( self , status , ** overrides ) Sets the status that will be returned by default transform def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format validate def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler versions def versions ( self , supported , ** overrides ) Sets the versions that this route should be compatiable with where def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values URLRouter class URLRouter ( urls = None , accept = ( 'CONNECT' , 'DELETE' , 'GET' , 'HEAD' , 'OPTIONS' , 'PATCH' , 'POST' , 'PUT' , 'TRACE' ), output = None , examples = (), versions =< built - in function any > , suffixes = (), prefixes = (), response_headers = None , parse_body = True , ** kwargs ) Provides a chainable router that can be used to route a URL to a Python function Ancestors (in MRO) hug.routing.HTTPRouter hug.routing.InternalValidation hug.routing.Router Descendants hug.route.Object Class variables route Instance variables route Methods accept def accept ( self , * accept , ** overrides ) Sets a list of HTTP methods this router should accept add_response_headers def add_response_headers ( self , headers , ** overrides ) Adds the specified response headers while keeping existing ones in-tact allow_origins def allow_origins ( self , * origins , methods = None , max_age = None , credentials = None , headers = None , ** overrides ) Convenience method for quickly allowing other resources to access this one api def api ( self , api , ** overrides ) Sets the API that should contain this route cache def cache ( self , private = False , max_age = 31536000 , s_maxage = None , no_cache = False , no_store = False , must_revalidate = False , ** overrides ) Convenience method for quickly adding cache header to route call def call ( self , ** overrides ) Sets the acceptable HTTP method to all known connect def connect ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to CONNECT defaults def defaults ( self , defaults , ** overrides ) Sets the custom defaults that will be used for custom parameters delete def delete ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to DELETE doesnt_require def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route examples def examples ( self , * examples , ** overrides ) Sets the examples that the route should use get def get ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to a GET get_post def get_post ( self , ** overrides ) Exposes a Python method externally under both the HTTP POST and GET methods head def head ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to HEAD http def http ( self , ** overrides ) Sets the acceptable HTTP method to all known map_params def map_params ( self , ** map_params ) Map interface specific params to an internal name representation on_invalid def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False . options def options ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to OPTIONS output def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route output_invalid def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route. parameters def parameters ( self , parameters , ** overrides ) Sets the custom parameters that will be used instead of those found introspecting the decorated function parse_body def parse_body ( self , automatic = True , ** overrides ) Tells hug to automatically parse the input body if it matches a registered input format patch def patch ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to PATCH post def post ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to POST prefixes def prefixes ( self , * prefixes , ** overrides ) Sets the prefixes supported by the route put def put ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to PUT put_post def put_post ( self , ** overrides ) Exposes a Python method externally under both the HTTP POST and PUT methods raise_on_invalid def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them requires def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route response_headers def response_headers ( self , headers , ** overrides ) Sets the response headers automatically injected by the router set_status def set_status ( self , status , ** overrides ) Sets the status that will be returned by default suffixes def suffixes ( self , * suffixes , ** overrides ) Sets the suffixes supported by the route trace def trace ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to TRACE transform def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format urls def urls ( self , * urls , ** overrides ) Sets the URLs that will map to this API call validate def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler versions def versions ( self , supported , ** overrides ) Sets the versions that this route should be compatiable with where def where ( self , ** overrides )","title":"Routing"},{"location":"reference/hug/routing/#module-hugrouting","text":"hug/routing.py Defines the chainable classes responsible for defining the routing of Python functions for use with Falcon and CLIs Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.routing"},{"location":"reference/hug/routing/#variables","text":"HTTP_METHODS","title":"Variables"},{"location":"reference/hug/routing/#classes","text":"","title":"Classes"},{"location":"reference/hug/routing/#clirouter","text":"class CLIRouter ( name = None , version = None , doc = None , ** kwargs ) The CLIRouter provides a chainable router that can be used to route a CLI command to a Python function","title":"CLIRouter"},{"location":"reference/hug/routing/#ancestors-in-mro","text":"hug.routing.Router","title":"Ancestors (in MRO)"},{"location":"reference/hug/routing/#class-variables","text":"route","title":"Class variables"},{"location":"reference/hug/routing/#instance-variables","text":"route","title":"Instance variables"},{"location":"reference/hug/routing/#methods","text":"","title":"Methods"},{"location":"reference/hug/routing/#api","text":"def api ( self , api , ** overrides ) Sets the API that should contain this route","title":"api"},{"location":"reference/hug/routing/#doc","text":"def doc ( self , documentation , ** overrides ) Sets the documentation for the CLI interface","title":"doc"},{"location":"reference/hug/routing/#doesnt_require","text":"def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route","title":"doesnt_require"},{"location":"reference/hug/routing/#map_params","text":"def map_params ( self , ** map_params ) Map interface specific params to an internal name representation","title":"map_params"},{"location":"reference/hug/routing/#name","text":"def name ( self , name , ** overrides ) Sets the name for the CLI interface","title":"name"},{"location":"reference/hug/routing/#output","text":"def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route","title":"output"},{"location":"reference/hug/routing/#requires","text":"def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route","title":"requires"},{"location":"reference/hug/routing/#transform","text":"def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format","title":"transform"},{"location":"reference/hug/routing/#validate","text":"def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler","title":"validate"},{"location":"reference/hug/routing/#version","text":"def version ( self , version , ** overrides ) Sets the version for the CLI interface","title":"version"},{"location":"reference/hug/routing/#where","text":"def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values","title":"where"},{"location":"reference/hug/routing/#exceptionrouter","text":"class ExceptionRouter ( exceptions = ( < class ' Exception '>,), exclude = (), output = None , ** kwargs ) Provides a chainable router that can be used to route exceptions thrown during request handling","title":"ExceptionRouter"},{"location":"reference/hug/routing/#ancestors-in-mro_1","text":"hug.routing.HTTPRouter hug.routing.InternalValidation hug.routing.Router","title":"Ancestors (in MRO)"},{"location":"reference/hug/routing/#class-variables_1","text":"route","title":"Class variables"},{"location":"reference/hug/routing/#instance-variables_1","text":"route","title":"Instance variables"},{"location":"reference/hug/routing/#methods_1","text":"","title":"Methods"},{"location":"reference/hug/routing/#add_response_headers","text":"def add_response_headers ( self , headers , ** overrides ) Adds the specified response headers while keeping existing ones in-tact","title":"add_response_headers"},{"location":"reference/hug/routing/#allow_origins","text":"def allow_origins ( self , * origins , methods = None , max_age = None , credentials = None , headers = None , ** overrides ) Convenience method for quickly allowing other resources to access this one","title":"allow_origins"},{"location":"reference/hug/routing/#api_1","text":"def api ( self , api , ** overrides ) Sets the API that should contain this route","title":"api"},{"location":"reference/hug/routing/#cache","text":"def cache ( self , private = False , max_age = 31536000 , s_maxage = None , no_cache = False , no_store = False , must_revalidate = False , ** overrides ) Convenience method for quickly adding cache header to route","title":"cache"},{"location":"reference/hug/routing/#defaults","text":"def defaults ( self , defaults , ** overrides ) Sets the custom defaults that will be used for custom parameters","title":"defaults"},{"location":"reference/hug/routing/#doesnt_require_1","text":"def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route","title":"doesnt_require"},{"location":"reference/hug/routing/#map_params_1","text":"def map_params ( self , ** map_params ) Map interface specific params to an internal name representation","title":"map_params"},{"location":"reference/hug/routing/#on_invalid","text":"def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False .","title":"on_invalid"},{"location":"reference/hug/routing/#output_1","text":"def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route","title":"output"},{"location":"reference/hug/routing/#output_invalid","text":"def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route.","title":"output_invalid"},{"location":"reference/hug/routing/#parameters","text":"def parameters ( self , parameters , ** overrides ) Sets the custom parameters that will be used instead of those found introspecting the decorated function","title":"parameters"},{"location":"reference/hug/routing/#parse_body","text":"def parse_body ( self , automatic = True , ** overrides ) Tells hug to automatically parse the input body if it matches a registered input format","title":"parse_body"},{"location":"reference/hug/routing/#raise_on_invalid","text":"def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them","title":"raise_on_invalid"},{"location":"reference/hug/routing/#requires_1","text":"def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route","title":"requires"},{"location":"reference/hug/routing/#response_headers","text":"def response_headers ( self , headers , ** overrides ) Sets the response headers automatically injected by the router","title":"response_headers"},{"location":"reference/hug/routing/#set_status","text":"def set_status ( self , status , ** overrides ) Sets the status that will be returned by default","title":"set_status"},{"location":"reference/hug/routing/#transform_1","text":"def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format","title":"transform"},{"location":"reference/hug/routing/#validate_1","text":"def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler","title":"validate"},{"location":"reference/hug/routing/#versions","text":"def versions ( self , supported , ** overrides ) Sets the versions that this route should be compatiable with","title":"versions"},{"location":"reference/hug/routing/#where_1","text":"def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values","title":"where"},{"location":"reference/hug/routing/#httprouter","text":"class HTTPRouter ( versions =< built - in function any > , parse_body = False , parameters = None , defaults = None , status = None , response_headers = None , private = False , inputs = None , ** kwargs ) The HTTPRouter provides the base concept of a router from an HTTPRequest to a Python function","title":"HTTPRouter"},{"location":"reference/hug/routing/#ancestors-in-mro_2","text":"hug.routing.InternalValidation hug.routing.Router","title":"Ancestors (in MRO)"},{"location":"reference/hug/routing/#descendants","text":"hug.routing.NotFoundRouter hug.routing.SinkRouter hug.routing.ExceptionRouter hug.routing.URLRouter","title":"Descendants"},{"location":"reference/hug/routing/#class-variables_2","text":"route","title":"Class variables"},{"location":"reference/hug/routing/#instance-variables_2","text":"route","title":"Instance variables"},{"location":"reference/hug/routing/#methods_2","text":"","title":"Methods"},{"location":"reference/hug/routing/#add_response_headers_1","text":"def add_response_headers ( self , headers , ** overrides ) Adds the specified response headers while keeping existing ones in-tact","title":"add_response_headers"},{"location":"reference/hug/routing/#allow_origins_1","text":"def allow_origins ( self , * origins , methods = None , max_age = None , credentials = None , headers = None , ** overrides ) Convenience method for quickly allowing other resources to access this one","title":"allow_origins"},{"location":"reference/hug/routing/#api_2","text":"def api ( self , api , ** overrides ) Sets the API that should contain this route","title":"api"},{"location":"reference/hug/routing/#cache_1","text":"def cache ( self , private = False , max_age = 31536000 , s_maxage = None , no_cache = False , no_store = False , must_revalidate = False , ** overrides ) Convenience method for quickly adding cache header to route","title":"cache"},{"location":"reference/hug/routing/#defaults_1","text":"def defaults ( self , defaults , ** overrides ) Sets the custom defaults that will be used for custom parameters","title":"defaults"},{"location":"reference/hug/routing/#doesnt_require_2","text":"def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route","title":"doesnt_require"},{"location":"reference/hug/routing/#map_params_2","text":"def map_params ( self , ** map_params ) Map interface specific params to an internal name representation","title":"map_params"},{"location":"reference/hug/routing/#on_invalid_1","text":"def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False .","title":"on_invalid"},{"location":"reference/hug/routing/#output_2","text":"def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route","title":"output"},{"location":"reference/hug/routing/#output_invalid_1","text":"def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route.","title":"output_invalid"},{"location":"reference/hug/routing/#parameters_1","text":"def parameters ( self , parameters , ** overrides ) Sets the custom parameters that will be used instead of those found introspecting the decorated function","title":"parameters"},{"location":"reference/hug/routing/#parse_body_1","text":"def parse_body ( self , automatic = True , ** overrides ) Tells hug to automatically parse the input body if it matches a registered input format","title":"parse_body"},{"location":"reference/hug/routing/#raise_on_invalid_1","text":"def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them","title":"raise_on_invalid"},{"location":"reference/hug/routing/#requires_2","text":"def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route","title":"requires"},{"location":"reference/hug/routing/#response_headers_1","text":"def response_headers ( self , headers , ** overrides ) Sets the response headers automatically injected by the router","title":"response_headers"},{"location":"reference/hug/routing/#set_status_1","text":"def set_status ( self , status , ** overrides ) Sets the status that will be returned by default","title":"set_status"},{"location":"reference/hug/routing/#transform_2","text":"def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format","title":"transform"},{"location":"reference/hug/routing/#validate_2","text":"def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler","title":"validate"},{"location":"reference/hug/routing/#versions_1","text":"def versions ( self , supported , ** overrides ) Sets the versions that this route should be compatiable with","title":"versions"},{"location":"reference/hug/routing/#where_2","text":"def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values","title":"where"},{"location":"reference/hug/routing/#internalvalidation","text":"class InternalValidation ( raise_on_invalid = False , on_invalid = None , output_invalid = None , ** kwargs ) Defines the base route for interfaces that define their own internal validation","title":"InternalValidation"},{"location":"reference/hug/routing/#ancestors-in-mro_3","text":"hug.routing.Router","title":"Ancestors (in MRO)"},{"location":"reference/hug/routing/#descendants_1","text":"hug.routing.LocalRouter hug.routing.HTTPRouter","title":"Descendants"},{"location":"reference/hug/routing/#class-variables_3","text":"route","title":"Class variables"},{"location":"reference/hug/routing/#instance-variables_3","text":"route","title":"Instance variables"},{"location":"reference/hug/routing/#methods_3","text":"","title":"Methods"},{"location":"reference/hug/routing/#api_3","text":"def api ( self , api , ** overrides ) Sets the API that should contain this route","title":"api"},{"location":"reference/hug/routing/#doesnt_require_3","text":"def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route","title":"doesnt_require"},{"location":"reference/hug/routing/#map_params_3","text":"def map_params ( self , ** map_params ) Map interface specific params to an internal name representation","title":"map_params"},{"location":"reference/hug/routing/#on_invalid_2","text":"def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False .","title":"on_invalid"},{"location":"reference/hug/routing/#output_3","text":"def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route","title":"output"},{"location":"reference/hug/routing/#output_invalid_2","text":"def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route.","title":"output_invalid"},{"location":"reference/hug/routing/#raise_on_invalid_2","text":"def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them","title":"raise_on_invalid"},{"location":"reference/hug/routing/#requires_3","text":"def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route","title":"requires"},{"location":"reference/hug/routing/#transform_3","text":"def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format","title":"transform"},{"location":"reference/hug/routing/#validate_3","text":"def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler","title":"validate"},{"location":"reference/hug/routing/#where_3","text":"def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values","title":"where"},{"location":"reference/hug/routing/#localrouter","text":"class LocalRouter ( directives = True , validate = True , version = None , ** kwargs ) The LocalRouter defines how interfaces should be handled when accessed locally from within Python code","title":"LocalRouter"},{"location":"reference/hug/routing/#ancestors-in-mro_4","text":"hug.routing.InternalValidation hug.routing.Router","title":"Ancestors (in MRO)"},{"location":"reference/hug/routing/#class-variables_4","text":"route","title":"Class variables"},{"location":"reference/hug/routing/#instance-variables_4","text":"route","title":"Instance variables"},{"location":"reference/hug/routing/#methods_4","text":"","title":"Methods"},{"location":"reference/hug/routing/#api_4","text":"def api ( self , api , ** overrides ) Sets the API that should contain this route","title":"api"},{"location":"reference/hug/routing/#directives","text":"def directives ( self , use = True , ** kwargs )","title":"directives"},{"location":"reference/hug/routing/#doesnt_require_4","text":"def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route","title":"doesnt_require"},{"location":"reference/hug/routing/#map_params_4","text":"def map_params ( self , ** map_params ) Map interface specific params to an internal name representation","title":"map_params"},{"location":"reference/hug/routing/#on_invalid_3","text":"def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False .","title":"on_invalid"},{"location":"reference/hug/routing/#output_4","text":"def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route","title":"output"},{"location":"reference/hug/routing/#output_invalid_3","text":"def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route.","title":"output_invalid"},{"location":"reference/hug/routing/#raise_on_invalid_3","text":"def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them","title":"raise_on_invalid"},{"location":"reference/hug/routing/#requires_4","text":"def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route","title":"requires"},{"location":"reference/hug/routing/#transform_4","text":"def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format","title":"transform"},{"location":"reference/hug/routing/#validate_4","text":"def validate ( self , enforce = True , ** kwargs )","title":"validate"},{"location":"reference/hug/routing/#version_1","text":"def version ( self , supported , ** kwargs )","title":"version"},{"location":"reference/hug/routing/#where_4","text":"def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values","title":"where"},{"location":"reference/hug/routing/#notfoundrouter","text":"class NotFoundRouter ( output = None , versions =< built - in function any > , status = '404 Not Found' , ** kwargs ) Provides a chainable router that can be used to route 404'd request to a Python function","title":"NotFoundRouter"},{"location":"reference/hug/routing/#ancestors-in-mro_5","text":"hug.routing.HTTPRouter hug.routing.InternalValidation hug.routing.Router","title":"Ancestors (in MRO)"},{"location":"reference/hug/routing/#class-variables_5","text":"route","title":"Class variables"},{"location":"reference/hug/routing/#instance-variables_5","text":"route","title":"Instance variables"},{"location":"reference/hug/routing/#methods_5","text":"","title":"Methods"},{"location":"reference/hug/routing/#add_response_headers_2","text":"def add_response_headers ( self , headers , ** overrides ) Adds the specified response headers while keeping existing ones in-tact","title":"add_response_headers"},{"location":"reference/hug/routing/#allow_origins_2","text":"def allow_origins ( self , * origins , methods = None , max_age = None , credentials = None , headers = None , ** overrides ) Convenience method for quickly allowing other resources to access this one","title":"allow_origins"},{"location":"reference/hug/routing/#api_5","text":"def api ( self , api , ** overrides ) Sets the API that should contain this route","title":"api"},{"location":"reference/hug/routing/#cache_2","text":"def cache ( self , private = False , max_age = 31536000 , s_maxage = None , no_cache = False , no_store = False , must_revalidate = False , ** overrides ) Convenience method for quickly adding cache header to route","title":"cache"},{"location":"reference/hug/routing/#defaults_2","text":"def defaults ( self , defaults , ** overrides ) Sets the custom defaults that will be used for custom parameters","title":"defaults"},{"location":"reference/hug/routing/#doesnt_require_5","text":"def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route","title":"doesnt_require"},{"location":"reference/hug/routing/#map_params_5","text":"def map_params ( self , ** map_params ) Map interface specific params to an internal name representation","title":"map_params"},{"location":"reference/hug/routing/#on_invalid_4","text":"def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False .","title":"on_invalid"},{"location":"reference/hug/routing/#output_5","text":"def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route","title":"output"},{"location":"reference/hug/routing/#output_invalid_4","text":"def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route.","title":"output_invalid"},{"location":"reference/hug/routing/#parameters_2","text":"def parameters ( self , parameters , ** overrides ) Sets the custom parameters that will be used instead of those found introspecting the decorated function","title":"parameters"},{"location":"reference/hug/routing/#parse_body_2","text":"def parse_body ( self , automatic = True , ** overrides ) Tells hug to automatically parse the input body if it matches a registered input format","title":"parse_body"},{"location":"reference/hug/routing/#raise_on_invalid_4","text":"def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them","title":"raise_on_invalid"},{"location":"reference/hug/routing/#requires_5","text":"def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route","title":"requires"},{"location":"reference/hug/routing/#response_headers_2","text":"def response_headers ( self , headers , ** overrides ) Sets the response headers automatically injected by the router","title":"response_headers"},{"location":"reference/hug/routing/#set_status_2","text":"def set_status ( self , status , ** overrides ) Sets the status that will be returned by default","title":"set_status"},{"location":"reference/hug/routing/#transform_5","text":"def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format","title":"transform"},{"location":"reference/hug/routing/#validate_5","text":"def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler","title":"validate"},{"location":"reference/hug/routing/#versions_2","text":"def versions ( self , supported , ** overrides ) Sets the versions that this route should be compatiable with","title":"versions"},{"location":"reference/hug/routing/#where_5","text":"def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values","title":"where"},{"location":"reference/hug/routing/#router","text":"class Router ( transform = None , output = None , validate = None , api = None , requires = (), map_params = None , args = None , ** kwargs ) The base chainable router object","title":"Router"},{"location":"reference/hug/routing/#descendants_2","text":"hug.routing.CLIRouter hug.routing.InternalValidation","title":"Descendants"},{"location":"reference/hug/routing/#instance-variables_6","text":"route","title":"Instance variables"},{"location":"reference/hug/routing/#methods_6","text":"","title":"Methods"},{"location":"reference/hug/routing/#api_6","text":"def api ( self , api , ** overrides ) Sets the API that should contain this route","title":"api"},{"location":"reference/hug/routing/#doesnt_require_6","text":"def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route","title":"doesnt_require"},{"location":"reference/hug/routing/#map_params_6","text":"def map_params ( self , ** map_params ) Map interface specific params to an internal name representation","title":"map_params"},{"location":"reference/hug/routing/#output_6","text":"def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route","title":"output"},{"location":"reference/hug/routing/#requires_6","text":"def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route","title":"requires"},{"location":"reference/hug/routing/#transform_6","text":"def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format","title":"transform"},{"location":"reference/hug/routing/#validate_6","text":"def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler","title":"validate"},{"location":"reference/hug/routing/#where_6","text":"def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values","title":"where"},{"location":"reference/hug/routing/#sinkrouter","text":"class SinkRouter ( urls = None , output = None , ** kwargs ) Provides a chainable router that can be used to route all routes pass a certain base URL (essentially route/*)","title":"SinkRouter"},{"location":"reference/hug/routing/#ancestors-in-mro_6","text":"hug.routing.HTTPRouter hug.routing.InternalValidation hug.routing.Router","title":"Ancestors (in MRO)"},{"location":"reference/hug/routing/#descendants_3","text":"hug.routing.StaticRouter","title":"Descendants"},{"location":"reference/hug/routing/#class-variables_6","text":"route","title":"Class variables"},{"location":"reference/hug/routing/#instance-variables_7","text":"route","title":"Instance variables"},{"location":"reference/hug/routing/#methods_7","text":"","title":"Methods"},{"location":"reference/hug/routing/#add_response_headers_3","text":"def add_response_headers ( self , headers , ** overrides ) Adds the specified response headers while keeping existing ones in-tact","title":"add_response_headers"},{"location":"reference/hug/routing/#allow_origins_3","text":"def allow_origins ( self , * origins , methods = None , max_age = None , credentials = None , headers = None , ** overrides ) Convenience method for quickly allowing other resources to access this one","title":"allow_origins"},{"location":"reference/hug/routing/#api_7","text":"def api ( self , api , ** overrides ) Sets the API that should contain this route","title":"api"},{"location":"reference/hug/routing/#cache_3","text":"def cache ( self , private = False , max_age = 31536000 , s_maxage = None , no_cache = False , no_store = False , must_revalidate = False , ** overrides ) Convenience method for quickly adding cache header to route","title":"cache"},{"location":"reference/hug/routing/#defaults_3","text":"def defaults ( self , defaults , ** overrides ) Sets the custom defaults that will be used for custom parameters","title":"defaults"},{"location":"reference/hug/routing/#doesnt_require_7","text":"def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route","title":"doesnt_require"},{"location":"reference/hug/routing/#map_params_7","text":"def map_params ( self , ** map_params ) Map interface specific params to an internal name representation","title":"map_params"},{"location":"reference/hug/routing/#on_invalid_5","text":"def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False .","title":"on_invalid"},{"location":"reference/hug/routing/#output_7","text":"def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route","title":"output"},{"location":"reference/hug/routing/#output_invalid_5","text":"def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route.","title":"output_invalid"},{"location":"reference/hug/routing/#parameters_3","text":"def parameters ( self , parameters , ** overrides ) Sets the custom parameters that will be used instead of those found introspecting the decorated function","title":"parameters"},{"location":"reference/hug/routing/#parse_body_3","text":"def parse_body ( self , automatic = True , ** overrides ) Tells hug to automatically parse the input body if it matches a registered input format","title":"parse_body"},{"location":"reference/hug/routing/#raise_on_invalid_5","text":"def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them","title":"raise_on_invalid"},{"location":"reference/hug/routing/#requires_7","text":"def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route","title":"requires"},{"location":"reference/hug/routing/#response_headers_3","text":"def response_headers ( self , headers , ** overrides ) Sets the response headers automatically injected by the router","title":"response_headers"},{"location":"reference/hug/routing/#set_status_3","text":"def set_status ( self , status , ** overrides ) Sets the status that will be returned by default","title":"set_status"},{"location":"reference/hug/routing/#transform_7","text":"def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format","title":"transform"},{"location":"reference/hug/routing/#validate_7","text":"def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler","title":"validate"},{"location":"reference/hug/routing/#versions_3","text":"def versions ( self , supported , ** overrides ) Sets the versions that this route should be compatiable with","title":"versions"},{"location":"reference/hug/routing/#where_7","text":"def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values","title":"where"},{"location":"reference/hug/routing/#staticrouter","text":"class StaticRouter ( urls = None , output =< cyfunction file at 0x7fb8be2708e8 > , cache = False , ** kwargs ) Provides a chainable router that can be used to return static files automatically from a set of directories","title":"StaticRouter"},{"location":"reference/hug/routing/#ancestors-in-mro_7","text":"hug.routing.SinkRouter hug.routing.HTTPRouter hug.routing.InternalValidation hug.routing.Router","title":"Ancestors (in MRO)"},{"location":"reference/hug/routing/#instance-variables_8","text":"route","title":"Instance variables"},{"location":"reference/hug/routing/#methods_8","text":"","title":"Methods"},{"location":"reference/hug/routing/#add_response_headers_4","text":"def add_response_headers ( self , headers , ** overrides ) Adds the specified response headers while keeping existing ones in-tact","title":"add_response_headers"},{"location":"reference/hug/routing/#allow_origins_4","text":"def allow_origins ( self , * origins , methods = None , max_age = None , credentials = None , headers = None , ** overrides ) Convenience method for quickly allowing other resources to access this one","title":"allow_origins"},{"location":"reference/hug/routing/#api_8","text":"def api ( self , api , ** overrides ) Sets the API that should contain this route","title":"api"},{"location":"reference/hug/routing/#cache_4","text":"def cache ( self , private = False , max_age = 31536000 , s_maxage = None , no_cache = False , no_store = False , must_revalidate = False , ** overrides ) Convenience method for quickly adding cache header to route","title":"cache"},{"location":"reference/hug/routing/#defaults_4","text":"def defaults ( self , defaults , ** overrides ) Sets the custom defaults that will be used for custom parameters","title":"defaults"},{"location":"reference/hug/routing/#doesnt_require_8","text":"def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route","title":"doesnt_require"},{"location":"reference/hug/routing/#map_params_8","text":"def map_params ( self , ** map_params ) Map interface specific params to an internal name representation","title":"map_params"},{"location":"reference/hug/routing/#on_invalid_6","text":"def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False .","title":"on_invalid"},{"location":"reference/hug/routing/#output_8","text":"def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route","title":"output"},{"location":"reference/hug/routing/#output_invalid_6","text":"def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route.","title":"output_invalid"},{"location":"reference/hug/routing/#parameters_4","text":"def parameters ( self , parameters , ** overrides ) Sets the custom parameters that will be used instead of those found introspecting the decorated function","title":"parameters"},{"location":"reference/hug/routing/#parse_body_4","text":"def parse_body ( self , automatic = True , ** overrides ) Tells hug to automatically parse the input body if it matches a registered input format","title":"parse_body"},{"location":"reference/hug/routing/#raise_on_invalid_6","text":"def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them","title":"raise_on_invalid"},{"location":"reference/hug/routing/#requires_8","text":"def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route","title":"requires"},{"location":"reference/hug/routing/#response_headers_4","text":"def response_headers ( self , headers , ** overrides ) Sets the response headers automatically injected by the router","title":"response_headers"},{"location":"reference/hug/routing/#set_status_4","text":"def set_status ( self , status , ** overrides ) Sets the status that will be returned by default","title":"set_status"},{"location":"reference/hug/routing/#transform_8","text":"def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format","title":"transform"},{"location":"reference/hug/routing/#validate_8","text":"def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler","title":"validate"},{"location":"reference/hug/routing/#versions_4","text":"def versions ( self , supported , ** overrides ) Sets the versions that this route should be compatiable with","title":"versions"},{"location":"reference/hug/routing/#where_8","text":"def where ( self , ** overrides ) Creates a new route, based on the current route, with the specified overrided values","title":"where"},{"location":"reference/hug/routing/#urlrouter","text":"class URLRouter ( urls = None , accept = ( 'CONNECT' , 'DELETE' , 'GET' , 'HEAD' , 'OPTIONS' , 'PATCH' , 'POST' , 'PUT' , 'TRACE' ), output = None , examples = (), versions =< built - in function any > , suffixes = (), prefixes = (), response_headers = None , parse_body = True , ** kwargs ) Provides a chainable router that can be used to route a URL to a Python function","title":"URLRouter"},{"location":"reference/hug/routing/#ancestors-in-mro_8","text":"hug.routing.HTTPRouter hug.routing.InternalValidation hug.routing.Router","title":"Ancestors (in MRO)"},{"location":"reference/hug/routing/#descendants_4","text":"hug.route.Object","title":"Descendants"},{"location":"reference/hug/routing/#class-variables_7","text":"route","title":"Class variables"},{"location":"reference/hug/routing/#instance-variables_9","text":"route","title":"Instance variables"},{"location":"reference/hug/routing/#methods_9","text":"","title":"Methods"},{"location":"reference/hug/routing/#accept","text":"def accept ( self , * accept , ** overrides ) Sets a list of HTTP methods this router should accept","title":"accept"},{"location":"reference/hug/routing/#add_response_headers_5","text":"def add_response_headers ( self , headers , ** overrides ) Adds the specified response headers while keeping existing ones in-tact","title":"add_response_headers"},{"location":"reference/hug/routing/#allow_origins_5","text":"def allow_origins ( self , * origins , methods = None , max_age = None , credentials = None , headers = None , ** overrides ) Convenience method for quickly allowing other resources to access this one","title":"allow_origins"},{"location":"reference/hug/routing/#api_9","text":"def api ( self , api , ** overrides ) Sets the API that should contain this route","title":"api"},{"location":"reference/hug/routing/#cache_5","text":"def cache ( self , private = False , max_age = 31536000 , s_maxage = None , no_cache = False , no_store = False , must_revalidate = False , ** overrides ) Convenience method for quickly adding cache header to route","title":"cache"},{"location":"reference/hug/routing/#call","text":"def call ( self , ** overrides ) Sets the acceptable HTTP method to all known","title":"call"},{"location":"reference/hug/routing/#connect","text":"def connect ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to CONNECT","title":"connect"},{"location":"reference/hug/routing/#defaults_5","text":"def defaults ( self , defaults , ** overrides ) Sets the custom defaults that will be used for custom parameters","title":"defaults"},{"location":"reference/hug/routing/#delete","text":"def delete ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to DELETE","title":"delete"},{"location":"reference/hug/routing/#doesnt_require_9","text":"def doesnt_require ( self , requirements , ** overrides ) Removes individual requirements while keeping all other defined ones within a route","title":"doesnt_require"},{"location":"reference/hug/routing/#examples","text":"def examples ( self , * examples , ** overrides ) Sets the examples that the route should use","title":"examples"},{"location":"reference/hug/routing/#get","text":"def get ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to a GET","title":"get"},{"location":"reference/hug/routing/#get_post","text":"def get_post ( self , ** overrides ) Exposes a Python method externally under both the HTTP POST and GET methods","title":"get_post"},{"location":"reference/hug/routing/#head","text":"def head ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to HEAD","title":"head"},{"location":"reference/hug/routing/#http","text":"def http ( self , ** overrides ) Sets the acceptable HTTP method to all known","title":"http"},{"location":"reference/hug/routing/#map_params_9","text":"def map_params ( self , ** map_params ) Map interface specific params to an internal name representation","title":"map_params"},{"location":"reference/hug/routing/#on_invalid_7","text":"def on_invalid ( self , function , ** overrides ) Sets a function to use to transform data on validation errors. Defaults to the transform function if one is set to ensure no special handling occurs for invalid data set to False .","title":"on_invalid"},{"location":"reference/hug/routing/#options","text":"def options ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to OPTIONS","title":"options"},{"location":"reference/hug/routing/#output_9","text":"def output ( self , formatter , ** overrides ) Sets the output formatter that should be used to render this route","title":"output"},{"location":"reference/hug/routing/#output_invalid_7","text":"def output_invalid ( self , output_handler , ** overrides ) Sets an output handler to be used when handler validation fails. Defaults to the output formatter set globally for the route.","title":"output_invalid"},{"location":"reference/hug/routing/#parameters_5","text":"def parameters ( self , parameters , ** overrides ) Sets the custom parameters that will be used instead of those found introspecting the decorated function","title":"parameters"},{"location":"reference/hug/routing/#parse_body_5","text":"def parse_body ( self , automatic = True , ** overrides ) Tells hug to automatically parse the input body if it matches a registered input format","title":"parse_body"},{"location":"reference/hug/routing/#patch","text":"def patch ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to PATCH","title":"patch"},{"location":"reference/hug/routing/#post","text":"def post ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to POST","title":"post"},{"location":"reference/hug/routing/#prefixes","text":"def prefixes ( self , * prefixes , ** overrides ) Sets the prefixes supported by the route","title":"prefixes"},{"location":"reference/hug/routing/#put","text":"def put ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to PUT","title":"put"},{"location":"reference/hug/routing/#put_post","text":"def put_post ( self , ** overrides ) Exposes a Python method externally under both the HTTP POST and PUT methods","title":"put_post"},{"location":"reference/hug/routing/#raise_on_invalid_7","text":"def raise_on_invalid ( self , setting = True , ** overrides ) Sets the route to raise validation errors instead of catching them","title":"raise_on_invalid"},{"location":"reference/hug/routing/#requires_9","text":"def requires ( self , requirements , ** overrides ) Adds additional requirements to the specified route","title":"requires"},{"location":"reference/hug/routing/#response_headers_5","text":"def response_headers ( self , headers , ** overrides ) Sets the response headers automatically injected by the router","title":"response_headers"},{"location":"reference/hug/routing/#set_status_5","text":"def set_status ( self , status , ** overrides ) Sets the status that will be returned by default","title":"set_status"},{"location":"reference/hug/routing/#suffixes","text":"def suffixes ( self , * suffixes , ** overrides ) Sets the suffixes supported by the route","title":"suffixes"},{"location":"reference/hug/routing/#trace","text":"def trace ( self , urls = None , ** overrides ) Sets the acceptable HTTP method to TRACE","title":"trace"},{"location":"reference/hug/routing/#transform_9","text":"def transform ( self , function , ** overrides ) Sets the function that should be used to transform the returned Python structure into something serializable by specified output format","title":"transform"},{"location":"reference/hug/routing/#urls","text":"def urls ( self , * urls , ** overrides ) Sets the URLs that will map to this API call","title":"urls"},{"location":"reference/hug/routing/#validate_9","text":"def validate ( self , validation_function , ** overrides ) Sets the secondary validation fucntion to use for this handler","title":"validate"},{"location":"reference/hug/routing/#versions_5","text":"def versions ( self , supported , ** overrides ) Sets the versions that this route should be compatiable with","title":"versions"},{"location":"reference/hug/routing/#where_9","text":"def where ( self , ** overrides )","title":"where"},{"location":"reference/hug/store/","text":"Module hug.store hug/store.py. A collecton of native stores which can be used with, among others, the session middleware. Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Classes InMemoryStore class InMemoryStore ( ) Naive store class which can be used for the session middleware and unit tests. It is not thread-safe and no data will survive the lifecycle of the hug process. Regard this as a blueprint for more useful and probably more complex store implementations, for example stores which make use of databases like Redis, PostgreSQL or others. Methods delete def delete ( self , key ) Delete data for given store key. exists def exists ( self , key ) Return whether key exists or not. get def get ( self , key ) Get data for given store key. Raise hug.exceptions.StoreKeyNotFound if key does not exist. set def set ( self , key , data ) Set data object for given store key.","title":"Store"},{"location":"reference/hug/store/#module-hugstore","text":"hug/store.py. A collecton of native stores which can be used with, among others, the session middleware. Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.store"},{"location":"reference/hug/store/#classes","text":"","title":"Classes"},{"location":"reference/hug/store/#inmemorystore","text":"class InMemoryStore ( ) Naive store class which can be used for the session middleware and unit tests. It is not thread-safe and no data will survive the lifecycle of the hug process. Regard this as a blueprint for more useful and probably more complex store implementations, for example stores which make use of databases like Redis, PostgreSQL or others.","title":"InMemoryStore"},{"location":"reference/hug/store/#methods","text":"","title":"Methods"},{"location":"reference/hug/store/#delete","text":"def delete ( self , key ) Delete data for given store key.","title":"delete"},{"location":"reference/hug/store/#exists","text":"def exists ( self , key ) Return whether key exists or not.","title":"exists"},{"location":"reference/hug/store/#get","text":"def get ( self , key ) Get data for given store key. Raise hug.exceptions.StoreKeyNotFound if key does not exist.","title":"get"},{"location":"reference/hug/store/#set","text":"def set ( self , key , data ) Set data object for given store key.","title":"set"},{"location":"reference/hug/test/","text":"Module hug.test hug/test.py. Defines utility function that aid in the round-trip testing of Hug APIs Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Variables DEFAULT_HOST HTTP_METHODS connect delete get head method options patch post put tester trace Functions call def call ( method , api_or_module , url , body = '' , headers = None , params = None , query_string = '' , scheme = 'http' , host = 'falconframework.org' , ** kwargs ) Simulates a round-trip call against the given API / URL cli def cli ( method , * args , api = None , module = None , ** arguments ) Simulates testing a hug cli method from the command line","title":"Test"},{"location":"reference/hug/test/#module-hugtest","text":"hug/test.py. Defines utility function that aid in the round-trip testing of Hug APIs Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.test"},{"location":"reference/hug/test/#variables","text":"DEFAULT_HOST HTTP_METHODS connect delete get head method options patch post put tester trace","title":"Variables"},{"location":"reference/hug/test/#functions","text":"","title":"Functions"},{"location":"reference/hug/test/#call","text":"def call ( method , api_or_module , url , body = '' , headers = None , params = None , query_string = '' , scheme = 'http' , host = 'falconframework.org' , ** kwargs ) Simulates a round-trip call against the given API / URL","title":"call"},{"location":"reference/hug/test/#cli","text":"def cli ( method , * args , api = None , module = None , ** arguments ) Simulates testing a hug cli method from the command line","title":"cli"},{"location":"reference/hug/this/","text":"Module hug.this hug/this.py. The Zen of Hug Copyright (C) 2019 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Variables ZEN_OF_HUG","title":"This"},{"location":"reference/hug/this/#module-hugthis","text":"hug/this.py. The Zen of Hug Copyright (C) 2019 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.this"},{"location":"reference/hug/this/#variables","text":"ZEN_OF_HUG","title":"Variables"},{"location":"reference/hug/transform/","text":"Module hug.transform hug/transform.py Defines Hug's built-in output transforming functions Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Functions all def all ( * transformers ) Returns the results of applying all passed in transformers to data should pass in list of transformers [ transformer_1 , transformer_2 ...] content_type def content_type ( transformers , default = None ) Returns a different transformer depending on the content type passed in. If none match and no default is given no transformation takes place. should pass in a dict with the following format: { '[content-type]' : transformation_action , ... } prefix def prefix ( transformers , default = None ) Returns a different transformer depending on the prefix at the end of the requested URL. If none match and no default is given no transformation takes place. should pass in a dict with the following format: { '[prefix]' : transformation_action , ... } suffix def suffix ( transformers , default = None ) Returns a different transformer depending on the suffix at the end of the requested URL. If none match and no default is given no transformation takes place. should pass in a dict with the following format: { '[suffix]' : transformation_action , ... }","title":"Transform"},{"location":"reference/hug/transform/#module-hugtransform","text":"hug/transform.py Defines Hug's built-in output transforming functions Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.transform"},{"location":"reference/hug/transform/#functions","text":"","title":"Functions"},{"location":"reference/hug/transform/#all","text":"def all ( * transformers ) Returns the results of applying all passed in transformers to data should pass in list of transformers [ transformer_1 , transformer_2 ...]","title":"all"},{"location":"reference/hug/transform/#content_type","text":"def content_type ( transformers , default = None ) Returns a different transformer depending on the content type passed in. If none match and no default is given no transformation takes place. should pass in a dict with the following format: { '[content-type]' : transformation_action , ... }","title":"content_type"},{"location":"reference/hug/transform/#prefix","text":"def prefix ( transformers , default = None ) Returns a different transformer depending on the prefix at the end of the requested URL. If none match and no default is given no transformation takes place. should pass in a dict with the following format: { '[prefix]' : transformation_action , ... }","title":"prefix"},{"location":"reference/hug/transform/#suffix","text":"def suffix ( transformers , default = None ) Returns a different transformer depending on the suffix at the end of the requested URL. If none match and no default is given no transformation takes place. should pass in a dict with the following format: { '[suffix]' : transformation_action , ... }","title":"suffix"},{"location":"reference/hug/types/","text":"Module hug.types hug/types.py Defines hugs built-in supported types / validators Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Variables MARSHMALLOW_MAJOR_VERSION boolean comma_separated_list decimal float_number inline_dictionary json multiple number smart_boolean text uuid Functions accept def accept ( kind , doc = None , error_text = None , exception_handlers = mappingproxy ({}), accept_context = False ) Allows quick wrapping of any Python type cast function for use as a hug type annotation create def create ( doc = None , error_text = None , exception_handlers = mappingproxy ({}), extend =< class ' hug . types . Type '>, chain = True , auto_instance = True , accept_context = False ) Creates a new type handler with the specified type-casting handler Classes Chain class Chain ( * types ) type for chaining multiple types together Ancestors (in MRO) hug.types.Type Descendants hug.types.Nullable Instance variables types CutOff class CutOff ( limit , convert =< hug . types . Text object at 0x7fb8bdf6a358 > ) Ancestors (in MRO) hug.types.Type Instance variables convert limit DelimitedList class DelimitedList ( using = ',' ) Ancestors (in MRO) hug.types.Type GreaterThan class GreaterThan ( minimum , convert =< hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > ) Ancestors (in MRO) hug.types.Type Instance variables convert minimum InRange class InRange ( lower , upper , convert =< hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > ) Ancestors (in MRO) hug.types.Type Instance variables convert lower upper InlineDictionary class InlineDictionary ( * args , ** kwargs ) A single line dictionary, where items are separted by commas and key:value are separated by a pipe Ancestors (in MRO) hug.types.Type JSON class JSON ( ) Accepts a JSON formatted data structure Ancestors (in MRO) hug.types.Type Length class Length ( lower , upper , convert =< hug . types . Text object at 0x7fb8bdf6a358 > ) Ancestors (in MRO) hug.types.Type Instance variables convert lower upper LessThan class LessThan ( limit , convert =< hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > ) Ancestors (in MRO) hug.types.Type Instance variables convert limit LongerThan class LongerThan ( limit , convert =< hug . types . Text object at 0x7fb8bdf6a358 > ) Ancestors (in MRO) hug.types.Type Instance variables convert limit Mapping class Mapping ( value_map ) Ancestors (in MRO) hug.types.OneOf hug.types.Type Class variables values Instance variables value_map values MarshmallowInputSchema class MarshmallowInputSchema ( schema ) Ancestors (in MRO) hug.types.Type Instance variables schema MarshmallowReturnSchema class MarshmallowReturnSchema ( schema ) Ancestors (in MRO) hug.types.Type Instance variables context schema Multi class Multi ( * types ) Ancestors (in MRO) hug.types.Type Instance variables types Multiple class Multiple ( ) Multiple Values Ancestors (in MRO) hug.types.Type NewTypeMeta class NewTypeMeta ( cls , name , bases , nmspc ) Meta class to turn Schema objects into format usable by hug Ancestors (in MRO) builtins.type Methods mro def mro ( self , / ) Return a type's method resolution order. Nullable class Nullable ( * types ) A Chain types that Allows None values Ancestors (in MRO) hug.types.Chain hug.types.Type Instance variables types OneOf class OneOf ( values ) Ancestors (in MRO) hug.types.Type Descendants hug.types.Mapping Instance variables values Schema class Schema ( json , force = False ) Schema for creating complex types using hug types ShorterThan class ShorterThan ( limit , convert =< hug . types . Text object at 0x7fb8bdf6a358 > ) Ancestors (in MRO) hug.types.Type Instance variables convert limit SmartBoolean class SmartBoolean ( ) Accepts a true or false value Ancestors (in MRO) hug.types.NewType hug.types.Type SubTyped class SubTyped ( / , * args , ** kwargs ) type(object_or_name, bases, dict) type(object) -> the object's type type(name, bases, dict) -> a new type Ancestors (in MRO) builtins.type Methods mro def mro ( self , / ) Return a type's method resolution order. Text class Text ( ) Basic text / string value Ancestors (in MRO) hug.types.Type Type class Type ( ) Defines the base hug concept of a type for use in function annotation. Override __call__ to define how the type should be transformed and validated Descendants hug.types.NewType hug.types.NewType hug.types.NewType hug.types.NewType hug.types.NewType hug.types.Text hug.types.Multiple hug.types.DelimitedList hug.types.InlineDictionary hug.types.OneOf hug.types.JSON hug.types.Multi hug.types.InRange hug.types.LessThan hug.types.GreaterThan hug.types.Length hug.types.ShorterThan hug.types.LongerThan hug.types.CutOff hug.types.Chain hug.types.MarshmallowInputSchema hug.types.MarshmallowReturnSchema TypedProperty class TypedProperty ( name , type_func ) class for building property objects for schema objects Instance variables name type_func cut_off class cut_off ( limit , convert =< hug . types . Text object at 0x7fb8bdf6a358 > ) Ancestors (in MRO) hug.types.Type Instance variables convert limit delimited_list class delimited_list ( using = ',' ) Ancestors (in MRO) hug.types.Type greater_than class greater_than ( minimum , convert =< hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > ) Ancestors (in MRO) hug.types.Type Instance variables convert minimum in_range class in_range ( lower , upper , convert =< hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > ) Ancestors (in MRO) hug.types.Type Instance variables convert lower upper length class length ( lower , upper , convert =< hug . types . Text object at 0x7fb8bdf6a358 > ) Ancestors (in MRO) hug.types.Type Instance variables convert lower upper less_than class less_than ( limit , convert =< hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > ) Ancestors (in MRO) hug.types.Type Instance variables convert limit longer_than class longer_than ( limit , convert =< hug . types . Text object at 0x7fb8bdf6a358 > ) Ancestors (in MRO) hug.types.Type Instance variables convert limit mapping class mapping ( value_map ) Ancestors (in MRO) hug.types.OneOf hug.types.Type Class variables values Instance variables value_map values multi class multi ( * types ) Ancestors (in MRO) hug.types.Type Instance variables types one_of class one_of ( values ) Ancestors (in MRO) hug.types.Type Descendants hug.types.Mapping Instance variables values shorter_than class shorter_than ( limit , convert =< hug . types . Text object at 0x7fb8bdf6a358 > ) Ancestors (in MRO) hug.types.Type Instance variables convert limit","title":"Types"},{"location":"reference/hug/types/#module-hugtypes","text":"hug/types.py Defines hugs built-in supported types / validators Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.types"},{"location":"reference/hug/types/#variables","text":"MARSHMALLOW_MAJOR_VERSION boolean comma_separated_list decimal float_number inline_dictionary json multiple number smart_boolean text uuid","title":"Variables"},{"location":"reference/hug/types/#functions","text":"","title":"Functions"},{"location":"reference/hug/types/#accept","text":"def accept ( kind , doc = None , error_text = None , exception_handlers = mappingproxy ({}), accept_context = False ) Allows quick wrapping of any Python type cast function for use as a hug type annotation","title":"accept"},{"location":"reference/hug/types/#create","text":"def create ( doc = None , error_text = None , exception_handlers = mappingproxy ({}), extend =< class ' hug . types . Type '>, chain = True , auto_instance = True , accept_context = False ) Creates a new type handler with the specified type-casting handler","title":"create"},{"location":"reference/hug/types/#classes","text":"","title":"Classes"},{"location":"reference/hug/types/#chain","text":"class Chain ( * types ) type for chaining multiple types together","title":"Chain"},{"location":"reference/hug/types/#ancestors-in-mro","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#descendants","text":"hug.types.Nullable","title":"Descendants"},{"location":"reference/hug/types/#instance-variables","text":"types","title":"Instance variables"},{"location":"reference/hug/types/#cutoff","text":"class CutOff ( limit , convert =< hug . types . Text object at 0x7fb8bdf6a358 > )","title":"CutOff"},{"location":"reference/hug/types/#ancestors-in-mro_1","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_1","text":"convert limit","title":"Instance variables"},{"location":"reference/hug/types/#delimitedlist","text":"class DelimitedList ( using = ',' )","title":"DelimitedList"},{"location":"reference/hug/types/#ancestors-in-mro_2","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#greaterthan","text":"class GreaterThan ( minimum , convert =< hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > )","title":"GreaterThan"},{"location":"reference/hug/types/#ancestors-in-mro_3","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_2","text":"convert minimum","title":"Instance variables"},{"location":"reference/hug/types/#inrange","text":"class InRange ( lower , upper , convert =< hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > )","title":"InRange"},{"location":"reference/hug/types/#ancestors-in-mro_4","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_3","text":"convert lower upper","title":"Instance variables"},{"location":"reference/hug/types/#inlinedictionary","text":"class InlineDictionary ( * args , ** kwargs ) A single line dictionary, where items are separted by commas and key:value are separated by a pipe","title":"InlineDictionary"},{"location":"reference/hug/types/#ancestors-in-mro_5","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#json","text":"class JSON ( ) Accepts a JSON formatted data structure","title":"JSON"},{"location":"reference/hug/types/#ancestors-in-mro_6","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#length","text":"class Length ( lower , upper , convert =< hug . types . Text object at 0x7fb8bdf6a358 > )","title":"Length"},{"location":"reference/hug/types/#ancestors-in-mro_7","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_4","text":"convert lower upper","title":"Instance variables"},{"location":"reference/hug/types/#lessthan","text":"class LessThan ( limit , convert =< hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > )","title":"LessThan"},{"location":"reference/hug/types/#ancestors-in-mro_8","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_5","text":"convert limit","title":"Instance variables"},{"location":"reference/hug/types/#longerthan","text":"class LongerThan ( limit , convert =< hug . types . Text object at 0x7fb8bdf6a358 > )","title":"LongerThan"},{"location":"reference/hug/types/#ancestors-in-mro_9","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_6","text":"convert limit","title":"Instance variables"},{"location":"reference/hug/types/#mapping","text":"class Mapping ( value_map )","title":"Mapping"},{"location":"reference/hug/types/#ancestors-in-mro_10","text":"hug.types.OneOf hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#class-variables","text":"values","title":"Class variables"},{"location":"reference/hug/types/#instance-variables_7","text":"value_map values","title":"Instance variables"},{"location":"reference/hug/types/#marshmallowinputschema","text":"class MarshmallowInputSchema ( schema )","title":"MarshmallowInputSchema"},{"location":"reference/hug/types/#ancestors-in-mro_11","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_8","text":"schema","title":"Instance variables"},{"location":"reference/hug/types/#marshmallowreturnschema","text":"class MarshmallowReturnSchema ( schema )","title":"MarshmallowReturnSchema"},{"location":"reference/hug/types/#ancestors-in-mro_12","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_9","text":"context schema","title":"Instance variables"},{"location":"reference/hug/types/#multi","text":"class Multi ( * types )","title":"Multi"},{"location":"reference/hug/types/#ancestors-in-mro_13","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_10","text":"types","title":"Instance variables"},{"location":"reference/hug/types/#multiple","text":"class Multiple ( ) Multiple Values","title":"Multiple"},{"location":"reference/hug/types/#ancestors-in-mro_14","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#newtypemeta","text":"class NewTypeMeta ( cls , name , bases , nmspc ) Meta class to turn Schema objects into format usable by hug","title":"NewTypeMeta"},{"location":"reference/hug/types/#ancestors-in-mro_15","text":"builtins.type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#methods","text":"","title":"Methods"},{"location":"reference/hug/types/#mro","text":"def mro ( self , / ) Return a type's method resolution order.","title":"mro"},{"location":"reference/hug/types/#nullable","text":"class Nullable ( * types ) A Chain types that Allows None values","title":"Nullable"},{"location":"reference/hug/types/#ancestors-in-mro_16","text":"hug.types.Chain hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_11","text":"types","title":"Instance variables"},{"location":"reference/hug/types/#oneof","text":"class OneOf ( values )","title":"OneOf"},{"location":"reference/hug/types/#ancestors-in-mro_17","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#descendants_1","text":"hug.types.Mapping","title":"Descendants"},{"location":"reference/hug/types/#instance-variables_12","text":"values","title":"Instance variables"},{"location":"reference/hug/types/#schema","text":"class Schema ( json , force = False ) Schema for creating complex types using hug types","title":"Schema"},{"location":"reference/hug/types/#shorterthan","text":"class ShorterThan ( limit , convert =< hug . types . Text object at 0x7fb8bdf6a358 > )","title":"ShorterThan"},{"location":"reference/hug/types/#ancestors-in-mro_18","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_13","text":"convert limit","title":"Instance variables"},{"location":"reference/hug/types/#smartboolean","text":"class SmartBoolean ( ) Accepts a true or false value","title":"SmartBoolean"},{"location":"reference/hug/types/#ancestors-in-mro_19","text":"hug.types.NewType hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#subtyped","text":"class SubTyped ( / , * args , ** kwargs ) type(object_or_name, bases, dict) type(object) -> the object's type type(name, bases, dict) -> a new type","title":"SubTyped"},{"location":"reference/hug/types/#ancestors-in-mro_20","text":"builtins.type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#methods_1","text":"","title":"Methods"},{"location":"reference/hug/types/#mro_1","text":"def mro ( self , / ) Return a type's method resolution order.","title":"mro"},{"location":"reference/hug/types/#text","text":"class Text ( ) Basic text / string value","title":"Text"},{"location":"reference/hug/types/#ancestors-in-mro_21","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#type","text":"class Type ( ) Defines the base hug concept of a type for use in function annotation. Override __call__ to define how the type should be transformed and validated","title":"Type"},{"location":"reference/hug/types/#descendants_2","text":"hug.types.NewType hug.types.NewType hug.types.NewType hug.types.NewType hug.types.NewType hug.types.Text hug.types.Multiple hug.types.DelimitedList hug.types.InlineDictionary hug.types.OneOf hug.types.JSON hug.types.Multi hug.types.InRange hug.types.LessThan hug.types.GreaterThan hug.types.Length hug.types.ShorterThan hug.types.LongerThan hug.types.CutOff hug.types.Chain hug.types.MarshmallowInputSchema hug.types.MarshmallowReturnSchema","title":"Descendants"},{"location":"reference/hug/types/#typedproperty","text":"class TypedProperty ( name , type_func ) class for building property objects for schema objects","title":"TypedProperty"},{"location":"reference/hug/types/#instance-variables_14","text":"name type_func","title":"Instance variables"},{"location":"reference/hug/types/#cut_off","text":"class cut_off ( limit , convert =< hug . types . Text object at 0x7fb8bdf6a358 > )","title":"cut_off"},{"location":"reference/hug/types/#ancestors-in-mro_22","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_15","text":"convert limit","title":"Instance variables"},{"location":"reference/hug/types/#delimited_list","text":"class delimited_list ( using = ',' )","title":"delimited_list"},{"location":"reference/hug/types/#ancestors-in-mro_23","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#greater_than","text":"class greater_than ( minimum , convert =< hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > )","title":"greater_than"},{"location":"reference/hug/types/#ancestors-in-mro_24","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_16","text":"convert minimum","title":"Instance variables"},{"location":"reference/hug/types/#in_range","text":"class in_range ( lower , upper , convert =< hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > )","title":"in_range"},{"location":"reference/hug/types/#ancestors-in-mro_25","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_17","text":"convert lower upper","title":"Instance variables"},{"location":"reference/hug/types/#length_1","text":"class length ( lower , upper , convert =< hug . types . Text object at 0x7fb8bdf6a358 > )","title":"length"},{"location":"reference/hug/types/#ancestors-in-mro_26","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_18","text":"convert lower upper","title":"Instance variables"},{"location":"reference/hug/types/#less_than","text":"class less_than ( limit , convert =< hug . types . create .< locals >. new_type_handler .< locals >. NewType object at 0x7fb8be1ae668 > )","title":"less_than"},{"location":"reference/hug/types/#ancestors-in-mro_27","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_19","text":"convert limit","title":"Instance variables"},{"location":"reference/hug/types/#longer_than","text":"class longer_than ( limit , convert =< hug . types . Text object at 0x7fb8bdf6a358 > )","title":"longer_than"},{"location":"reference/hug/types/#ancestors-in-mro_28","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_20","text":"convert limit","title":"Instance variables"},{"location":"reference/hug/types/#mapping_1","text":"class mapping ( value_map )","title":"mapping"},{"location":"reference/hug/types/#ancestors-in-mro_29","text":"hug.types.OneOf hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#class-variables_1","text":"values","title":"Class variables"},{"location":"reference/hug/types/#instance-variables_21","text":"value_map values","title":"Instance variables"},{"location":"reference/hug/types/#multi_1","text":"class multi ( * types )","title":"multi"},{"location":"reference/hug/types/#ancestors-in-mro_30","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_22","text":"types","title":"Instance variables"},{"location":"reference/hug/types/#one_of","text":"class one_of ( values )","title":"one_of"},{"location":"reference/hug/types/#ancestors-in-mro_31","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#descendants_3","text":"hug.types.Mapping","title":"Descendants"},{"location":"reference/hug/types/#instance-variables_23","text":"values","title":"Instance variables"},{"location":"reference/hug/types/#shorter_than","text":"class shorter_than ( limit , convert =< hug . types . Text object at 0x7fb8bdf6a358 > )","title":"shorter_than"},{"location":"reference/hug/types/#ancestors-in-mro_32","text":"hug.types.Type","title":"Ancestors (in MRO)"},{"location":"reference/hug/types/#instance-variables_24","text":"convert limit","title":"Instance variables"},{"location":"reference/hug/use/","text":"Module hug.use hug/use.py Provides a mechanism for using external hug APIs both locally or remotely in a seamless fashion Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Variables input_format Classes HTTP class HTTP ( endpoint , auth = None , version = None , headers = mappingproxy ({}), timeout = None , raise_on = ( 500 ,), json_transport = True , ** kwargs ) Defines the base concept of a consumed service. This is to enable encapsulating the logic of calling a service so usage can be independant of the interface Ancestors (in MRO) hug.use.Service Class variables raise_on timeout version Instance variables endpoint json_transport raise_on session timeout version Methods connect def connect ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"CONNECT\" method delete def delete ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"DELETE\" method get def get ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"GET\" method head def head ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"HEAD\" method options def options ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"OPTIONS\" method patch def patch ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PATCH\" method post def post ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"POST\" method put def put ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PUT\" method request def request ( self , method , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) trace def trace ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"TRACE\" method Local class Local ( api , version = None , headers = mappingproxy ({}), timeout = None , raise_on = ( 500 ,), ** kwargs ) Defines the base concept of a consumed service. This is to enable encapsulating the logic of calling a service so usage can be independant of the interface Ancestors (in MRO) hug.use.Service Class variables raise_on timeout version Instance variables api headers raise_on timeout version Methods connect def connect ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"CONNECT\" method delete def delete ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"DELETE\" method get def get ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"GET\" method head def head ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"HEAD\" method options def options ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"OPTIONS\" method patch def patch ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PATCH\" method post def post ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"POST\" method put def put ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PUT\" method request def request ( self , method , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) trace def trace ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"TRACE\" method Service class Service ( version = None , timeout = None , raise_on = ( 500 ,), ** kwargs ) Defines the base concept of a consumed service. This is to enable encapsulating the logic of calling a service so usage can be independant of the interface Descendants hug.use.HTTP hug.use.Local hug.use.Socket Instance variables raise_on timeout version Methods connect def connect ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"CONNECT\" method delete def delete ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"DELETE\" method get def get ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"GET\" method head def head ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"HEAD\" method options def options ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"OPTIONS\" method patch def patch ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PATCH\" method post def post ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"POST\" method put def put ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PUT\" method request def request ( self , method , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"CALL\" method trace def trace ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"TRACE\" method Socket class Socket ( connect_to , proto , version = None , headers = mappingproxy ({}), timeout = None , pool = 0 , raise_on = ( 500 ,), ** kwargs ) Defines the base concept of a consumed service. This is to enable encapsulating the logic of calling a service so usage can be independant of the interface Ancestors (in MRO) hug.use.Service Class variables Connection datagrams inet on_unix protocols raise_on streams unix version Instance variables connection connection_pool raise_on send_and_receive timeout version Methods connect def connect ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"CONNECT\" method delete def delete ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"DELETE\" method get def get ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"GET\" method head def head ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"HEAD\" method options def options ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"OPTIONS\" method patch def patch ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PATCH\" method post def post ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"POST\" method put def put ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PUT\" method request def request ( self , message , timeout = False , * args , ** kwargs ) Populate connection pool, send message, return BytesIO, and cleanup setsockopt def setsockopt ( self , * sockopts ) Add socket options to set settimeout def settimeout ( self , timeout ) Set the default timeout trace def trace ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"TRACE\" method","title":"Use"},{"location":"reference/hug/use/#module-huguse","text":"hug/use.py Provides a mechanism for using external hug APIs both locally or remotely in a seamless fashion Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.use"},{"location":"reference/hug/use/#variables","text":"input_format","title":"Variables"},{"location":"reference/hug/use/#classes","text":"","title":"Classes"},{"location":"reference/hug/use/#http","text":"class HTTP ( endpoint , auth = None , version = None , headers = mappingproxy ({}), timeout = None , raise_on = ( 500 ,), json_transport = True , ** kwargs ) Defines the base concept of a consumed service. This is to enable encapsulating the logic of calling a service so usage can be independant of the interface","title":"HTTP"},{"location":"reference/hug/use/#ancestors-in-mro","text":"hug.use.Service","title":"Ancestors (in MRO)"},{"location":"reference/hug/use/#class-variables","text":"raise_on timeout version","title":"Class variables"},{"location":"reference/hug/use/#instance-variables","text":"endpoint json_transport raise_on session timeout version","title":"Instance variables"},{"location":"reference/hug/use/#methods","text":"","title":"Methods"},{"location":"reference/hug/use/#connect","text":"def connect ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"CONNECT\" method","title":"connect"},{"location":"reference/hug/use/#delete","text":"def delete ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"DELETE\" method","title":"delete"},{"location":"reference/hug/use/#get","text":"def get ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"GET\" method","title":"get"},{"location":"reference/hug/use/#head","text":"def head ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"HEAD\" method","title":"head"},{"location":"reference/hug/use/#options","text":"def options ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"OPTIONS\" method","title":"options"},{"location":"reference/hug/use/#patch","text":"def patch ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PATCH\" method","title":"patch"},{"location":"reference/hug/use/#post","text":"def post ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"POST\" method","title":"post"},{"location":"reference/hug/use/#put","text":"def put ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PUT\" method","title":"put"},{"location":"reference/hug/use/#request","text":"def request ( self , method , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params )","title":"request"},{"location":"reference/hug/use/#trace","text":"def trace ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"TRACE\" method","title":"trace"},{"location":"reference/hug/use/#local","text":"class Local ( api , version = None , headers = mappingproxy ({}), timeout = None , raise_on = ( 500 ,), ** kwargs ) Defines the base concept of a consumed service. This is to enable encapsulating the logic of calling a service so usage can be independant of the interface","title":"Local"},{"location":"reference/hug/use/#ancestors-in-mro_1","text":"hug.use.Service","title":"Ancestors (in MRO)"},{"location":"reference/hug/use/#class-variables_1","text":"raise_on timeout version","title":"Class variables"},{"location":"reference/hug/use/#instance-variables_1","text":"api headers raise_on timeout version","title":"Instance variables"},{"location":"reference/hug/use/#methods_1","text":"","title":"Methods"},{"location":"reference/hug/use/#connect_1","text":"def connect ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"CONNECT\" method","title":"connect"},{"location":"reference/hug/use/#delete_1","text":"def delete ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"DELETE\" method","title":"delete"},{"location":"reference/hug/use/#get_1","text":"def get ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"GET\" method","title":"get"},{"location":"reference/hug/use/#head_1","text":"def head ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"HEAD\" method","title":"head"},{"location":"reference/hug/use/#options_1","text":"def options ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"OPTIONS\" method","title":"options"},{"location":"reference/hug/use/#patch_1","text":"def patch ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PATCH\" method","title":"patch"},{"location":"reference/hug/use/#post_1","text":"def post ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"POST\" method","title":"post"},{"location":"reference/hug/use/#put_1","text":"def put ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PUT\" method","title":"put"},{"location":"reference/hug/use/#request_1","text":"def request ( self , method , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params )","title":"request"},{"location":"reference/hug/use/#trace_1","text":"def trace ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"TRACE\" method","title":"trace"},{"location":"reference/hug/use/#service","text":"class Service ( version = None , timeout = None , raise_on = ( 500 ,), ** kwargs ) Defines the base concept of a consumed service. This is to enable encapsulating the logic of calling a service so usage can be independant of the interface","title":"Service"},{"location":"reference/hug/use/#descendants","text":"hug.use.HTTP hug.use.Local hug.use.Socket","title":"Descendants"},{"location":"reference/hug/use/#instance-variables_2","text":"raise_on timeout version","title":"Instance variables"},{"location":"reference/hug/use/#methods_2","text":"","title":"Methods"},{"location":"reference/hug/use/#connect_2","text":"def connect ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"CONNECT\" method","title":"connect"},{"location":"reference/hug/use/#delete_2","text":"def delete ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"DELETE\" method","title":"delete"},{"location":"reference/hug/use/#get_2","text":"def get ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"GET\" method","title":"get"},{"location":"reference/hug/use/#head_2","text":"def head ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"HEAD\" method","title":"head"},{"location":"reference/hug/use/#options_2","text":"def options ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"OPTIONS\" method","title":"options"},{"location":"reference/hug/use/#patch_2","text":"def patch ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PATCH\" method","title":"patch"},{"location":"reference/hug/use/#post_2","text":"def post ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"POST\" method","title":"post"},{"location":"reference/hug/use/#put_2","text":"def put ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PUT\" method","title":"put"},{"location":"reference/hug/use/#request_2","text":"def request ( self , method , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"CALL\" method","title":"request"},{"location":"reference/hug/use/#trace_2","text":"def trace ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"TRACE\" method","title":"trace"},{"location":"reference/hug/use/#socket","text":"class Socket ( connect_to , proto , version = None , headers = mappingproxy ({}), timeout = None , pool = 0 , raise_on = ( 500 ,), ** kwargs ) Defines the base concept of a consumed service. This is to enable encapsulating the logic of calling a service so usage can be independant of the interface","title":"Socket"},{"location":"reference/hug/use/#ancestors-in-mro_2","text":"hug.use.Service","title":"Ancestors (in MRO)"},{"location":"reference/hug/use/#class-variables_2","text":"Connection datagrams inet on_unix protocols raise_on streams unix version","title":"Class variables"},{"location":"reference/hug/use/#instance-variables_3","text":"connection connection_pool raise_on send_and_receive timeout version","title":"Instance variables"},{"location":"reference/hug/use/#methods_3","text":"","title":"Methods"},{"location":"reference/hug/use/#connect_3","text":"def connect ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"CONNECT\" method","title":"connect"},{"location":"reference/hug/use/#delete_3","text":"def delete ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"DELETE\" method","title":"delete"},{"location":"reference/hug/use/#get_3","text":"def get ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"GET\" method","title":"get"},{"location":"reference/hug/use/#head_3","text":"def head ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"HEAD\" method","title":"head"},{"location":"reference/hug/use/#options_3","text":"def options ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"OPTIONS\" method","title":"options"},{"location":"reference/hug/use/#patch_3","text":"def patch ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PATCH\" method","title":"patch"},{"location":"reference/hug/use/#post_3","text":"def post ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"POST\" method","title":"post"},{"location":"reference/hug/use/#put_3","text":"def put ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"PUT\" method","title":"put"},{"location":"reference/hug/use/#request_3","text":"def request ( self , message , timeout = False , * args , ** kwargs ) Populate connection pool, send message, return BytesIO, and cleanup","title":"request"},{"location":"reference/hug/use/#setsockopt","text":"def setsockopt ( self , * sockopts ) Add socket options to set","title":"setsockopt"},{"location":"reference/hug/use/#settimeout","text":"def settimeout ( self , timeout ) Set the default timeout","title":"settimeout"},{"location":"reference/hug/use/#trace_3","text":"def trace ( self , url , url_params = mappingproxy ({}), headers = mappingproxy ({}), timeout = None , ** params ) Calls the service at the specified URL using the \"TRACE\" method","title":"trace"},{"location":"reference/hug/validate/","text":"Module hug.validate hug/validate.py Defines hugs built-in validation methods Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Functions all def all ( * validators ) Validation only succeeds if all passed in validators return no errors any def any ( * validators ) If any of the specified validators pass the validation succeeds contains_one_of def contains_one_of ( * fields ) Enables ensuring that one of multiple optional fields is set","title":"Validate"},{"location":"reference/hug/validate/#module-hugvalidate","text":"hug/validate.py Defines hugs built-in validation methods Copyright (C) 2016 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Module hug.validate"},{"location":"reference/hug/validate/#functions","text":"","title":"Functions"},{"location":"reference/hug/validate/#all","text":"def all ( * validators ) Validation only succeeds if all passed in validators return no errors","title":"all"},{"location":"reference/hug/validate/#any","text":"def any ( * validators ) If any of the specified validators pass the validation succeeds","title":"any"},{"location":"reference/hug/validate/#contains_one_of","text":"def contains_one_of ( * fields ) Enables ensuring that one of multiple optional fields is set","title":"contains_one_of"},{"location":"venv/lib/python3.7/site-packages/Markdown-3.1.1.dist-info/LICENSE/","text":"Copyright 2007, 2008 The Python Markdown Project (v. 1.7 and later) Copyright 2004, 2005, 2006 Yuri Takhteyev (v. 0.2-1.6b) Copyright 2004 Manfred Stienstra (the original version) All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the Python Markdown Project nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE PYTHON MARKDOWN PROJECT ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ANY CONTRIBUTORS TO THE PYTHON MARKDOWN PROJECT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"LICENSE"},{"location":"venv/lib/python3.7/site-packages/pdocs/templates/","text":"The license included in this directory is for HTML5 Boiler Plate . Some of the HTML and CSS used here is derived from that project.","title":"Home"},{"location":"venv/lib/python3.7/site-packages/pep562-1.0.dist-info/LICENSE/","text":"MIT License Copyright (c) 2018 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"venv/lib/python3.7/site-packages/pymdown_extensions-6.1.dist-info/LICENSE/","text":"The MIT License (MIT) (Except where stated below) Copyright (c) 2014 - 2018 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. superfences.py is derived from Python Markdown's fenced_code extension. Fenced Code Extension for Python Markdown ========================================= This extension adds Fenced Code Blocks to Python-Markdown. See https://python-markdown.github.io/extensions/fenced_code_blocks/ for documentation. Original code Copyright 2007-2008 Waylan Limberg . All changes Copyright 2008-2014 The Python Markdown Project License: BSD inlinehilite.py is derived from Python Markdown's codehilite extension. CodeHilite Extension for Python-Markdown ======================================== Adds code/syntax highlighting to standard Python-Markdown code blocks. See https://python-markdown.github.io/extensions/code_hilite/ for documentation. Original code Copyright 2006-2008 Waylan Limberg . All changes Copyright 2008-2014 The Python Markdown Project License: BSD extrarawhtml.py is a literal copy and paste from Python Markdown's extra extension. It basically splits out the raw html markdown parsing into a seprate extension that can be used even if it is not desired to use all of 'extra'. Python-Markdown Extra Extension =============================== See https://python-markdown.github.io/extensions/extra/ for documentation. Copyright The Python Markdown Project License: BSD gemoji_db.py is generated from Gemoji's source code: https://github.com/github/gemoji. Copyright (c) 2013 GitHub, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. emoji1_db.py is generated from EmojiOne's source code: https://github.com/Ranks/emojione EmojiOne Non-Artwork Applies to the Javascript, JSON, PHP, CSS, HTML files, and everything else not covered under the artwork license above. License: MIT Complete Legal Terms: http://opensource.org/licenses/MIT","title":"LICENSE"},{"location":"venv/lib64/python3.7/site-packages/Markdown-3.1.1.dist-info/LICENSE/","text":"Copyright 2007, 2008 The Python Markdown Project (v. 1.7 and later) Copyright 2004, 2005, 2006 Yuri Takhteyev (v. 0.2-1.6b) Copyright 2004 Manfred Stienstra (the original version) All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the Python Markdown Project nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE PYTHON MARKDOWN PROJECT ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ANY CONTRIBUTORS TO THE PYTHON MARKDOWN PROJECT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"LICENSE"},{"location":"venv/lib64/python3.7/site-packages/pdocs/templates/","text":"The license included in this directory is for HTML5 Boiler Plate . Some of the HTML and CSS used here is derived from that project.","title":"Home"},{"location":"venv/lib64/python3.7/site-packages/pep562-1.0.dist-info/LICENSE/","text":"MIT License Copyright (c) 2018 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"venv/lib64/python3.7/site-packages/pymdown_extensions-6.1.dist-info/LICENSE/","text":"The MIT License (MIT) (Except where stated below) Copyright (c) 2014 - 2018 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. superfences.py is derived from Python Markdown's fenced_code extension. Fenced Code Extension for Python Markdown ========================================= This extension adds Fenced Code Blocks to Python-Markdown. See https://python-markdown.github.io/extensions/fenced_code_blocks/ for documentation. Original code Copyright 2007-2008 Waylan Limberg . All changes Copyright 2008-2014 The Python Markdown Project License: BSD inlinehilite.py is derived from Python Markdown's codehilite extension. CodeHilite Extension for Python-Markdown ======================================== Adds code/syntax highlighting to standard Python-Markdown code blocks. See https://python-markdown.github.io/extensions/code_hilite/ for documentation. Original code Copyright 2006-2008 Waylan Limberg . All changes Copyright 2008-2014 The Python Markdown Project License: BSD extrarawhtml.py is a literal copy and paste from Python Markdown's extra extension. It basically splits out the raw html markdown parsing into a seprate extension that can be used even if it is not desired to use all of 'extra'. Python-Markdown Extra Extension =============================== See https://python-markdown.github.io/extensions/extra/ for documentation. Copyright The Python Markdown Project License: BSD gemoji_db.py is generated from Gemoji's source code: https://github.com/github/gemoji. Copyright (c) 2013 GitHub, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. emoji1_db.py is generated from EmojiOne's source code: https://github.com/Ranks/emojione EmojiOne Non-Artwork Applies to the Javascript, JSON, PHP, CSS, HTML files, and everything else not covered under the artwork license above. License: MIT Complete Legal Terms: http://opensource.org/licenses/MIT","title":"LICENSE"}]}